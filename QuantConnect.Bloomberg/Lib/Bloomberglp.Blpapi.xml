<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bloomberglp.Blpapi</name>
    </assembly>
    <members>
        <member name="T:Bloomberglp.Blpapi.AbstractSession">
             <summary> This class provides an abstract session for sharing interfaces between
             Session and ProviderSession.
             </summary>
             <remarks> Sessions manage access to services either by requests and responses or
             subscriptions. A Session can dispatch events and replies in either a
             synchronous or asynchronous mode. The mode of a Session is determined when it
             is constructed and cannot be changed subsequently.
             </remarks>
            
        </member>
        <member name="T:Bloomberglp.Blpapi.AbstractSession.StopOption">
            <summary> Enumerations for controlled shutdown of the session.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.AbstractSession.StopOption.SYNC">
            <summary> Stops the <see cref="T:Bloomberglp.Blpapi.Session">Seesion</see> and
            doesn't return until no more events
            are being processed.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.AbstractSession.StopOption.ASYNC">
            <summary> Stops the <see cref="T:Bloomberglp.Blpapi.Session">Seesion</see>
            and returns immediately.</summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.#ctor">
            <summary>
             The default constructor.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.Start">
            <summary>
            Issues a blocking call to start the session.
            </summary>
            <remarks>
            Issues a blocking call to start the session. This call returns <c>true</c> if
            the Session was started successfully or
            <c>false</c>otherwise.
            Also a <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS">
            Event.EventType.SESSION_STATUS</see> event may be published
            containing a message with the result of the request. If the Session was
            started successfully a "SessionStarted" message will be generated. If
            the start failed a "SessionStartupFailure" message may be generated.
            <para>  Note: If this is an asynchronous Session then the
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS">
            Event.EventType.SESSION_STATUS</see> may be processed by the
            registered <see cref="T:Bloomberglp.Blpapi.EventHandler">EventHandler</see>
            before this method has returned. If this Session is using an
            external <see cref="T:Bloomberglp.Blpapi.EventDispatcher">EventDispatcher</see>
            it should be already started.
            </para>
            <para>  A Session may only be started once.
            </para>
            </remarks>
            <returns><c>true</c> if session started successfully, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.StartAsync">
            <summary>
            Initiates a non blocking call to start the session.
            </summary>
            <remarks>
             Initiates a non blocking call to start the session and returns immediately.
             On completion of this request a
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS">
             Event.EventType.SESSION_STATUS</see>
             event is published containing a message with the result of the request.
             If the Session was started successfully a "SessionStarted" message will
             be generated. If the start failed a "SessionStartupFailure" message will
             be generated.
            <para>
             Note: If this is an asynchronous Session then the
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS">
             Event.EventType.SESSION_STATUS</see> may be processed by the
             registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/> before this method has returned.
              If this Session is using an external
              <see cref="T:Bloomberglp.Blpapi.EventDispatcher">EventDispatcher</see> it should be already started.
             </para>
             <para> A Session may only be started once. </para>
             </remarks>
             <exception cref="T:System.IO.IOException">
             An I/O error occurs.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             If the session is in an invalid state
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.Stop">
             <summary> Stops this session.
             </summary>
            <remarks>
            This is the same as calling
             <see cref="M:Bloomberglp.Blpapi.AbstractSession.Stop(Bloomberglp.Blpapi.AbstractSession.StopOption)">Stop(StopOption)</see>
             with <see cref="F:Bloomberglp.Blpapi.AbstractSession.StopOption.SYNC"/>.
             </remarks>
             <seealso cref="M:Bloomberglp.Blpapi.AbstractSession.Stop(Bloomberglp.Blpapi.AbstractSession.StopOption)">
             </seealso>
             <seealso cref="T:Bloomberglp.Blpapi.AbstractSession.StopOption">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.Stop(Bloomberglp.Blpapi.AbstractSession.StopOption)">
             <summary> Stops the operation of this session.
             </summary>
             <remarks>
             <para>
             If the specified stopOption is <see cref="F:Bloomberglp.Blpapi.AbstractSession.StopOption.SYNC"/>,
             then this call
             blocks until all events relating to this session which are currently
             being processed have returned from a application supplied
             <see cref="T:Bloomberglp.Blpapi.EventHandler"/> objects. Once this call returns no further
             callbacks to EventHandlers will occur. If a synchronous Stop() is
             called from within an EventHandler callback, the behavior is undefined
             and may result in a deadlock.
             </para>
            
             <para>
             If the specified stopOption is <see cref="F:Bloomberglp.Blpapi.AbstractSession.StopOption.ASYNC"/>
             then the stop
             call returns immediately and events may still be being processed in
             user specified <see cref="T:Bloomberglp.Blpapi.EventHandler"/> objects.
             </para>
            
             </remarks>
             <seealso cref="T:Bloomberglp.Blpapi.AbstractSession.StopOption">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.NextEvent">
             <summary> Returns the next event available for processing on this session.
             </summary>
            
             <remarks>
             This method is the same as <see cref="M:Bloomberglp.Blpapi.AbstractSession.NextEvent(System.Int64)">
             NextEvent(0)</see>.
             </remarks>
            
             <returns> The next event available on this session.
             </returns>
             <exception cref="T:System.InvalidOperationException">
             An event handler was specified at construction.
             </exception>
             <exception cref="T:System.Threading.ThreadInterruptedException">
             The current thread is interrupted while it is waiting for an event.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.AbstractSession.NextEvent(System.Int64)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.NextEvent(System.Int64)">
             <summary> Returns the next event available for processing on this session.
             </summary>
            
             <remarks>
             If no event is available immediately wait for <code>timeoutMillis</code>
             milliseconds for an event to arrive. If no event is received before the
             timeout expires return a <see cref="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT"/> event.
             If the
             timeout specified is 0 then wait for an infinite amount of time for an
             event to be received. Note that this function cannot be called on a
             Session that is operating in "asynchronous" mode. That is a Session that
             was constructed with an <see cref="T:Bloomberglp.Blpapi.EventHandler"/>.
             </remarks>
            
             <param name="timeoutMillis">Timeout in milliseconds to wait before this method
             returns event if no events were available.
             </param>
             <returns> The next event available on this session if available before timeout
             or <see cref="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT"/> event if timeout occurs.
             </returns>
             <exception cref="T:System.Threading.ThreadInterruptedException">
             The current thread is interrupted while it is waiting for an event.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             An event handler was specified at construction.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.TryNextEvent">
             <summary> Tries to retrieve the next event available for processing
             on this session
             </summary>
            
             <remarks>
             This method never blocks. Note that this function cannot be called
             on a Session that is operating in "asynchronous" mode. That is a
             Session that was constructed with an <see cref="T:Bloomberglp.Blpapi.EventHandler"/>.
             </remarks>
             <returns> next event available on this session if available or null
             if no event is available immediately
             </returns>
             <exception cref="T:System.InvalidOperationException">
             An event handler was specified at construction.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.OpenServiceAsync(System.String)">
             <summary> Issues an asynchronous request to open a service.
             </summary>
            
             <remarks>
             Same as calling
             <see cref="M:Bloomberglp.Blpapi.AbstractSession.OpenServiceAsync(System.String,Bloomberglp.Blpapi.CorrelationID)">OpenServiceAsync(String, CorrelationID)</see>
             </remarks>
            
             <param name="uri">URI of the service that is to be opened.
             </param>
             <returns>A CorrelationID for this asynchronous openService request.
             </returns>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.AbstractSession.OpenService(System.String)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.OpenServiceAsync(System.String,Bloomberglp.Blpapi.CorrelationID)">
             <summary> Initiates an asynchronous request to open a service.
             </summary>
             <remarks>
             Initiates a request to open the service having the specified <c>uri
             </c> The specified 'uri' must contain a fully qualified service name.
             That is it must be of the form "//[namespace]/[service-name]"
             <para>
             Once the request has completed, a <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/>
             event will be generated indicating the result of the request.
             The <c>correlationId</c> will be returned in generated message. It
             can also be used to cancel this request before it completes by calling the
             <see cref = "M:Bloomberglp.Blpapi.AbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID)">Cancel</see> operation.  Note the supplied
             correlationId MUST BE unique from any "active" correlation supplied to
             this session via any operation(e.g., "subscribe", "sendRequest"). A
             correlation id is active if the request for which it was supplied is
             still pending, or if it refers to a subscription request that has not
             been terminated either explicitly or by an unsolicited termination.
             </para>
             </remarks>
            
             <param name="uri">URI of the service that is to be opened.
             </param>
             <param name="correlationId">A correlation Id for correlating this request.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.AbstractSession.OpenService(System.String)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.OpenService(System.String)">
            <summary>
            Opens the service having the specified
            <c>uri</c>.
            </summary>
            <remarks>
            <para>
            The specified uri must must contain a fully qualified service name.
            That is it must be of the form "//[namespace]/[service-name]". Note that
            this operation is a blocking operation which may require communication to
            server-side services. Execution may be be blocked for an undetermined
            amount of time. If blocking is not desired, then use
            <see cref = "M:Bloomberglp.Blpapi.AbstractSession.OpenServiceAsync(System.String,Bloomberglp.Blpapi.CorrelationID)">OpenServiceAsync()</see>
            instead. Also note that if the service
            is already opened by this session, the request will succeed immediately.
            </para>
            This method returns <c>true</c> is the service was open successfully <c>false</c>
            otherwise.  Once the request has completed, a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> event will be generated
            indicating the result of the request. If this is an asynchronous Session
            then this <see cref="T:Bloomberglp.Blpapi.Event"/> may be processed by the registered
            <see cref="T:Bloomberglp.Blpapi.EventHandler"/> before OpenService() has returned.
            <para>
            </para>
            </remarks>
            <param name="uri">URI of the service that is to be opened.
            </param>
            <returns> <c>true</c> if service was successfully opened <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            The current thread is interrupted while it is waiting for service.
            </exception>
            <seealso cref="M:Bloomberglp.Blpapi.AbstractSession.OpenService(System.String)">
            </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.GetService(System.String)">
            <summary>
            Returns a handle to a
            <see cref="T:Bloomberglp.Blpapi.Service"/>
            object representing the service
            identified by the specified uri.
            </summary>
            <remarks>
            The uri must contain a fully qualified service name. That is, it must
            be of the form "//[namespace]/[service-name]".
            If the specified service is not already open, a null handle is returned.
            </remarks>
            <param name="uri">URI of the service that is to be opened.
            </param>
            <returns>
            A handle to the service if it is already open; null otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)">
            <summary> Sends the specified authorizationRequest and update the specified
            identity with the results.
            </summary>
            <remarks>Same as calling
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            SendAuthorizationRequest(authorizationRequest, identity, null, correlationId, null)</see>.
            </remarks>
            <param name="authorizationRequest">A filled in authorization request that needs
            to be sent to the authorization service.
            </param>
            <param name="identity">
            A handle to identify the user that is being authorized.
            </param>
            <param name="correlationId">
            A correlator to be used for correlating the response to this request.
            </param>
            <returns>An internally generated CorrelationID if the specified
                    correlationId is null or return the specified correlationId.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
            The request is not compliant with the schema for the request.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId is already active for this Session.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified Identity was not created through this Session or it
            is the session identity.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.CorrelationID)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)"/>instead.
            </summary>
            <param name="authorizationRequest"></param>
            <param name="userHandle"></param>
            <param name="correlationId"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,System.String)">
             <summary> Sends the specified authorizationRequest and update the specified
             identity with the results.
             </summary>
             <remarks> Same as calling
             <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
             SendAuthorizationRequest(authorizationRequest, identity, null, correlationId, requestLabel)</see>
             </remarks>
             <param name="authorizationRequest">A filled in authorization request that needs
             to be sent to the authorization service.
             </param>
             <param name="identity">
             A handle to identify the user that is being authorized.
             </param>
             <param name="correlationId">A correlator to be used for correlating the
             response to this request.
             </param>
             <param name="requestLabel">
             A label that defines a string which will be recorded along with any diagnostics for this operation.
             </param>
             <returns>An internally generated CorrelationID if the specified
                     correlationId is null or return the specified correlationId.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
             The request is not compliant with the schema for the request.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
             <exception cref="T:System.ArgumentException">
             The specified Identity was not created through this Session  or it
             is the session identity.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,System.String)"/> instead.
            </summary>
            <param name="authorizationRequest"></param>
            <param name="userHandle"></param>
            <param name="correlationId"></param>
            <param name="requestLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
            <summary> Sends the specified authorizationRequest and update the specified
            identity with the results.
            </summary>
            <remarks> Same as calling
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            SendAuthorizationRequest(authorizationRequest, identity, eventQueue,
            correlationId, null)</see>.
            </remarks>
             <param name="request">Filled in authorization request that needs
            to be sent to the authorization service.
            </param>
            <param name="identity">
            A handle to identify the user that is being authorized.
            </param>
            <param name="eventQueue">
            The event queue to be used to receive response events for this request.
            </param>
            <param name="correlationId">The correlator to be used for correlating the
            response to this request.
            </param>
            <returns>An internally generated CorrelationID if the specified
                    correlationId is null or return the specified correlationId.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
            The request is not compliant with the schema for the request.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId is already active for this Session.
            </exception>
            <exception cref="T:System.ArgumentException">
            if the specified Identity was not created through this Session or
            it is the session identity.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)"/> instead.
            </summary>
            <param name="request"></param>
            <param name="userHandle"></param>
            <param name="eventQueue"></param>
            <param name="correlationId"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
             <summary> Sends the specified authorizationRequest and update the specified
             identity with the results.
             </summary>
            
             <remarks>
             <para> This request can be used by applications to authorize users to receive
             data from services. If an user is successfully authorized all the
             entitlements for that user is cached locally. Once authorized the
             userhandle can be used to make subscriptions and requests as the user.
             Also the userhandle can be checked to ensure that the user has the
             required entitlements for accessing data that was retrieved using the
             default credentials.
             </para>
             <para> This method sends the specified authorizationRequest to a authorization
             service that is available on this session. The specified correlationId
             is returned on the response and can be used to correlate the response to
             this request. If a null correlationId is specified then an internal
             CorrelationID is generated and returned.
             </para>
             <para>If an eventQueue is specified then all response events for this
              Authorization Request are published to this eventQueue. The user can
             block on this event queue for response and can use this as a mechanism
             to convert this asynchronous request into a synchronous request.
             </para>
             <para> On completion of this requests an "RESPONSE" event is published
             containing a message with the result of the authorization request. If
             the user was successfully authorized a "AuthorizationSuccess" message
             will be generated. If the user was not authorized a
             "AuthorizationFailure" message will be generated.
             </para>
             </remarks>
              <param name="request">A filled in authorization request that needs
             to be sent to the authorization service.
             </param>
             <param name="identity">
             A handle to identify the user that is being authorized.
             </param>
             <param name="eventQueue">
             An event queue to be used to receive response events for this request.
             </param>
             <param name="correlationId"> A correlator to be used for correlating the
             response to this request.
             </param>
             <param name="requestLabel">
             A label for the request. Used for diagnostic purposes.
             </param>
             <returns>An internally generated CorrelationID if the specified
                     correlationId is null or return the specified correlationId.
             </returns>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
             The request is not compliant with the schema for the request.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
             <exception cref="T:System.ArgumentException">
             The specified Identity was not created through this Session or it
             is the session identity.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/> instead.
            </summary>
            <param name="request"></param>
            <param name="userHandle"></param>
            <param name="eventQueue"></param>
            <param name="correlationId"></param>
            <param name="requestLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID)">
            <summary> Cancels an outstanding request or a subscription represented by the
            specified correlationId.
            </summary>
            <remarks> Same as calling <see cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID,System.String)">
            Cancel(correlationId, null)}</see>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary> Cancels an outstanding request or a subscription represented by the
            specified correlationId.
            </summary>
            <remarks> This operation provides a convenience of passing a single CorrelationID.
            See <see cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.String)" />
            operation for more information on the
            handling of cancel requests and other important notes.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.Cancel(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID})">
            <summary> Cancels outstanding requests or subscriptions represented by the
            specified list of correlationIds.
            </summary>
            <remarks> Same as calling
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.String)">
            Cancel(correlators, null)</see>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.Cancel(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.String)">
            <summary> Cancels outstanding requests or subscriptions represented by the
            specified list of correlationIds.
            </summary>
            <remarks> <para>
            Cancels a previous request or subscription for asynchronous topic updates
            associated with each correlationId specified in the list of correlators.
            Upon return, no further message will be generated for the request or
            subscription associated with the specified correlationIds. </para>
            <para>
            <B>NOTE:</B><br/>
            1) For asynchronous sessions, a handler may still be processing an
            existing message for the associated request or subscription after the
            call returns. That is while iterating over an event, if any message is
            encountered for a cancelled <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>, it will be silently
            ignored, but if the message was iterated to just prior to the completion
            of the cancel request it will be delivered, it is up to the application
            developer to handle this condition.<br/><br/>
            2) If any of the specified CorrelationIds do not refer to an "active"
            request or Subscription then, that particular <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>
            will be ignored.<br/><br/>
            3) Once this call returns, the specified <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> can be
            reused for new requests to this session. Also note that application
            developers should generally be cautions not to reuse a correlation id
            until all existing references within their applications have been cleared.
            Depending on the use of the correlation id, this can
            possibly result in accessing application resources which are no longer
            available. </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.CreateIdentity">
             <summary>  Returns a new Identity which is valid but has not been authorized.
             </summary>
             <remarks> Create a handle to represent a user of services. For using services with
             the specific user's credentials the userhandle should be authorized with
             the corresponding authorization service.
             </remarks>
             <returns>A <c>Identity</c> for a user to use in authorizations and sending
             requests and subscriptions.
             </returns>
            
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.CreateUserHandle">
            <summary>Deprecated since 3.3.0.0. Use <see cref="M:Bloomberglp.Blpapi.AbstractSession.CreateIdentity"/> instead.
            </summary>
            <returns>UserHandle</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.GenerateToken(System.String,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.IEventQueue)">
             <summary>
             Return a generated token to be used for authorization.
             </summary>
             <remarks>
             Generate a token to be used for authorization
            </remarks>
             <para>
             userId - username
             </para>
             <para>
             ipAddress - IPv4 or IPv6 address
             </para>
             <para>
             correlationId - optional correlation Id for correlating this
             request. If null, a correlationId is generated internally.
             </para>
             <para>
             eventQueue to be used to receive response events for this request.
             If null, events for this request are delivered to the Session's
             event queue.
             </para>
            
             <returns>
             a CorrelationID for this asynchronous openService request.
             </returns>
             <exception cref="T:System.InvalidOperationException">
             Session is not started.
             </exception>
             <exception cref="T:System.ArgumentException">
             Invalid authentication option is specified in session option or
             there is failure to get authentication information based on
             authentication option.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.GenerateToken(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.IEventQueue)">
             <summary>Return a generated token to be used for authorization.
             </summary>
             <remarks>
             Generate a token to be used for authorization
            </remarks>
             <para>
             correlationId - optional correlation Id for correlating this
             request. If null, a correlationId is generated internally.
             </para>
             <para>
             eventQueue to be used to receive response events for this request.
             If null, events for this request are delivered to the Session's
             event queue.
             </para>
            
             <returns> a CorrelationID for this asynchronous openService request.
             </returns>
             <exception cref="T:System.InvalidOperationException">
             Session is not started.
             </exception>
             <exception cref="T:System.ArgumentException">
             Invalid authentication option is specified in session option or
             there is failure to get authentication information based on
             authentication option.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.GenerateToken(Bloomberglp.Blpapi.CorrelationID)">
             <summary>Return a generated token to be used for authorization.
             </summary>
             <remarks>
             Generate a token to be used for authorization
            </remarks>
             <para>  correlationId - a correlation Id for correlating this request
             </para>
            
             <returns> a CorrelationID for this asynchronous openService request.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">
             Session is not started.
             </exception>
             <exception cref="T:System.ArgumentException">
             Invalid authentication option is specified in session option or there is failure
             to get authentication information based on authentication option.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.GenerateToken">
             <summary>Return a generated token to be used for authorization.
             </summary>
             <remarks>
             Generate a token to be used for authorization
            </remarks>
             <returns> a CorrelationID for this asynchronous openService request.
             </returns>
             <exception cref="T:System.InvalidOperationException">
             Session is not started.
             </exception>
             <exception cref="T:System.ArgumentException">
             Invalid authentication option is specified in session option or there is failure
             to get authentication information based on authentication option.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.GenerateAuthorizedIdentity(Bloomberglp.Blpapi.AuthOptions,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Generates an authorized <see cref="T:Bloomberglp.Blpapi.Identity"/> with the specified
            <paramref name="authOptions"/> and <paramref name="cid"/>.
            <para>
            One or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.AUTHORIZATION_STATUS"/>
            events, zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOKEN_STATUS"/>
            events and zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/>
            events are generated. If this is an asynchronous
            <see cref="T:Bloomberglp.Blpapi.AbstractSession"/> then an <see cref="T:Bloomberglp.Blpapi.Event"/> may be
            processed by the registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/> before
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.GenerateAuthorizedIdentity(Bloomberglp.Blpapi.AuthOptions,Bloomberglp.Blpapi.CorrelationID)"/> has returned.
            <para>
            The behavior is undefined when <paramref name="authOptions"/> is
            null.
            </para>
            </para>
            </summary>
            <param name="authOptions">
            The <see cref="T:Bloomberglp.Blpapi.AuthOptions"/> with which the <see cref="T:Bloomberglp.Blpapi.Identity"/>
            will be generated.
            </param>
            <param name="cid">
            If provided will be used to identify messages associated with the
            generated identity.
            </param>
            <returns>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that will be used to
            identify messages associated with the generated identity.
            This will be <paramref name="cid"/> if it was provided.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.GetAuthorizedIdentity(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Gets the authorized <see cref="T:Bloomberglp.Blpapi.Identity"/> associated with the
            specified <paramref name="cid"/>.
            <para>
            If <paramref name="cid"/> is omitted and the session identity
            is authorized, the function will return the session identity.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is no identity mapped to <paramref name="cid"/> or
            the mapped identity is not authorized, or <paramref name="cid"/> is
            omitted and the session identity is not authorized.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SetEventHandler(Bloomberglp.Blpapi.Internal.SessionImpl.SessionEventHandler,Bloomberglp.Blpapi.Event.EventType)">
            <summary>
            Sets the event handler for the specified event type.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.SetEventHandler(Bloomberglp.Blpapi.Internal.SessionImpl.SessionEventHandler)">
            <summary>
            Set eventhandler for all event Type
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.DispatchEvent(Bloomberglp.Blpapi.Event)">
            <summary> Dispatch event with event handler if it has been set
            otherwise do nothing. Event handlers are set by a library client
            in case of async session.
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SetEventHandler(Bloomberglp.Blpapi.Internal.SessionImpl.SessionEventHandler)"/>,
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SetEventHandler(Bloomberglp.Blpapi.Internal.SessionImpl.SessionEventHandler,Bloomberglp.Blpapi.Event.EventType)"/>,
            <see cref="T:Bloomberglp.Blpapi.Event.EventType"/>
            </summary>
            <param name="eventObj">The event for dispatching.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.Init(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.EventDispatcher,System.Boolean)">
            <summary> Initialize AbstractSession. Must be called from the
            constructor(s) of the derived class.
            </summary>
            <param name="sessionOptions">Values in sessionOptions are used
            for configuring this session.</param>
            <param name="eventDispatcher">The dispatcher to be used for
            dispatching events.</param>
            <param name="isAsyncSession">Whether session is asynchronous.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.AbstractSession.System#IDisposable#Dispose">
            <summary>
            Dispose this Session object. It calls <see cref="M:Bloomberglp.Blpapi.AbstractSession.Stop">AbstractSession.Stop()</see> to
            close the opened socket.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.AuthApplication">
            <summary>
            Contains application-specific authorization options.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthApplication.#ctor(System.String)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthApplication"/> object to for
            authorization.
            <para>
            The behavior is undefined when <paramref name="applicationName"/>
            is null or empty.
            </para>
            </summary>
            <param name="applicationName">
            The name of the application to authenticate as.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.AuthOptions">
            <summary>
            Defines the authorization options which the user can set on
            <see cref="T:Bloomberglp.Blpapi.SessionOptions"/> as the authorization options for the
            session identity or use to authorize other identities.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthOptions.#ctor">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthOptions"/> to specify no authorization
            should be used.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthOptions.#ctor(Bloomberglp.Blpapi.AuthUser)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthOptions"/> object for User Mode with the
            Operating System Login(Domain\User), Active Directory, or Email.
            <para>
            The behavior is undefined when <paramref name="user"/> is null
            or created with <see cref="M:Bloomberglp.Blpapi.AuthUser.CreateWithManualOptions(System.String,System.String)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthOptions.#ctor(Bloomberglp.Blpapi.AuthApplication)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthOptions"/> object for Application Mode.
            <para>
            The behavior is undefined when <paramref name="application"/> is
            null.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthOptions.#ctor(Bloomberglp.Blpapi.AuthUser,Bloomberglp.Blpapi.AuthApplication)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthOptions"/> object for User and
            Application Mode.
            <para>
            The behavior is undefined when either <paramref name="user"/> or
            <paramref name="application"/> is null.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthOptions.#ctor(Bloomberglp.Blpapi.AuthToken)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthOptions"/> object for Manual Token Mode.
            <para>
            The behavior is undefined when <paramref name="token"/> is
            null.
            </para>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.AuthOptions.AuthOptionsType">
            <summary>
            The type of authentication in use.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.AuthToken">
            <summary>
            Contains manual token authorization  options.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthToken.#ctor(System.String)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthToken"/> to use for authorization.
            <para>
            The behavior is undefined when <paramref name="token"/> is null
            or empty.
            </para>
            </summary>
            <param name="token">
            A string representing the user's credentials.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.AuthUser">
            <summary>
            Contains user-specific authorization options.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthUser.CreateWithLogonName">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthUser"/> configured for Operating System
            Login (Domain\User) authorization mode (OS_LOGON).
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthUser.CreateWithActiveDirectoryProperty(System.String)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthUser"/> configured for Active Directory
            authorization mode (DIRECTORY_SERVICE).
            <para>
            The behavior is undefined when <paramref name="propertyName"/>
            is null or empty.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.AuthUser.CreateWithManualOptions(System.String,System.String)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.AuthUser"/> configured for manual
            authorization.
            <para>
            The behavior is undefined when either <paramref name="userId"/> or
            <paramref name="ipAddress"/> is null or empty.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Constant">
             <summary> Represents a constant value in the schema.
             </summary>
            
             <remarks>
             <para>
             Constants can be any of the following DataTypes: BOOL, CHAR, BYTE, INT32,
             INT64, FLOAT32, FLOAT64, STRING, DATE, TIME, DATETIME. As well as the
             constants value this class also provides access to the symbolic name,
             description and status of the constant. </para>
             <para>
             Constants are read-only and always created by the API, never by the
             application. </para>
             </remarks>
            
             <threadsafety><c>Constant</c> is safe for multithreaded operations
             except for <c>SetUserData</c> and <c>Userdata</c> methods.
             </threadsafety>
             <author>  Chao Yao(cyao3)
             </author>
        </member>
        <member name="P:Bloomberglp.Blpapi.Constant.UserData">
            <summary> Gets or sets the user data associated with this Constant.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Constant.Name">
            <summary> Gets the symbolic name of the constant.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Constant.Description">
            <summary> Gets a String containing a human readable description of this
            Constant.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Constant.Status">
            <summary> Gets the status of this Constant.
            </summary>
            <seealso cref="T:Bloomberglp.Blpapi.Schema.Status"/>
        </member>
        <member name="P:Bloomberglp.Blpapi.Constant.Datatype">
            <summary> Gets the Datatype used to represent the value of this Constant.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsChar">
            <summary> Gets the value of this Constant as a char if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to a char.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsInt32">
            <summary> Gets the value of this Constant as an Int32 if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to an Int32.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsInt64">
            <summary> Gets the value of this Constant as an Int64 if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to an Int64.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsFloat32">
            <summary> Gets the value of this Constant as a Float32 if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to a Float32.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsFloat64">
            <summary> Gets the value of this Constant as a Float64 if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to a Float64.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsString">
            <summary> Gets the value of this Constant as a string if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to a string.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsDatetime">
            <summary> Gets the value of this Constant as a Datetime if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to a Datetime.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsDate">
            <summary> Gets the value of this Constant as a Datetime containing
            only a date part if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to a Date.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.GetValueAsTime">
            <summary> Gets the value of this Constant as a Datetime containing
            only a time part if it can be converted.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException"> The value
            of this Constant cannot be converted to a Time.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.Print(System.IO.Stream)">
            <summary> Prints this constant into 'output'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constant.Print(System.IO.TextWriter)">
            <summary> Prints this constant into 'writer'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ConstantsList">
             <summary> Represents a list of Constant objects in the schema.
             Implements generic <c>IDictionary</c> interface.
             </summary>
            
             <remarks> As well as the list of Constant objects this class also provides access to
             the symbolic name, description and status of the ConstantsList. All Constant
             objects in a ConstantsList are of the same Datatype. ConstantLists are
             read-only and always created by the API, never by the application.
             This is a read-only object. Any IDictionary
             writing methods throws <c>InvalidOperation</c> exception.
             </remarks>
            
             <threadsafety><c>ConstantsList</c> is safe for multithreaded operations
             except for <c>SetUserData</c> and <c>Userdata</c> methods.
             </threadsafety>
            
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="P:Bloomberglp.Blpapi.ConstantsList.UserData">
            <summary> Gets or sets the user data associated with this ConstantList.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.ConstantsList.Name">
            <summary> Gets the symbolic name of this ConstantsList.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.ConstantsList.Description">
            <summary>
            Gets a String containing a human readable description of this
            ConstantsList.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.ConstantsList.Status">
            <summary>
            Gets the status of this ConstantList.
            </summary>
            <seealso cref="T:Bloomberglp.Blpapi.Schema.Status"/>
        </member>
        <member name="P:Bloomberglp.Blpapi.ConstantsList.Datatype">
            <summary> Gets the Datatype used to represent the value of this ConstantsList
            </summary>
            <seealso cref="T:Bloomberglp.Blpapi.Schema.Datatype"/>
        </member>
        <member name="P:Bloomberglp.Blpapi.ConstantsList.Item(Bloomberglp.Blpapi.Name)">
            <summary>
            Gets the constant specified by name.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ConstantsList.ContainsKey(Bloomberglp.Blpapi.Name)">
            <summary>
            This is the same as <c>ContainsKey(string)</c>.
            </summary>
            <param name="key">Key value</param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ConstantsList.TryGetValue(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Constant@)">
            <summary>
            This is the same as <c>TryGetValue(string, Constatant)</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ConstantsList.Print(System.IO.Stream)">
            <summary> Print the constant to the Stream.
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ConstantsList.Print(System.IO.TextWriter)">
            <summary> Print the constant with the help of the TextWriter.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Constraint">
             <summary> Contains a single constraint.
             </summary>
            
             <threadsafety static="true" instance="true"/>
            
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="P:Bloomberglp.Blpapi.Constraint.ConstraintType">
            <summary> Name of the type of this constraint.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Constraint.Values">
            <summary> A list of all of the possible values that a variable of
            this type may represent.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constraint.Print(System.IO.Stream)">
            <summary> Print the constraint to the Stream.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Constraint.Print(System.IO.TextWriter)">
            <summary> Print the constraint with the help of the TextWriter.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ConstraintsList">
             <summary> Represents a list of Constraint objects.
             Implements generic <c>IDictionary</c> interface.
             </summary>
            
             <remarks> This is a read-only object. Any IDictionary
             writing methods throws <c>InvalidOperationException</c> exception.
             </remarks>
             <threadsafety static="true" instance="true"/>
            
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="P:Bloomberglp.Blpapi.ConstraintsList.Item(Bloomberglp.Blpapi.Name)">
            <summary>
            This is the same as <c>this[string]</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ConstraintsList.ContainsKey(Bloomberglp.Blpapi.Name)">
            <summary>
            This is the same as <c>ContainsKey(string)</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ConstraintsList.TryGetValue(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Constraint@)">
            <summary>
            This is the same as <c>TryGetValue(string, Constatant)</c>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.CorrelationID">
             <summary> A key used to identify individual subscriptions or requests.
             </summary>
            
             <threadsafety static="true" instance="true"/>
            
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.CorrelationID.#ctor(System.Int64)">
            <summary>
            Constructs a CorrelationID object and initializes it with the specified
            <c>long</c> correlation data.
            </summary>
            <param name="value">The long value to be used as the correlation data.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.CorrelationID.#ctor(System.Object)">
            <summary>
            Constructs a correlation id object and initializes it with the specified
            Object value correlation data.
            </summary>
            <param name="value">The Object value to be used as the correlation data.
            </param>
            <exception cref="T:System.ArgumentException">
            The input value is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.CorrelationID.#ctor">
            <summary>
            Constructs a correlation id object and initializes it with the incremented
            long value.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.CorrelationID.#ctor(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.CorrelationID.Value">
            <summary>Returns the value of this correlation id as a long value.
            </summary>
            <remarks>Returns the value of this correlation id as a long value. Note that
            this function assumes that this correlation id object has been
            initialized with an long value.
            </remarks>
            <returns>The <c>long</c> value that this correlation id was initialized with.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            This correlation id was not initialized with an <c>long</c> value.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.CorrelationID.Object">
            <summary>Returns the value of this correlation id as a Object value.
            </summary>
            <remarks>Returns the value of this correlation id as a Object value. Note that
            this function assumes that this correlation id object has been
            initialized with an Object value.
            </remarks>
            <returns>The <c>object</c> value that this correlation id was initialized with.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            This correlation id was not initialized with an <c>object</c>.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.CorrelationID.IsInternal">
            <summary>
             Returns <c>true</c> if this correlation id object was generated internally
             by the library.
            </summary>
            <returns>
             Returns <c>true</c> if this correlation id object was generated internally
             by the library.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.CorrelationID.IsObject">
            <summary>
             Returns <c>true</c> if this correlation id object was was originally initialized
             with an <c>object</c> value.
            </summary>
            <returns>
             Returns <c>true</c> if this correlation id object was was originally initialized
             with an <c>object</c> value.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.CorrelationID.IsValue">
            <summary>
             Returns <c>true</c> if this correlation id object was was originally initialized
             with an <c>long</c> value.
            </summary>
            <returns>
             Returns <c>true</c> if this correlation id object was was originally initialized
             with an <c>long</c> value.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.CorrelationID.Equals(System.Object)">
            <summary>
            Checks value equality.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.CorrelationID.GetHashCode">
            <summary> Serves as the default hash function. (Inherited from Object.)
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.CorrelationID.ToString">
            <summary> Return the string representation of this object.
            </summary>
            <returns>The string representing this object.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Datetime">
             <summary> Represents a date and/or time.
             </summary>
            
             <remarks> Datetime can represent a date and/or a time or any combination of the
             components of a date and time. The value is represented as eight parts which
             can be set or queried independently. These parts are: year; month;
             day (of month); hour; minute; second; milliseconds and offset (of timezone
             from GMT in minutes). Methods are provided to set and query the parts
             individually and in groups. For example, setDate() and setTime(). It is also
             possible to determine which parts of the Datetime have been set.
             </remarks>
             <threadsafety static="true" instance="false"/>
            
             <author>  Siva Somu (ssomu)</author>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.YEAR_PART">
            <summary>
            Year part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.MONTH_PART">
            <summary>
            Month part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.DAY_OF_MONTH_PART">
            <summary>
            Day of month part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.HOUR_PART">
            <summary>
            Hour part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.MINUTE_PART">
            <summary>
            Minute part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.SECOND_PART">
            <summary>
            Second part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.MILLISECOND_PART">
            <summary>
            Millisecond part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.TIME_ZONE_OFFSET">
            <summary>
            Timezone offset part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.DATE">
            <summary>
            Date part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.TIME">
            <summary>
            Time part bitmask without millisecond.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.TIMEMILLI">
            <summary>
            Time part bitmask with millisecond.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.MICROSECOND_PART">
            <summary>
            Microsecond part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.NANOSECOND_PART">
            <summary>
            Nanosecond part bitmask.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Datetime.PICOSECOND_PART">
            <summary>
            Picosecond part bitmask.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.#ctor">
            <summary> Constructs a Datetime object with each part
             initialized to an unset state.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.#ctor(Bloomberglp.Blpapi.Datetime)">
            <summary> Constructs a Datetime object having the same values as specified 'other'
             Datetime object.
            </summary>
             <param name="other">the Datetime object to copy.
             </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Creates Datetime object having the Date and Time portions set to the
             specified values. The timezone offset is in the unset state.
             </summary>
             <param name="year"> The year.</param>
             <param name="month"> The month between 1-12.</param>
             <param name="dayOfMonth"> The day of the month between 1-31.</param>
             <param name="hour"> The hour of the day between 0-23.</param>
             <param name="minute"> The minute between 0-59.</param>
             <param name="second"> The second between 0-59.</param>
             <param name="milliSecond"> The millisecond between 0-999.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
             Creates Datetime object having the Date portion set to the specified
             values. The time and timezone offset are in the unset state.
             </summary>
             <param name="year"> The year.</param>
             <param name="month"> The month between 1-12.</param>
             <param name="dayOfMonth"> The day of the month between 1-31.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Creates Datetime object having the Time portion set to the specified
             values. The Date and timezone offset are in the unset state.
             </summary>
             <param name="hour"> The hour of the day between 0-23.</param>
             <param name="minute"> The minute between 0-59.</param>
             <param name="second"> The second between 0-59.</param>
             <param name="milliSecond"> The millisecond between 0-999.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.#ctor(System.DateTime)">
            <summary>
             Creates Datetime object from System.DateTime
             </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.Year">
            <summary> Gets or sets the year value of this Datetime object.
            The 'get' result is undefined unless Year is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.Month">
            <summary> Gets or sets the month value of this Datetime object.
            The 'get' result is undefined unless Month is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.DayOfMonth">
            <summary> Gets or sets the day of month value of this Datetime object.
            The 'get' result is undefined unless DayOfMonth is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.Hour">
            <summary> Gets or sets the hour value of this Datetime object.
            The 'get' result is undefined unless Hour is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.Minute">
            <summary> Gets or sets the minute value of this Datetime object.
            The 'get' result is undefined unless Minute is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.Second">
            <summary> Gets or sets the second value of this Datetime object.
            The 'get' result is undefined unless Second is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.MilliSecond">
            <summary> Gets or sets the millisecond value of this Datetime object.
            The 'get' result is undefined unless MilliSecond is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.MicroSecond">
            <summary> Gets or sets the number of (whole) microseconds in the fraction-of-a-second
            part of the value of this object. The 'get' result is undefined unless MicroSecond is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.NanoSecond">
            <summary>
            Gets or sets the number of (whole) nanoseconds in the fraction-of-a-second
            part of the value of this object. The 'get' result is undefined unless NanoSecond is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.PicoSecond">
            <summary>
            Gets or sets the number of (whole) picoseconds in the fraction-of-a-second
            part of the value of this object. The 'get' result is undefined unless PicoSecond is set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.Parts">
            <summary>
            Gets a bitmask of all parts that are set in this Datetime object.
            </summary>
            <remarks>
            This can be compared to the values in the Datetime Parts constants using
            bitwise operations.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.HasParts(System.Int32)">
            <summary>
            Return true if this Datetime object has all of the specified parts set.
            </summary>
            <param name="parts">
            The bitmap identifying which parts of this Datetime object needs to
            be tested. The value of this parameter must be constructed by combining
            together appropriate part bitmasks with bitwise logical OR.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Datetime.TimezoneOffsetMinutes">
            <summary> Gets or sets the timezone offset value of this Datetime object.
            The 'get' result is undefined unless TimezoneOffsetMinutes is set.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.SetDatetime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Sets the date, time and portions of this Datetime object
            to the specified values.
            </summary>
            <param name="year"> The year.</param>
            <param name="month"> The month between 1-12.</param>
            <param name="dayOfMonth"> The day of the month between 1-31.</param>
            <param name="hour"> The hour of the day between 0-23.</param>
            <param name="minute"> The minute between 0-59.</param>
            <param name="second"> The second between 0-59.</param>
            <param name="milliSecond"> The millisecond between 0-999.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.SetDatetime(System.DateTime)">
            <summary> Sets the date, time and portions of this Datetime object
            using values from the specified <see cref="T:System.DateTime">System.DateTime</see>.
            </summary>
            <param name="datetime"> The calendar object whose values are to be used to
                             set date and time.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.SetDatetimeTz(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Sets the date, time and timezone offset portions
            of this Datetime object to the specified values.
            </summary>
            <param name="year"> The year.</param>
            <param name="month"> The month between 1-12.</param>
            <param name="dayOfMonth"> The day of the month between 1-31.</param>
            <param name="hour"> The hour of the day between 0-23.</param>
            <param name="minute"> The minute between 0-59.</param>
            <param name="second"> The second between 0-59.</param>
            <param name="milliSecond"> The millisecond between 0-999.</param>
            <param name="timezoneOffsetMinutes "> The timezone offset in minutes.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary> Sets the date portion of this Datetime object
            to the specified values.
            </summary>
            <param name="year"> The year.</param>
            <param name="month"> The month between 1-12.</param>
            <param name="dayOfMonth"> The day of the month between 1-31.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.SetDateTz(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Sets the date and timezone offset portions of
            this Datetime object to the specified values.
            </summary>
            <param name="year"> The year.</param>
            <param name="month"> The month between 1-12.</param>
            <param name="dayOfMonth"> The day of the month between 1-31.</param>
            <param name="timezoneOffsetMinutes "> The timezone offset in minutes.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.SetTime(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Sets the time portions of this Datetime object
            to the specified values.
            </summary>
            <param name="hour"> The hour of the day between 0-23.</param>
            <param name="minute"> The minute between 0-59.</param>
            <param name="second"> The second between 0-59.</param>
            <param name="milliSecond"> The millisecond between 0-999.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.SetTimeTz(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Setsthe time and timezone offset portions of
            this Datetime object to the specified values.
            </summary>
            <param name="hour"> The hour of the day between 0-23.</param>
            <param name="minute"> The minute between 0-59.</param>
            <param name="second"> The second between 0-59.</param>
            <param name="milliSecond"> The millisecond between 0-999.</param>
            <param name="timezoneOffsetMinutes "> The timezone offset in minutes.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.Clear">
            <summary>
            Sets all parts of this Datetime object to the unset state.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.Equals(System.Object)">
            <summary> Check value equality. Two values are equal if they have the same parts,
            and those parts have the same values. e.g. 00:00 is not equal to 00:00:00.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.IsValid">
            <summary>
            Check whether the value of this 'Datetime' object is valid.
            The behaviour is undefined unless this object represents a date
            (has YEAR, MONTH and DAY part set) or time
            (has HOURS, MINUTES, SECONDS and MILLISECONDS part set).
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.IsValidField(System.Int32)">
            <summary>Please use <see cref="M:Bloomberglp.Blpapi.Datetime.HasParts(System.Int32)"/> instead.
            </summary>
            <param name="fieldId"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.Clone">
            <summary> Create a new Datetime object with the same value as this object.
            </summary>
            <returns>The clonned object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.ToString">
            <summary>
            Converts the Date and Time represented by this Datetime object to String.
            </summary>
            <returns>The string representing this Datetime object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.ToSystemDateTime">
            <summary>
            Converts this BLP Datetime object into System.DateTime object.
            </summary>
            <remarks>
            If the timezone is UTC, the System.DateTime object returned is set as
            <see cref="F:System.DateTimeKind.Utc"/>; if the timezone is the current local,
            the System.DateTime object returned is set as
            <see cref="F:System.DateTimeKind.Local"/>;
            otherwise, it is set to be <see cref="F:System.DateTimeKind.Unspecified"/>.
            If this object doesn't have date part,
            it is set as the current date. If this object doesn't have time part, it is
            set as 0:0:0.000.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Datetime.GetHashCode">
            <summary> Serves as the default hash function. (Inherited from Object.)
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            <summary> The exception that is thrown when the correlation IDs
             associated with subscriptions are the same(with equal value).
            </summary>
            
             <remakrs>
             For example, <c>CorrelationID id1 = new CorrelationID(1);
             CorrelationID id2 = new CorrelationID(1);
             </c>. This exception is thrown when two subscirptions
             are with <c>id1</c> and <c>id2</c>, respectively.
            
             </remakrs>
             <threadsafety static="true" instance="false"/>
            
             <author>  Siva Somu (ssomu)
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.DuplicateCorrelationIDException.#ctor">
            <summary> Construct the exception without a description.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.DuplicateCorrelationIDException.#ctor(System.String)">
            <summary> Construct the exception with the description string.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.DuplicateCorrelationIDException.#ctor(System.String,System.Exception)">
            <summary> Construct the exception with the description string and the cause
            exception.
            </summary>
            <param name="description"></param>
            <param name="cause"></param>
        </member>
        <member name="P:Bloomberglp.Blpapi.DuplicateCorrelationIDException.Description">
            <summary> Return the description.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Element">
             <author>  Chao Yao(cyao3), Siva Somu(ssomu)
             </author>
            
             <summary> Elements are used to represent all data sent to/received from API services.
             </summary>
            
             <threadsafety static="true" instance="false"/>
            
             <remarks>
             <para>
             <b>Using "Element" objects</b></para>
             <para>
             An element is a variant type. That is they can represent any of the data
             types supported by the blpapi. Elements can represent simple scalar values
             like (float, string), arrays of simple types, complex values
             (sequences/choices), and arrays of complex values.</para>
            
             <para>
             <b>Accessing Elements</b></para>
             <para>
             Elements are used when accessing messages received from the API, and when
             preparing requests for API services. There are two classes of
             accessor/manipulators that are used to access/manipulate elements. When
             accessing simple values and arrays, the "GetValueAsX" family of functions are
             used where 'X' is the target data type(e.g., "GetValueAsInt32"). For
             simplicity, all "GetValueAsX" functions can optionally be supplied with an
             index parameter to access elements of an array. For scalar elements, index
             should not be supplied, or zero should be supplied. The following are
             examples of accessing simple and array elements.
             </para>
             <para>
             This example shows how to access the value of a scalar element as an
             integer number. Then goes on to show how to access the same element as a String
             <code>
             Element e;
            
             ...
            
             int x = e.GetValueAsIn32();
            
             System.Console.WriteLine(e.GetValueAsString());
            
             (or)
            
             System.Console.WriteLine(e.GetValueAsString(0));
             </code></para>
            
             <para>
             The following example shows how to access array elements
             <code>
             int count = e.NumValues;
             for (int i = 0; i &lt; count; ++i) {
             System.Console.WriteLine(e.GetValueAsString(i));
             }
             </code></para>
             <para>
             Use NumValues to determine the number of values available. For scalar
             values, it will return either 0 or 1. For arrays it will return the actual
             number of values in the array.
             </para>
            
             <para>
             Complex elements contain named sub-elements. Sub-elements are accessed using
             the "GetElement", and "GetElementAsX" accessor functions. To
             demonstrate, the following example shows how to access the "city"
             sub-element of an  "address" element:
             <code>
             Element address;
             ...
             address.GetElement("city");
             </code></para>
            
             <para>
             The following example retrieves the value of the "city" sub-element as a
             string value.
             <code>address.GetElementAsString("city");</code></para>
            
             <para>
             To determine the number of available sub elements in a given element, the
             "NumElements" accessor can be used. To retrieve the Nth available
             sub-element of a complex element, the "GetElement(int)" accessor can be used.
             For example:
             <code>
             int numElements = address.NumElements;
             for (int i = 0; i &lt; numElements; ++i) {
             Element e = address.GetElement(i);
             System.Console.WriteLine(e.Name + " = " + e.GetValueAsString());
             }
             </code></para>
            
             <para>
             <b>Manipulating Elements</b></para>
             <para>
             Elements are also used to submit input for API services (e.g., preparing a
             reference data request). Just as when accessing element values, there are
             two types of manipulators used to set elements. To set the value of simple
             elements, and arrays of simple elements, the "SetValue", and "AppendValue"
             manipulator are used.  For example
            
             <code>
             Request request;
             ...
             Element securitiy = request.GetElement("security");
             security.SetValue("IBM UN Equity");
            
             Element fields = request.GetElement("fields");
             fields.AppendValue("DS003");
             fields.AppendValue("PX_LAST");
             </code>
            
             To directly set named sub-elements, use the "SetElement" manipulator:
             </para>
             <para>
             request.SetElement("security", "IBM UN Equity");
             </para>
             <para>
             Methods which specify a Element name come in two forms. One which takes a
             <see cref="P:Bloomberglp.Blpapi.Element.Name">Name</see> as a parameter and one which takes a String. The form which
             takes Name is more efficient. However, it requires the Name to have been
             created in the global name table.</para>
             <para>
             <B>Type Conversions</B> </para>
             <para>
             The API will convert data types as long as there is no loss of precision
             involved. So<br/>
             - A BOOL can be returned as bool, char, Int32, Int64, Float32, Float64,
               String (the string will be "true" or "false")<br/>
            
             - A BOOL can be set from bool, String (if it has a value of "y", "n", "yes",
               "no", "true" or "false")<br/>
            
             - A CHAR can be returned as char, Int32, Int64, Float32, Float64, String<br/>
            
             - A CHAR can be set from char<br/>
            
             - An INT32 can be returned as Int32, Int64, Float64, String<br/>
            
             - An INT32 can be set from char, Int32<br/>
            
             - An INT64 can be returned as Int64, String<br/>
            
             - An INT64 can be set from char, Int32, Int64<br/>
            
             - A FLOAT32 can be returned as Float32, Float64, String<br/>
            
             - A FLOAT32 can be set from char, Float32<br/>
            
             - A FLOAT64 can be returned as Float64, String<br/>
            
             - A FLOAT64 can be set from char, Float32, Float64<br/>
             </para>
             </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.Name">
            <summary> Gets the name of this element.
            </summary>
            <remarks>
            If this Element is part of a sequence or choice Element then this
            returns the Name of this Element within the sequence or choice Element
            that owns it. If this Element is not part of a sequence Element (that is
            it is an entire Request or Message) then the Name of the Request or
            Message is returned.
            </remarks>
            <value>The name of this Element.
            </value>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.Datatype">
            <summary> Gets the Datatype of this Element.
            </summary>
            <remarks>
            Equivalent to calling <c>TypeDefinition.DataType</c>.
            </remarks>
            <returns>The Datatype of this Element.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.IsArray">
             <summary> Gets <c>true</c> if this element is an array.
             </summary>
            
             <returns><c>true</c> if this.ElementDefinition.maxValues() > 1 or
             if this.ElementDefinition.maxValues() == <see cref="F:Bloomberglp.Blpapi.SchemaElementDefinition.UNBOUNDED">
                 SchemaElementDefinition.UNBOUNDED</see>.
             </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.IsComplexType">
             <summary> Gets <c>true</c> if this element is a complex type.
             </summary>
             <remarks>
             Gets true if <see cref="P:Bloomberglp.Blpapi.Element.Datatype">this.Datatype</see> ==
             <see cref="F:Bloomberglp.Blpapi.Schema.Datatype.SEQUENCE">Schema.Datatype.SEQUENCE}</see>.
             </remarks>
            
             <returns><c>true</c> if this element is a complex type <c>false</c> otherwise.
             </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.IsReadOnly">
            <summary> Gets <c>true</c> if this element can not be modified.
            </summary>
            <remarks>
            Please note that calling setters on a readonly element will cause an
            System.NotSupportedException to be thrown.
            </remarks>
            <value> <c>true</c> if this element is a read only element.
            </value>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.ElementDefinition">
             <summary> Gets a reference to the read-only element definition object that
             defines the properties of this elements value.
             </summary>
            
             <value>The SchemaElementDefinition of this element.
             </value>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.TypeDefinition">
             <summary> Gets the <c>SchemaTypeDefinition</c> for this element.
             </summary>
             <remarks>
             This is equivalent to calling <c>ElementDefinition.TypeDefinition</c>.
             </remarks>
            
             <returns>The SchemaTypeDefinition for this type.
             </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.NumValues">
             <summary> Gets the number of values this element contains.
             </summary>
             <remarks>
             The return value from this function is always >= 0. For scalar elements
             this function returns 1 or 0. For arrays this function returns the
             actual number of values in the array.
             </remarks>
            
             <value>The number of values this element contains.
             </value>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.NumElements">
             <summary> Gets the number of elements this element contains.
             </summary>
             <remarks>
             Elements for which <see name="IsComplexType">IsComplexType</see>
             is <c>false</c> always return 0. Choice elements always return 1.
             Sequence elements return the actual number of elements they contain.
             </remarks>
            
             <value>The number of elements this element contains.
             </value>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.IsNull">
             <summary> Gets <c>true</c> if this element is null (has no values).
             </summary>
             <remarks>
             For arrays this always returns false else
             this is the same as testing <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </remarks>
            
             <value><c>true</c> if this element is null; <c>false</c> otherwise.
             </value>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.ValueIsNull(System.Int32)">
             <summary> Gets <c>true</c> if the element at the specified position in a sequence or
             choice element is null.
             </summary>
            
             <param name="position">Identifies the position of the element that is being
             tested.
             </param>
             <value><c>true</c> if the element at the specified position is null.
             </value>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              position >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.IsNullValue(System.Int32)">
             <summary> Gets <c>true</c> if the sub-element at the specified position in a sequence or
             choice element is null.
             </summary>
            
             <param name="position">Identifies the position of the sub-element that is being
             tested.
             </param>
             <value><c>true</c> if the element at the specified position is null.
             </value>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              position >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.IsEqualTo(Bloomberglp.Blpapi.Constant)">
            <summary> Gets true if the value this element is equal to the specified constant.
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.IsEqualTo(Bloomberglp.Blpapi.Constant,System.Int32)">
            <summary> Gets true if the value at the specified index of this element is equal
             to the specified constant.
             </summary>
             <param name="constant">The Constant which is being compared</param>
             <param name="index"> The Index of the value in this element that the constant is
                    being compared to.</param>
             <exception cref="T:System.IndexOutOfRangeException">index >=
             <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.FindConstant(Bloomberglp.Blpapi.ConstantsList)">
            <summary> Finds the constant in a ConstantList that is equal to the value of
             this element.
             </summary>
             <exception cref="T:System.IndexOutOfRangeException">
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             </exception>
             [Obsolete("don't use")]
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.FindConstant(Bloomberglp.Blpapi.ConstantsList,System.Int32)">
            <summary> Gets the constant in a ConstantList that is equal to the value at the specified index of
             this element.
             </summary>
             <exception cref="T:System.IndexOutOfRangeException">
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             </exception>
             [Obsolete("don't use")]
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsElement">
             <summary>
              Returns the value of this element as an Element.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsElement(System.Int32)">GetValueAsElement(0)</see>.
             </remarks>
            
             <returns>The value of this element as an Element.
             </returns>
             <exception cref="T:System.IndexOutOfRangeException">
             <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to an Element.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsElement(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsElement(System.Int32)">
             <summary> Returns the value at the specified index
             in this element as an Element.
             </summary>
             <remarks>
             Applicable only for an array of Sequence or Choice elements.
             </remarks>
            
             <param name="index">Index of the Element that is requested.
             </param>
             <returns>The value at the specified index in this element as an Element.
             </returns>
             <exception cref="T:System.IndexOutOfRangeException">
             The specified index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             This element is not an array of Sequence or Choice elements.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValue">
             <summary> Returns the value of this element as an object.
             </summary>
             <remarks>Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetValue(System.Int32)">GetValue(0)</see>.
             </remarks>
            
             <returns>The value of this element as an object.
             </returns>
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsBool(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValue(System.Int32)">
             <summary> Returns the value of the element
             at the specified index as an object.
             </summary>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as an object.
             </returns>
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsBool">
             <summary> Returns the value of this element as a boolean.
             </summary>
             <remarks>Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsBool(System.Int32)">GetValueAsBool(0)</see>.
             </remarks>
            
             <returns>The value of this element as a boolean.
             </returns>
             <exception cref="T:System.IndexOutOfRangeException">
             <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a boolean.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsBool(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsBool(System.Int32)">
             <summary> Returns the value of the element
             at the specified index as a boolean.
             </summary>
              <remarks>
             If the datatype of the element at the specified index is not boolean,
             this method attempts to convert it to a boolean.
             </remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a boolean.
             </returns>
             <exception cref="T:System.IndexOutOfRangeException">
             index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a bool.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsChar">
             <summary> Returns the value of this element as a char.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsChar(System.Int32)">GetValueAsChar(0)</see>.
             </remarks>
            
             <returns>The value of this element as a char.
             </returns>
             <exception cref="T:System.IndexOutOfRangeException">
             <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a char.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsChar(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsChar(System.Int32)">
             <summary> Returns the value of this element at the specified index as a char.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not char,
             this method attempts to convert it to a char.
             </remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a char.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
             index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a char.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsInt32">
             <summary> Returns the value of this element as an int.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsInt32(System.Int32)">GetValueAsInt32(0)</see>.
             </remarks>
            
             <returns>The value of this element as an int.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
             <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to an int.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsInt32(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsInt32(System.Int32)">
             <summary> Returns the value of this element at the specified index as an int.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not <c>int</c>,
             this method attempts to convert it to an int.
             </remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as an int.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
             index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to an int.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsInt64">
             <summary> Returns the value of this element as a long.
             </summary>
             <remarks>
             Same as calling <c>GetValueAsInt64(0)</c>.
             </remarks>
            
             <returns>The value of this element as a long.
             </returns>
             <exception cref="T:System.IndexOutOfRangeException">
             <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a long.
             </exception>
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsInt64(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsInt64(System.Int32)">
             <summary> Returns the value of this element at the specified index as a long.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not long,
             this method attempts to convert it to a long.
             </remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a long.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
             index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a long.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsFloat64">
             <summary> Returns the value of this element as a double.
             </summary>
             <remarks>
             Same as calling <c>GetValueAsFloat64(0)</c>.
             </remarks>
            
             <returns>The value of this element as a double.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
             <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a double.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsFloat64(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsFloat64(System.Int32)">
             <summary> Returns the value of this element at the specified index as a double.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not double,
             this method attempts to convert it to a double.
             </remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a double.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a double.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsFloat32">
             <summary> Returns the value of this element as a float.
             </summary>
             <remarks>
             Same as calling GetValueAsFloat32(0)</remarks>.
             <returns>The value of this element as a float.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a float.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsFloat32(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsFloat32(System.Int32)">
             <summary> Returns the value of this element at the specified index as a float.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not float,
             this method attempts to convert it to a float.</remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a float.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a float.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsString">
             <summary> Returns the value of this element as a string.
             </summary>
             <remarks>
             Same as calling GetValueAsString(0).
             </remarks>
            
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a string.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsString(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsString(System.Int32)">
             <summary> Returns the value of this element at the specified index as a string.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not <c>string</c>,
             this method attempts to convert it to a string.
             </remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a string.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a string.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsBytes">
             <summary> Returns the value of this element as a byte array.
             </summary>
             <remarks>
             Same as calling GetValueAsBytes(0).
             </remarks>
            
             <returns>The value of this element as a byte array.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a byte array.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsBytes(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsBytes(System.Int32)">
             <summary> Returns the value of this element at the specified index as a byte array.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not byte array,
             this method attempts to convert it to a byte array.
             </remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a byte array.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a byte array.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsDatetime">
             <summary> Returns the value of this element as a Datetime.
             </summary>
             <remarks>
             Same as calling <c>GetValueAsDatetime(0)</c>.
             </remarks>
            
             <returns>The value of this element as a Datetime.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a Datetime.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsDatetime(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsDatetime(System.Int32)">
             <summary> Returns the value of this element at the specified index as a Datetime.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not Datetime,
             this method attempts to convert it to a Datetime.
             </remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a Datetime.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a Datetime.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsDate">
             <summary> Returns the value of this element as a Date.
             </summary>
             <remarks>
             Same as calling <c>GetValueAsDate(0)</c>.
             </remarks>
            
             <returns>The value of this element as a Date.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a Date.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsDate(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsDate(System.Int32)">
             <summary> Returns the value of this element at the specified index as a Date.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not Date,
             this method attempts to convert it to a Date.</remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a Date.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a Date.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsTime">
             <summary> Returns the value of this element as a Time.
             </summary>
             <remarks>
             Same as calling GetValueAsTime(0)</remarks>.
            
             <returns>The value of this element as a Time.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to a Time.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsTime(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsTime(System.Int32)">
             <summary> Returns the value of this element at the specified index as a Time.
             </summary>
             <remarks>
             If the datatype of the element at the specified index is not Time,
             this method attempts to convert it to a Time.</remarks>
            
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as a Time.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to a Time.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsEnumeration">
             <summary> Returns the value of this element as a Enumeration constant.
             </summary>
             <remarks>
             Same as calling GetValueAsEnumeration(0)</remarks>.
            
             <returns>The value of this element as an Enumeration constant.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to an Enumeration constant.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsEnumeration(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsEnumeration(System.Int32)">
             <summary> Returns the value of this element at the specified index as an Enumeration
             constant.
             </summary>
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as an Enumeration
             constant.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to an Enumeration constant.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsName">
             <summary> Returns the value of this element as a Enumeration constant.
             </summary>
             <remarks>
             Same as calling GetValueAsEnumeration(0)</remarks>.
            
             <returns>The value of this element as an Enumeration constant.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see> == 0.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of this element cannot be converted to an Enumeration constant.
             </exception>
            
             <seealso cref="M:Bloomberglp.Blpapi.Element.GetValueAsEnumeration(System.Int32)">
             </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetValueAsName(System.Int32)">
             <summary> Returns the value of this element at the specified index as an Enumeration
             constant.
             </summary>
             <param name="index">The index of the element whose value is requested.
             </param>
             <returns>The value of the element at the specified index as an Enumeration
             constant.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">
              index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the element at the
             specified index cannot be converted to an Enumeration constant.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.HasElement(Bloomberglp.Blpapi.Name)">
            <summary> Returns <c>true</c> if this element contains an element with the specified name.
            </summary>
            <param name="name">The name of the element whose existence is being queried.
            </param>
            <returns><c>true</c> if an element with the specified name exists.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Called on non-sequence.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.HasElement(Bloomberglp.Blpapi.Name,System.Boolean)">
            <summary> Returns <c>true</c> if this element contains an element with the specified name.
            </summary>
            <param name="name">The name of the element whose existence is being queried.
            </param>
            <param name="excludeNullElements">specifies if null elements are to
            be excluded, while checking for presence of the Element specified by
            the name parameter
            </param>
            <returns><c>true</c> if an element with the specified name exists.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Called on non-sequence.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.HasElement(System.String)">
            <summary> Returns <c>true</c> if this element contains an element with the specified name.
            </summary>
            <param name="name">The name of the element whose existence is being queried.
            </param>
            <returns><c>true</c> if an element with the specified name exists.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Called on non-sequence.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.HasElement(System.String,System.Boolean)">
            <summary> Returns <c>true</c> if this element contains an element with the specified name.
            </summary>
            <param name="name">The name of the element whose existence is being queried.
            </param>
            <param name="excludeNullElements">specifies if null elements are to
            be excluded while checking for presence of the Element specified by
            the name parameter
            </param>
            <returns><c>true</c> if an element with the specified name exists.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Called on non-sequence.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElement(System.Int32)">
             <summary> Returns the sub-element at the specified zero based position.
             </summary>
             <remarks>
             The position is the zero based position of all sub-elements that are
             currently present in this element.</remarks>
            
             <param name="position">
             Zero-based position.
             </param>
             <returns>The element at the specified zero based position.
             </returns>
            
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              <c>position >= NumElements</c>.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">
             <summary> Returns the named sub-element, creating it if it doesn't exist and this
             element is modifiable.
             </summary>
             <remarks>
             This function looks up the named sub-element. If the name does not exist,
             then as a convenience this method creates the sub-element (if the element
             is modifiable) and returns the newly created sub-element.</remarks>
            
             <param name="name">The name of the required sub-element.
             </param>
             <returns>The named sub-element.
             </returns>
            
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             The named sub-element is not available.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-sequence.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">
             <summary> Returns the named sub-element, creating it if it doesn't
             exist and this element is modifiable.
             </summary>
             <remarks>
             This function looks up the named sub-element. If the
             name does not exist, then as a convenience this method creates the
             sub-element (if the element is modifiable) and returns the newly
             created sub-element.</remarks>
            
             <param name="name">The name of the required sub-element.
             </param>
             <returns>The named sub-element.
             </returns>
            
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             The named sub-element is not available.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-sequence.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsBool(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a boolean.
             </summary>
             <remarks>
             Same as calling  <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsBool">GetValueAsBool()</see>.</remarks>
            
             <returns>The value of the named sub-element as a boolean.
             </returns>
             <param name="name">
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             The named sub-element is not available.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the named sub-element cannot be converted to a boolean.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsBool(System.String)">
             <summary> Returns the value of the named sub-element as a boolean.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsBool">GetValueAsBool()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a boolean.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             The named sub-element is not available.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the named sub-element cannot be converted to a boolean.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsChar(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a char.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsChar">GetValueAsChar()</see>.
             </remarks>
             <param name="name">The name of the required sub-element.
             </param>
             <returns>The value of the named sub-element as a char.
             </returns>
            
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a char.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsChar(System.String)">
             <summary> Returns the value of the named sub-element as a char.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsChar">GetValueAsChar()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a char.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a char.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsInt32(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as an int.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsInt32">GetValueAsInt32()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as an int.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to an int.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsInt32(System.String)">
             <summary> Returns the value of the named sub-element as an int.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsInt32">GetValueAsInt32()</see>.
             </remarks>
            
             <param name="name">The name of the required sub-element.
             </param>
             <returns>The value of the named sub-element as an int.
             </returns>
            
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to an int.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsInt64(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a long.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsInt64">GetValueAsInt64()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a long.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a long.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsInt64(System.String)">
             <summary> Returns the value of the named sub-element as a long.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsInt64">GetValueAsInt64()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a long.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a long.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsFloat64(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a double.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsFloat64">GetValueAsFloat64()</see>.
             </remarks>
             <param name="name">The name of the required sub-element.
             </param>
             <returns>The value of the named sub-element as a double.
             </returns>
            
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a double.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsFloat64(System.String)">
             <summary> Returns the value of the named sub-element as a double.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsFloat64">GetValueAsFloat64()</see>.
             </remarks>
             <param name="name">The name of the required sub-element.
             </param>
             <returns>The value of the named sub-element as a double.
             </returns>
            
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a double.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsFloat32(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a float.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsFloat32">GetValueAsFloat32()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a float.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a float.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsFloat32(System.String)">
             <summary> Returns the value of the named sub-element as a float.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsFloat32">GetValueAsFloat32()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a float.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a float.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsString(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a string.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsString">GetValueAsString()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a string.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a string.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsString(System.String)">
             <summary> Returns the value of the named sub-element as a string.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsString">GetValueAsString()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a string.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a string.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsBytes(Bloomberglp.Blpapi.Name)">
            <summary> Returns the value of the named sub-element as a byte array.
            </summary>
            <param name="name"></param>
            <returns>The value of the named sub-element as a byte[].
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             The named sub-element does not exist.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the named sub-element cannot be converted to a byte array.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Called on non-complex type.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsBytes(System.String)">
            <summary> Returns the value of the named sub-element as a byte array.
            </summary>
            <param name="name"></param>
            <returns>The value of the named sub-element as a byte[].
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             The named sub-element does not exist.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The value of the named sub-element cannot be converted to a byte array.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Called on non-complex type.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsDatetime(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a Datetime.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsDatetime">GetValueAsDatetime()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a Datetime.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a Datetime.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsDatetime(System.String)">
             <summary> Returns the value of the named sub-element as a Datetime.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsDatetime">GetValueAsDatetime()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a Datetime.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a Datetime.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsDate(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a Date.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsDate">GetValueAsDate()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a Date.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a Date.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsDate(System.String)">
             <summary> Returns the value of the named sub-element as a Date.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsDate">GetValueAsDate()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a Date.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a Date.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsTime(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a Time.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsTime">GetValueAsTime()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a Time.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a Time.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsTime(System.String)">
             <summary> Returns the value of the named sub-element as a Time.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsTime">GetValueAsTime()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a Time.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a Time.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsName(Bloomberglp.Blpapi.Name)">
             <summary> Returns the value of the named sub-element as a Name.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsName">GetValueAsName()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a Name.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a Name.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetElementAsName(System.String)">
             <summary> Returns the value of the named sub-element as a Name.
             </summary>
             <remarks>
             Same as calling <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetValueAsName">GetValueAsName()</see>.
             </remarks>
            
             <returns>The value of the named sub-element as a Name.
             </returns>
             <param name="name">The name of the required sub-element.
             </param>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
              The named sub-element does not exist.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
              The value of the named sub-element cannot be converted to a Name.
             </exception>
             <exception cref="T:System.NotSupportedException">
             Called on non-complex type.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.GetChoice">
            <summary> Returns the selected choice if this is a choice type.
            </summary>
            <returns> The selected choice element.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.ToString">
            <summary> Return the string representation of this object.
            </summary>
            <returns>The string representing this object</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.Clone">
            <summary> Clone this element.
            </summary>
            <returns>The clonned object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendElement">
            <summary> If this Element is an array of Sequence or Choice Elements, appends
            a default initialized element to this element and return the appended
            element.
            </summary>
            <returns>The newly appended element.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Called on an element that is
            not an array of Sequence or Choice or if the element is not modifiable.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(System.Boolean)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(System.Char)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(System.Int32)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(System.Int64)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(System.Double)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(System.Single)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Datetime)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Constant)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Name)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element's type is not an enumeration type, or the specified
            value does not refer to a constant in the enumeration type of this
            element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(System.String)">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.AppendValue(System.Byte[])">
            <summary>Appends the specified value to this array element.
            </summary>
            <param name="value">The appended value.
            </param>
            <exception cref="T:System.NotSupportedException">
            Called on a non-array or the elment is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified value cannot be converted to data type of the array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Boolean)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Boolean)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Char)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Char)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Int32)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Int32)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Int64)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Int64)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Double)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Double)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Single)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Single)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Datetime)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,Bloomberglp.Blpapi.Datetime)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Constant)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,Bloomberglp.Blpapi.Constant)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Name)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The named sub-element's type is not an enumeration type, or
            value does not refer to a constant in the enumeration type
            of the named sub-element.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,Bloomberglp.Blpapi.Name)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The named sub-element's type is not an enumeration type, or
            value does not refer to a constant in the enumeration type
            of the named sub-element.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.String)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.String)">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Byte[])">
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Byte[])">
            <summary>Sets the named sub-element to the specified value.
            </summary>
            <param name="name">The Name of the sub-element to set.
            </param>
            <param name="value">The value to set to.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The element specified by name
            cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This element is not a sequence or choice
            or if this element is read-only.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetChoice(Bloomberglp.Blpapi.Name)">
            <summary>Sets the named sub-element as the choice's selection.
            </summary>
            <remarks>Note that if this choice element already contains a selection it is
            discarded and the choice's selection is set to the named sub-element.
            </remarks>
            <param name="name">The name of the sub-element to set the choice to.
            </param>
            <returns>The reference to the specified selection.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This element is not a choice or this element is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetChoice(System.String)">
            <summary>Sets the named sub-element as the choice's selection.
            </summary>
            <remarks>Note that if this choice element already contains a selection it is
            discarded and the choice's selection is set to the named sub-element.
            </remarks>
            <param name="name">The name of the sub-element to set the choice to.
            </param>
            <returns>The reference to the specified selection.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This element is not a choice or this element is read-only.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The named sub-element cannot be found.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Boolean)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Boolean,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Boolean,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Char)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Char,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Char,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Int64)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Int64,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Double)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Double,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Single)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Single,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(Bloomberglp.Blpapi.Datetime)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(Bloomberglp.Blpapi.Datetime,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(Bloomberglp.Blpapi.Constant)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="constant">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(Bloomberglp.Blpapi.Constant,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="constant">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(Bloomberglp.Blpapi.Name)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="constant">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             This element's type is not an enumeration type, or constant
             does not refer to a constant in the enumeration type of this
             element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(Bloomberglp.Blpapi.Name,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="constant">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             This element's type is not an enumeration type, or constant
             does not refer to a constant in the enumeration type of this
             element.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.String)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Int32,System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.String,System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Byte[])">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <remarks>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Element.SetValue(System.Byte[],System.Int32)">SetValue(value,0)</see>.
            </remarks>
            <param name="value">The value for this element.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            This element cannot be initialized with the specified value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.SetValue(System.Byte[],System.Int32)">
            <summary>Sets the value of this element to the specified value.
            </summary>
            <param name="value">The value for this element.
            </param>
            <param name="index">For a non-array, <c>index</c> can only be 0.
            For an array, <c>index</c> is in the range of the array.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
             The element at the specified index
             cannot be initialized with the specified value.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Element.NumValues">NumValues</see>
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.Elements">
            <summary>
             Gets an enumerable collection of all sub-elements.
            </summary>
            <returns>
            An enumerabale collection of sub-elements.
            </returns>]
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.Item(Bloomberglp.Blpapi.Name)">
            <summary>
            This is the same as <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
            </summary>
            <remarks> Read only.
            </remarks>
            <param name="name">A sub-element name.</param>
            <value>An Element.</value>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.Item(System.String)">
            <summary>
            This is the same as <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
            </summary>
            <remarks> Read only.
            </remarks>
            <param name="name">A sub-element name.</param>
            <returns>The value as object.</returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.Item(System.Int32)">
            <summary>
            This is the same as <see cref="M:Bloomberglp.Blpapi.Element.GetValue(System.Int32)">GetValue(index)</see>.
            </summary>
            <remarks> Read only.
            </remarks>
            <param name="index">An index for the values of this element.</param>
            <returns>The value as object.</returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.Item(Bloomberglp.Blpapi.Name,System.Int32)">
            <summary>
            This is the same as <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetValue(System.Int32)">GetValue(index)</see>.
            </summary>
            <remarks> Read only.
            </remarks>
            <param name="name">Sub-element name.</param>
            <param name="index">An index for the values of the specified sub-element.</param>
            <returns>The value as object.</returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Element.Item(System.String,System.Int32)">
            <summary>
            This is the same as <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetValue(System.Int32)">GetValue(index)</see>.
            </summary>
            <remarks> Read only.
            </remarks>
            <param name="name">Sub-element name.</param>
            <param name="index">An index for the values of the specified sub-element.</param>
            <returns>The value as object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.Print(System.IO.Stream)">
            <summary>
             Prints the contents of this element to the specified Stream.
            </summary>
            <param name="output">Output stream</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Element.Print(System.IO.TextWriter)">
            <summary>
            Prints the contents of this element to the specified TextWriter.
            </summary>
            <param name="writer">Output TextWriter</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Event">
             <summary>
             All data resulting from subscriptions or requests and administrative
             messages are delivered as Events.
             </summary>
             <remarks>
             Event objects are created by the API and passed to the application either
             through a registered <see cref="T:Bloomberglp.Blpapi.EventHandler">EventHandler</see>
             or an <see cref="T:Bloomberglp.Blpapi.IEventQueue">IEventQueue</see> or
             returned from the <see cref="M:Bloomberglp.Blpapi.AbstractSession.NextEvent">Session.NextEvent()</see>
             method. Event objects contain <see cref="T:Bloomberglp.Blpapi.Message">Message</see>
             objects which can be accessed using <see cref="M:Bloomberglp.Blpapi.Event.GetMessages">
             Event.GetMessages()</see>. The Event object is a handle to an event. The event
             is the basic unit of work provided to applications. Each Event object
             consists of an <see cref="T:Bloomberglp.Blpapi.Event.EventType">Event.EventType</see>
             attribute and zero or more Message objects.
             </remarks>
             <threadsafety static="true" instance="true"/>
            
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Event.EventType">
            <summary>
            Enumeration of the type of events that can be delivered from Bloomberg
            services.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.ADMIN">
            <summary>
            Administrative events from Bloomberg Services.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS">
            <summary>
            Changes in the state of the Session, such as Session successfully
            started or Session is terminated.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS">
            <summary>
            Changes in state of a pending/active subscription request.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.REQUEST_STATUS">
            <summary>
            Changes in the state of a pending non-subscription request.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">
            <summary>
            Changes to the status of an active open service request.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE">
            <summary>
            Final response received for a pending non-subscription request. Once
            this event is delivered the Request is considered to be complete.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.PARTIAL_RESPONSE">
            <summary>
            Non-final response received for a pending non-subscription request.
            The request is still pending after this event is received and is not
            considered to be complete until a RESPONSE event is delivered.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_DATA">
            <summary>
            Streaming subscription data delivered for active Subscription
            requests.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT">
            <summary>
            This Event indicates a user specified timeout interval has expired
            before any event was received.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.AUTHORIZATION_STATUS">
            <summary>
            Changes to the state of an active authorization, like entitlement
            changes.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">
            <summary>
            switchable constant for {@link EventType#RESOLUTION_STATUS}
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">
            <summary>
            switchable constant for {@link EventType#TOPIC_STATUS}
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.TOKEN_STATUS">
            <summary>
            switchable constant for {@link EventType#TOKEN_STATUS}
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Event.EventType.REQUEST">
            <summary>
            switchable constant for {@link EventType#REQUEST}
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Event.Type">
            <summary>Gets the type of the messages in this Event.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             Illegal state.
             </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Event.IsValid">
            <summary>
            Gets <c>true</c> if this event is valid; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Event.GetMessages">
            <summary>
             Creates an enumerable collection of all messages in this event.
            </summary>
            <returns>
            An enumerabale collection of <c>Message</c>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Event.GetEnumerator">
            <summary> Return an enumerator over the messages contained in this event.
            </summary>
            <returns>The message enumerator.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.EventDispatcher">
             <summary> Dispatches events from one or more sessions through callbacks.
             </summary>
             <remarks> EventDispatcher objects are optionally specified when
             <see cref="T:Bloomberglp.Blpapi.Session">Session</see> objects are constructed. A single EventDispatcher can be
             shared by multiple Session objects. The EventDispatcher provides an
             event-driven interface, generating callbacks from one or more internal
             threads for one or more sessions.
             </remarks>
             <threadsafety static="true" instance="true"/>
            
             <author>  Siva Somu (ssomu)
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.EventDispatcher.StopOption">
            <summary> Enumerations for controlled shutdown of the EventDispatcher.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventDispatcher.StopOption.ToString">
            <summary> Return the string representation of this object.
            </summary>
            <returns>The string representing this object.</returns>
        </member>
        <member name="F:Bloomberglp.Blpapi.EventDispatcher.StopOption.SYNC">
            <summary> Stops the <see cref="T:Bloomberglp.Blpapi.EventDispatcher">EventDispatcher</see> and doesn't return until no more
            events are being processed.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.EventDispatcher.StopOption.ASYNC">
            <summary> Stops the EventDispatcher and returns immediately.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventDispatcher.#ctor">
            <summary>
            Same as calling <see cref="M:Bloomberglp.Blpapi.EventDispatcher.#ctor(System.Int32)">
            EventDispatcher(0)</see>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventDispatcher.#ctor(System.Int32)">
            <summary>
            Creates an EventDispatcher with the specified number of dispatcher
            threads.
            </summary>
            <remarks>
            The specified number of threads is >= 1 then a pool of numThreads
            threads are created to dispatch events. The behavior is undefined if
            numThreads is zero.
            </remarks>
            <param name="numThreads">The number of dispatcher threads to create
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventDispatcher.#ctor(System.Int32,System.Int32)">
            <summary>Deprecated As of release 3.1.0.0 use
              <see cref = "T:Bloomberglp.Blpapi.SessionOptions">SessionOptions.setMaxEventQueueSize(int)</see>
              for setting the event queue size per session
            </summary>
            <param name="numThreads">
            </param>
            <param name="maxPendingEvents">
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventDispatcher.Start">
            <summary>Starts generating callbacks for events from Sessions associated with
             this EventDispatcher.
            </summary>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventDispatcher.Stop">
            <summary> Same as calling <see cref="M:Bloomberglp.Blpapi.EventDispatcher.Stop(Bloomberglp.Blpapi.EventDispatcher.StopOption)">Stop(StopOption)</see>
             with <see cref="F:Bloomberglp.Blpapi.EventDispatcher.StopOption.SYNC">StopOption.SYNC</see>.
            </summary>
             <exception cref="T:System.Threading.ThreadInterruptedException">
             The current thread is interrupted while it is waiting.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventDispatcher.Stop(Bloomberglp.Blpapi.EventDispatcher.StopOption)">
            <summary> Stops generating callbacks for events from sessions.
            </summary>
            <remarks> If the specified stopOption
             is <see cref="F:Bloomberglp.Blpapi.EventDispatcher.StopOption.SYNC">StopOption.SYNC</see>
             then this method blocks until all current callbacks which were dispatched
             through this EventDispatcher have completed. If the stopOption is
             <see cref="F:Bloomberglp.Blpapi.EventDispatcher.StopOption.ASYNC">StopOption.ASYNC</see>
             then this method returns immediately and no
             further callbacks will be dispatched.
            </remarks>
            <param name="stopOption"></param>
             <exception cref="T:System.Threading.ThreadInterruptedException">
             The current thread is interrupted while it is waiting.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventDispatcher.DispatcherThread">
            <summary> Adds a event dispatcher thread to this EventDispatcher.
            </summary>
            <remarks> <para>
            By calling this method applications provide a thread to the
            EventDispatcher for it to use to dispatch events. This call will not
            return until the EventDispatcher stops dispatching events. The
            application can call this method multiple times for the same instance
            of an EventDispatcher to provide a pool of threads.</para>
            <para>
            dispatcherThread() can be called at any time either before or after
            start() has been called on the EventDispatcher but events will only be
            dispatched after start() has been called.</para>
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.EventDispatcher.NumActiveThreads">
            <summary> Gets the number of active threads dispatching events in this
            EventDispatcher.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.EventFormatter">
            <summary>
            EventFormatter is used to format publisher events or responses to
            certain ProviderSession requests.
            </summary>
            <remarks>
            <p>
            An EventFormatter is created either from an
            <see cref="T:Bloomberglp.Blpapi.Event">Event</see> obtained from
            <see cref="M:Bloomberglp.Blpapi.Service.CreatePublishEvent">Service.CreatePublishEvent()
            </see> or from
            <see cref="M:Bloomberglp.Blpapi.Service.CreateResponseEvent(Bloomberglp.Blpapi.CorrelationID)">
            Service.CreateResponseEvent()</see>.
            Once one or more Messages have been appended to the Event using the
            EventFormatter the Event can be published using
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.Publish(Bloomberglp.Blpapi.Event)">
            ProviderSession.Publish(Event)</see>} or sent back as a response using
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.SendResponse(Bloomberglp.Blpapi.Event)">
            ProviderSession.SendResponse(Event)</see>.
            </p>
            <p>
            EventFormatter objects cannot be copied or assigned so as to ensure
            there is no ambiguity about what happens if two EventFormatters are
            both formatting the same Event.
            </p>
            <p>
            The EventFormatter supports write once only to each field. It is an
            error to call SetElement() or PushElement() for the same name more than
            once at a particular level of the schema when creating a message.
            </p>
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.#ctor(Bloomberglp.Blpapi.Event)">
            <summary>
            Creates an instance of <see cref="T:Bloomberglp.Blpapi.EventFormatter">
            EventFormatter</see> to create messages in the specified event.
            The behavior is undefined if the specified event already has
            another <see cref="T:Bloomberglp.Blpapi.EventFormatter">EventFormatter</see> attached.
            </summary>
            <param name="eventObj">the event to be formatted</param>
            <exception cref="T:System.ArgumentException">
            The specified event is not valid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendMessage(System.String,Bloomberglp.Blpapi.Topic)">
            <summary>
            Appends a (empty) message of the specified 'messageType' that will
            be published under the specified 'topic' to the event referenced
            by this <see cref="T:Bloomberglp.Blpapi.EventFormatter">EventFormatter</see>. After a
            message has been appended its elements can be set using the various
            'SetElement' methods.
            </summary>
            <param name="messageType">the name of the message type that needs
            to be added</param>
            <param name="topic">the corresponding topic</param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The specified 'messageType' is not found in the publish schema.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is not empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified event is not a publish event.
            The specified topic is not valid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendMessage(System.String,Bloomberglp.Blpapi.Topic,System.Nullable{System.Int32})">
            <summary>
            Appends a (empty) message of the specified 'messageType' that will
            be published under the specified 'topic' with the specified
            'sequenceNumber' to the event referenced by
            this <see cref="T:Bloomberglp.Blpapi.EventFormatter">EventFormatter</see>. After a
            message has been appended its elements can be set using the various
            'SetElement' methods. The behavior is undefined unless the
            'sequenceNumber' is greater (unless the value wrapped) than the
            last value used in any previous message on this 'topic'.
            </summary>
            <param name="messageType">the name of the message type that needs
            to be added</param>
            <param name="topic">the corresponding topic</param>
            <param name="sequenceNumber">the sequence number for this message
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The specified 'messageType' is not found in the publish schema.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is not empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified event is not a publish event.
            The specified topic is not valid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendMessage(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Topic)">
            <summary>
            Appends a (empty) message of the specified 'messageType' that will
            be published under the specified 'topic' to the event referenced by
            this <see cref="T:Bloomberglp.Blpapi.EventFormatter">EventFormatter</see>. After a
            message has been appended its elements can be set using the various
            'SetElement' methods.
            </summary>
            <param name="messageType">the name of the message type that needs
            to be added</param>
            <param name="topic">the corresponding topic</param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The specified 'messageType' is not found in the publish schema.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is not empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified event is not a publish event.
            The specified topic is not valid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendMessage(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Topic,System.Nullable{System.Int32})">
            <summary>
            Appends a (empty) message of the specified 'messageType' that will
            be published under the specified 'topic' with the specified
            'sequenceNumber' to the event referenced by
            this <see cref="T:Bloomberglp.Blpapi.EventFormatter">EventFormatter</see>. After a
            message has been appended its elements can be set using the various
            'SetElement' methods. The behavior is undefined unless the
            'sequenceNumber' is greater (unless the value wrapped) than the
            last value used in any previous message on this 'topic'.
            </summary>
            <param name="messageType">the name of the message type that needs
            to be added</param>
            <param name="topic">the corresponding topic</param>
            <param name="sequenceNumber">the sequence number for this message
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The specified 'messageType' is not found in the publish schema.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is not empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified event is not a publish event.
            The specified topic is not valid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendRecapMessage(Bloomberglp.Blpapi.Topic,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Appends a (empty) recap message that will be published under the
            specified 'topic' to the event referenced by this
            <see cref="T:Bloomberglp.Blpapi.EventFormatter">EventFormatter</see>. Specifies
            the optional 'cid' if this recap message is added in response to a
            'TopicRecap' message. After a message has been appended its
            elements can be set using the various 'SetElement' methods. It is
            an error to create append a recap message to an admin event.
            </summary>
            <param name="topic">the corresponding topic</param>
            <param name="cid">the correlationId of the 'TopicRecap' message if
            responding to a recap request or null if this is a recap message
            for all subscribers</param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            There is no recap message in service.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is not empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified event is not a publish event.
            The specified topic is not valid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendRecapMessage(Bloomberglp.Blpapi.Topic,System.Nullable{System.Int32},Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Appends a (empty) recap message that will be published under the
            specified 'topic' to the event referenced by this
            <see cref="T:Bloomberglp.Blpapi.EventFormatter">EventFormatter</see>. Specifies
            the optional 'cid' if this recap message is added in response to a
            'TopicRecap' message. After a message has been appended its
            elements can be set using the various 'SetElement' methods. It is
            an error to create append a recap message to an admin event. The
            behavior is undefined unless the 'sequenceNumber' is greater
            (unless the value wrapped) than the last value used in any previous
            message on this 'topic'.
            </summary>
            <param name="topic">the corresponding topic</param>
            <param name="sequenceNumber">the sequence number for this message
            </param>
            <param name="cid">the correlationId of the 'TopicRecap' message if
            responding to a recap request or null if this is a recap message
            for all subscribers</param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            There is no recap message in service.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is not empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified event is not a publish event.
            The specified topic is not valid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendResponse(System.String)">
            <summary>
            Append an (empty) response message that will be sent
            in response to the previously received operation request.
            <para>
            After a message for this operation has been appended, its elements
            can be set using the various <c>SetElement</c> methods.
            </para>
            <para>
            Only one response can be appended to an <see cref="T:Bloomberglp.Blpapi.Event" />.
            The behavior is undefined unless the <see cref="T:Bloomberglp.Blpapi.Event" /> is
            currently empty.
            </para>
            <para>
            Note that using <see cref="T:Bloomberglp.Blpapi.Name" /> overloads is preferable, as
            the <see cref="T:Bloomberglp.Blpapi.Name" /> objects have better performance if they are
            re-used after being created.
            </para>
            </summary>
            <param name="operationName">
            Name of the operation whose response type is to be used
            (e.g. "ReferenceDataRequest"). For "PermissionRequest"
            messages, use "PermissionResponse".
            </param>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            Thrown when <paramref name="operationName"/> is not found in the
            publish schema.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the operating stack is not empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified <see cref="T:Bloomberglp.Blpapi.Event" /> is not a
            response <see cref="T:Bloomberglp.Blpapi.Event" />
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendResponse(Bloomberglp.Blpapi.Name)">
            <summary>
            Append an (empty) response message that will be sent
            in response to the previously received operation request.
            <para>
            After a message for this operation has been appended, its elements
            can be set using the various <c>SetElement</c> methods.
            </para>
            <para>
            Only one response can be appended to an <see cref="T:Bloomberglp.Blpapi.Event" />.
            The behavior is undefined unless the <see cref="T:Bloomberglp.Blpapi.Event" /> is
            currently empty.
            </para>
            </summary>
            <param name="operationName">
            Name of the operation whose response type is to be used
            (e.g. "ReferenceDataRequest"). For "PermissionRequest"
            messages, use "PermissionResponse".
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the operating stack is not empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified <see cref="T:Bloomberglp.Blpapi.Event" /> is not a
            response <see cref="T:Bloomberglp.Blpapi.Event" />.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(System.Boolean)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'bool'.
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(System.Char)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'char'
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(System.Int32)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'int'.
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(System.Int64)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'long'
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(System.Single)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'float'.
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(System.Double)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'double'.
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(Bloomberglp.Blpapi.Datetime)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'Datetime'.
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(System.String)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'String'
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendValue(Bloomberglp.Blpapi.Name)">
            <summary>
            Appends the specified 'value' to the element which represents an
            array of 'Name'.
            </summary>
            <param name="value">the value to be added</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.AppendElement">
            <summary>
            Append an empty complex element of the appropriate type to the
            element which represents an array of 'Element' type.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            Cannot convert the current element in the stack to the specified
            value type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.PushElement(System.String)">
            <summary>
            Changes the level at which this formatter is operating to the
            specified element 'name'. After this returns the context of this
            formatter is set to the element 'name' in the schema and subsequent
            calls to 'SetElement' or 'PushElement' are applied at that level.
            If 'name' represents an array of scalars then 'AppendValue' must be
            used to add values. If 'name' represents an array of complex types
            then 'AppendElement()' creates the first entry and set the context
            of the formatter to that element. Calling 'AppendElement()' again
            will create another entry.
            </summary>
            <param name="name">the name of the field that needs to be added
            </param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The current element in the stack does not contain the specified
            message type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.PushElement(Bloomberglp.Blpapi.Name)">
            <summary>
            Changes the level at which this formatter is operating to the
            specified element 'name'. After this returns the context of this
            formatter is set to the element 'name' in the schema and subsequent
            calls to 'SetElement' or 'PushElement' are applied at that level.
            If 'name' represents an array of scalars then 'AppendValue' must be
            used to add values. If 'name' represents an array of complex types
            then 'AppendElement()' creates the first entry and set the context
            of the formatter to that element. Calling 'AppendElement()' again
            will create another entry.
            </summary>
            <param name="name">the name of the field that needs to be added
            </param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The current element in the stack does not contain the specified
            message type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.PopElement">
            <summary>
            Returns this formatter's context back to the location where it was
            before the most recent call to 'PushElement' or 'AppendElement()'.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,System.String)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'. The behavior of this function is
            undefined if 'value' is 'null'. Note that this function is not
            intended for publication of null values; uses
            <see cref="M:Bloomberglp.Blpapi.EventFormatter.SetElementNull(System.String)"/> instead.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema
            for the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,System.String)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'. The behavior of this function is
            undefined if 'value' is 'null'. Note that this function is not
            intended for publication of null values; uses
            <see cref="M:Bloomberglp.Blpapi.EventFormatter.SetElementNull(Bloomberglp.Blpapi.Name)"/> instead.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema
            for the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,Bloomberglp.Blpapi.Name)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'. The behavior of this function is
            undefined if 'value' is 'null'. Note that this function is not
            intended for publication of null values; uses
            <see cref="M:Bloomberglp.Blpapi.EventFormatter.SetElementNull(System.String)"/> instead.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema
            for the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Name)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'. The behavior of this function is
            undefined if 'value' is 'null'. Note that this function is not
            intended for publication of null values; uses
            <see cref="M:Bloomberglp.Blpapi.EventFormatter.SetElementNull(Bloomberglp.Blpapi.Name)"/> instead.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema
            for the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,System.Boolean)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice, or
            the element identified by 'name' has already been set.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Boolean)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,System.Char)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Char)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice, or
            the element identified by 'name' has already been set.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,System.Int32)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Int32)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,System.Int64)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Int64)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,System.Single)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Single)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,System.Double)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Double)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(System.String,Bloomberglp.Blpapi.Datetime)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'. The behavior of this function is
            undefined if 'value' is 'null'. Note that this function is not
            intended for publication of null values; uses
            <see cref="M:Bloomberglp.Blpapi.EventFormatter.SetElementNull(System.String)"/> instead.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Datetime)">
            <summary>
            Sets the element with the specified 'name' within the current
            element to the specified 'value'. The behavior of this function is
            undefined if 'value' is 'null'. Note that this function is not
            intended for publication of null values; uses
            <see cref="M:Bloomberglp.Blpapi.EventFormatter.SetElementNull(System.String)"/> instead.
            </summary>
            <param name="name">The name of the subfield.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The schema does not identify a 'name' sub-element of the current
            sequence or choice element, or the element identified by 'name'
            has already been set.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            'value' cannot be converted to the type specified by the schema for
            the 'name' sub-element.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElementNull(System.String)">
            <summary>
            Creates a null element with the specified 'name'. Note that
            whether or not fields containing null values are published to
            subscribers is dependent upon details of the service and schema
            configuration.
            </summary>
            <param name="name">The name of the subfield to be nulled.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The current element in the stack does not contain the specified
            message type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified 'name' identifies a sub-element whose value cannot be
            set to 'null'
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventFormatter.SetElementNull(Bloomberglp.Blpapi.Name)">
            <summary>
            Creates a null element with the specified 'name'. Note that whether
            or not fields containing null values are published to subscribers
            is dependent upon details of the service and schema configuration.
            </summary>
            <param name="name">The name of the subfield to be nulled.</param>
            <exception cref="T:System.InvalidOperationException">
            The operating stack is empty.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The current element in the stack does not contain the specified
            message type.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current element in the stack.is not a sequence or choice.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The specified 'name' identifies a sub-element whose value cannot be
            set to 'null'.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.EventHandler">
            <summary> The delegate to receive Session Events.
             </summary>
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.EventQueue">
            <summary>
            Returns the number of definitions of events that can be published by
            this Service.
            </summary>
            <remarks>An Request can be associated with an EventQueue by passing a valid instance
            of the EventQueue class to the
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
            Session.SendRequest</see>
             and <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            Session.SendAuthorizationRequest(Request, UserHandle, EventQueue, CorrelationID, String)</see>
            sendAuthorizationRequest} methods. All responses to the Request are now
            delivered to this EventQueue allowing the application to block for Responses
            for the Request. Note that a single EventQueue can be used for receiving
            Response Events for many requests.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventQueue.#ctor">
            <summary>
            Constructs an empty event queue.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventQueue.NextEvent">
            <summary>
            Retrieves the next event available for processing on this EventQueue.
            </summary>
            <remarks>This method is the same as calling
                <see cref="M:Bloomberglp.Blpapi.EventQueue.NextEvent(System.Int64)">NextEvent(0)</see>.
            </remarks>
            <returns>Next event available on this session.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            The current thread is interrupted while it is waiting for an event.
            </exception>
            <seealso cref="M:Bloomberglp.Blpapi.EventQueue.NextEvent(System.Int64)"/>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventQueue.NextEvent(System.Int64)">
            <summary>
            Retrieves the next event available for processing on this EventQueue.
            </summary>
            <remarks>Retrieve the next event available for processing on this EventQueue.
            If no event is available immediately wait for <c>timeoutMillis</c>
            milliseconds for an event to arrive. If no event is received before the
            timeout expires return a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT">Event.EventType.TIMEOUT</see> event.
            If the timeout is specified as 0 then wait for an
            infinite amount of time for an event to be received.
            </remarks>
            <param name="timeoutMillis">
            A timeout in milliseconds to wait for an event to be
                                 available on the Session.
            </param>
            <returns> The next event available on this session if available before timeout
             or <see cref="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT">Event.EventType.TIMEOUT</see>
             event if timeout occurs.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            The current thread is interrupted while it is waiting for an event.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventQueue.TryNextEvent">
            <summary>
            Tries to retrieve the next event available for processing on this
            EventQueue.
            </summary>
            <remarks>
            This method never blocks.
            </remarks>
            <returns>next event available on this session if available or null
            if no event is available immediately
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.EventQueue.Purge">
            <summary>
            Purge all events from this Event Queue and cancel all Requests that this
            Event Queue is associated with.
            </summary>
            <remarks> Purges any Event objects in this EventQueue which have
            not been processed and cancel any pending requests linked
            to this EventQueue. The EventQueue
            can subsequently be re-used for a subsequent request.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.IAbstractSession">
            <summary>
            An abstract session for sharing methods between
            <see cref="T:Bloomberglp.Blpapi.ISession"/>and <see cref="T:Bloomberglp.Blpapi.IProviderSession"/>.
            <para>
            Sessions manage access to services either by requests and responses or
            subscriptions. A session can dispatch events and replies in either a
            synchronous or asynchronous mode. The mode of a session is determined when it
            is constructed and cannot be changed subsequently.
            </para>
            <para>
            A session must be started with <see cref="M:Bloomberglp.Blpapi.IAbstractSession.Start"/> or <see cref="M:Bloomberglp.Blpapi.IAbstractSession.StartAsync"/>
            before calling on any of its operations.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.Start">
            <summary>
            Issues a blocking call to start the session.
            <para>
            A <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS"/> event may be published
            containing a message with the result of the request. If the session was
            started successfully a "SessionStarted" message
            will be generated. If the start failed a "SessionStartupFailure"
            message may be generated.
            </para>
            <para>
            Note: If this is an asynchronous session then the
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS"/> event may be processed
            by the registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/> before this method has
            returned. If this session is using an external
            <see cref="T:Bloomberglp.Blpapi.EventDispatcher"/> it should be already started.
            </para>
            <para>
            A session must only be started once.
            </para>
            </summary>
            <returns>
            <c>true</c> if session started successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.StartAsync">
            <summary>
            Initiates a non blocking call to start the session.
            <para>
            On completion of this request a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS"/> event is published
            containing a message with the result of the request. If the
            session was started successfully a "SessionStarted" message will be
            generated. If the start failed a "SessionStartupFailure" message
            will be generated.
            </para>
            <para>
            Note: If this is an asynchronous session then the
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS"/> may be processed by
            the registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/> before this method has
            returned. If this session is using an external
            <see cref="T:Bloomberglp.Blpapi.EventDispatcher"/> it should be already started.
            </para>
            <para>
            A session must only be started once.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.Stop">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.Stop(Bloomberglp.Blpapi.AbstractSession.StopOption)"/>
            with <see cref="F:Bloomberglp.Blpapi.AbstractSession.StopOption.SYNC"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.Stop(Bloomberglp.Blpapi.AbstractSession.StopOption)">
            <summary>
            Stops this session.
            </summary>
            <para>
            If <paramref name="stopOption"/> is
            <see cref="F:Bloomberglp.Blpapi.AbstractSession.StopOption.SYNC"/>, then this call
            blocks until all events relating to this session which are
            currently being processed have returned from a application supplied
            <see cref="T:Bloomberglp.Blpapi.EventHandler"/> objects. Once this call returns no
            further callbacks to <see cref="T:Bloomberglp.Blpapi.EventHandler"/> objects will occur.
            If a synchronous <see cref="M:Bloomberglp.Blpapi.IAbstractSession.Stop(Bloomberglp.Blpapi.AbstractSession.StopOption)"/> is
            called from within an <see cref="T:Bloomberglp.Blpapi.EventHandler"/> callback, the
            behavior is undefined and may result in a deadlock.
            </para>
            <para>
            If <paramref name="stopOption"/> is
            <see cref="F:Bloomberglp.Blpapi.AbstractSession.StopOption.ASYNC"/> then the stop
            call returns immediately and events may still be processed in the
            user specified <see cref="T:Bloomberglp.Blpapi.EventHandler"/> objects.
            </para>
            <param name="stopOption">
            Indicates if this call should block and wait for this session to
            stop or return immediately.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.NextEvent">
            <summary>
            This is the same as <see cref="M:Bloomberglp.Blpapi.IAbstractSession.NextEvent(System.Int64)"/> with
            0 milliseconds.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.NextEvent(System.Int64)">
            <summary>
            Returns the next event available for processing on this session.
            <para>
            If no event is available immediately wait for
            <paramref name="timeoutMillis"/> milliseconds for an event to arrive.
            If no event is received before the timeout expires return a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT"/> event. If the
            timeout specified is 0 then wait for an infinite amount of time for an
            event to be received. Note that this function cannot be called on a
            session that is operating in "asynchronous" mode. That is a session that
            was constructed with an <see cref="T:Bloomberglp.Blpapi.EventHandler"/>.
            </para>
            An <see cref="T:Bloomberglp.Blpapi.EventHandler"/> must not have been provided at
            construction.
            </summary>
            <param name="timeoutMillis">
            Amount of time in milliseconds to wait before this method
            returns if no events are available.
            </param>
            <returns>
            The next event available on this session if available before timeout
            or <see cref="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT"/> event if timeout occurs.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.TryNextEvent">
            <summary>
            Retrieves the next event available for processing on this session.
            <para>
            This method never blocks.
            </para>
            An <see cref="T:Bloomberglp.Blpapi.EventHandler"/> must not have been provided at
            construction.
            </summary>
            <returns>
            The next event available on this session if available or null
            if no event is available immediately
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.OpenServiceAsync(System.String)">
            <summary>
            Issues an asynchronous request to open a service.
            </summary>
            <param name="uri">
            URI of the service that is to be opened.
            </param>
            <returns>
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> for this asynchronous request.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.OpenServiceAsync(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Initiates an asynchronous request to open a service.
            <para>
            Once the request has completed, a <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/>
            event will be generated indicating the result of the request.
            The <paramref name="correlationId"/> will be returned in generated message. It
            can also be used to cancel this request before it completes by calling
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID)"/>.
            </para>
            </summary>
            <param name="uri">
            URI of the service that is to be opened.
            <para>
            Must be a fully qualified service name. That is, it must be in
            the form of "//[namespace]/[service-name]".
            </para>
            </param>
            <param name="correlationId">
            A correlation Id for correlating this request.
            <para>
            Must not already be in use.
            </para>
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.OpenService(System.String)">
            <summary>
            Opens the service.
            </summary>
            <para>
            Note that this operation is a blocking operation which may require
            communication to server-side services. Execution may be be blocked
            for an undetermined amount of time. If blocking is not desired, then use
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.OpenServiceAsync(System.String,Bloomberglp.Blpapi.CorrelationID)"/> instead. Also
            note that if the service is already opened by this session,
            the request will succeed immediately.
            </para>
            Once the request has completed, a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> event will be generated
            indicating the result of the request. If this is an asynchronous session
            then this <see cref="T:Bloomberglp.Blpapi.Event"/> may be processed by the registered
            <see cref="T:Bloomberglp.Blpapi.EventHandler"/> before <see cref="M:Bloomberglp.Blpapi.IAbstractSession.OpenService(System.String)"/> has returned.
            <para>
            </para>
            <param name="uri">
            URI of the service that is to be opened.
            <para>
            Must be a fully qualified service name. That is, it must be in
            the form of "//[namespace]/[service-name]".
            </para>
            </param>
            <returns>
            This method returns <c>true</c> if the service was opened
            successfully <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.GetService(System.String)">
            <summary>
            Gets the <see cref="T:Bloomberglp.Blpapi.Service"/> object.
            </summary>
            <param name="uri">
            URI of the service that is to be opened.
            <para>
            The uri must be a fully qualified service name. That is, it must
            be in the form of "//[namespace]/[service-name]".
            </para>
            </param>
            <returns>
            A handle to the service if it is already open; null otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with a null <see cref="T:Bloomberglp.Blpapi.IEventQueue"/> and null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with a null <see cref="T:Bloomberglp.Blpapi.IEventQueue"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with a null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            Authorizes an identity.
            <para>
            This request can be used by applications to authorize users to receive
            data from services. If a user is successfully authorized all the
            entitlements for that user are cached locally. Once authorized the
            identity can be used to make subscriptions and requests as the user.
            </para>
            <para>
            If an <see cref="T:Bloomberglp.Blpapi.IEventQueue"/> is specified then all response events for this
            Authorization Request are published to this event queue. The user can
            block on this event queue for responses and can use this as a mechanism
            to convert this asynchronous request into a synchronous request.
            </para>
            <para>
            An <see cref="T:Bloomberglp.Blpapi.Event"/> will be published containing a message with
            the result of the authorization request.
            If the user was successfully authorized an "AuthorizationSuccess"
            message will be generated. If the user was not authorized an
            "AuthorizationFailure" message will be generated.
            </para>
            </summary>
            <param name="request">
            A filled in authorization request that needs to be sent to the
            authorization service.
            </param>
            <param name="identity">
            A handle to identify the user that is being authorized.
            <para>
            The <see cref="T:Bloomberglp.Blpapi.Identity"/> must have been created with this session
            and must not be the session identity.
            </para>
            </param>
            <param name="eventQueue">
            An event queue to be used to receive response events for this request.
            </param>
            <param name="correlationId">
            A correlator to be used for correlating the response to this request.
            <para>
            Must not already be in use.
            </para>
            </param>
            <param name="requestLabel">
            A label which will be recorded along with any diagnostics for this operation.
            </param>
            <returns>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that will identify
            <see cref="T:Bloomberglp.Blpapi.Message"/> objects generated as a result of this call.
            This will be <paramref name="correlationId"/> if it was provided.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Cancels an outstanding request or a subscription.
            </summary>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> which identifies a request or
            subscription.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            Cancels an outstanding request or a subscription.
            </summary>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> which identifies a request or
            subscription.
            </param>
            <param name="requestLabel">
            A label which will be recorded along with any diagnostics for this operation.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.Cancel(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID})">
            <summary>
            This is the same as calling <see cref="M:Bloomberglp.Blpapi.IAbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with a null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.Cancel(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.String)">
            <summary>
            Cancels outstanding requests or subscriptions.
            <para>
            Cancels a previous request or subscription for asynchronous topic updates
            associated with each <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> in <paramref name="correlators"/>.
            Upon return, no further message will be generated for those requests or
            subscriptions.
            </para>
            <para>
            For asynchronous sessions, a handler may still be processing an
            existing message for the associated request or subscription after the
            call returns. While iterating over an event, if any message is
            encountered for a cancelled <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>, it will be silently
            ignored, but if the message was iterated to just prior to the completion
            of the cancel request it will be delivered, it is up to the application
            developer to handle this condition.
            </para>
            <para>
            If any of the specified CorrelationIds do not refer to an "active"
            request or Subscription then, that particular <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>
            will be ignored.
            </para>
            <para>
            Once this call returns, the specified <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> can be
            reused for new requests to this session. Also note that application
            developers should generally be cautious not to reuse a <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>
            until all existing references within their applications have been cleared.
            Depending on the use of the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>, this can
            possibly result in accessing application resources which are no longer
            available.
            </para>
            </summary>
            <param name="correlators">
            A list of <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> which identify a request or
            a subscription.
            </param>
            <param name="requestLabel">
            A label which will be recorded along with any diagnostics for this operation.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.CreateIdentity">
            <summary>
            Creates a new <see cref="T:Bloomberglp.Blpapi.Identity"/> which is valid but has not
            been authorized.
            <para>
            Create a handle to represent a user of services. For using services with
            the specific user's credentials the identity should be authorized with
            the corresponding authorization service.
            </para>
            </summary>
            <returns>
            An <see cref="T:Bloomberglp.Blpapi.Identity"/> for a user to use in authorizations and
            sending requests and subscriptions.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.GenerateToken(System.String,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.IEventQueue)">
            <summary>
            Generate a token to be used for authorization.
            <para>
            Valid authentication options must have been specified in the
            <see cref="T:Bloomberglp.Blpapi.SessionOptions"/>.
            </para>
            </summary>
            <param name="userId">
            The user for which the token will be generated.
            </param>
            <param name="ipAddress">
            An IPv4 or IPv6 address.
            </param>
            <param name="correlationId">
            An optional <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> for correlating this
            request. If null one is generated internally.
            <para>
            Must not already be in use.
            </para>
            </param>
            <param name="eventQueue">
            <see cref="T:Bloomberglp.Blpapi.IEventQueue"/> to be used to receive response events for
            this request. If null, events for this request are delivered to the
            session's event queue.
            </param>
            <returns>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> for this asynchronous request.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.GenerateToken(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.IEventQueue)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.GenerateToken(System.String,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.IEventQueue)"/>
            with a null user ID and IP address.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.GenerateToken(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.GenerateToken(System.String,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.IEventQueue)"/>
            with a null user ID and IP address and a null <see cref="T:Bloomberglp.Blpapi.IEventQueue"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.GenerateToken">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.GenerateToken(System.String,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.IEventQueue)"/>
            with all null arguments.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.GenerateAuthorizedIdentity(Bloomberglp.Blpapi.AuthOptions,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Generates an authorized <see cref="T:Bloomberglp.Blpapi.Identity"/> with the specified
            <paramref name="authOptions"/> and <paramref name="cid"/>.
            <para>
            One or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.AUTHORIZATION_STATUS"/>
            events, zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOKEN_STATUS"/>
            events and zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/>
            events are generated. If this is an asynchronous
            <see cref="T:Bloomberglp.Blpapi.AbstractSession"/> then an <see cref="T:Bloomberglp.Blpapi.Event"/> may be
            processed by the registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/> before
            <see cref="M:Bloomberglp.Blpapi.IAbstractSession.GenerateAuthorizedIdentity(Bloomberglp.Blpapi.AuthOptions,Bloomberglp.Blpapi.CorrelationID)"/> has returned.
            </para>
            <para>
            The behavior is undefined when <paramref name="authOptions"/> is
            null.
            </para>
            </summary>
            <param name="authOptions">
            The <see cref="T:Bloomberglp.Blpapi.AuthOptions"/> with which the <see cref="T:Bloomberglp.Blpapi.Identity"/>
            will be generated.
            </param>
            <param name="cid">
            If provided will be used to identify messages associated with the
            generated identity.
            </param>
            <returns>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that will be used to
            identify messages associated with the generated identity.
            This will be <paramref name="cid"/> if it was provided.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IAbstractSession.GetAuthorizedIdentity(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Gets an authorized <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            <param name="cid">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> that maps to an authorized
            <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </param>
            <para>
            If <paramref name="cid"/> is omitted and the session identity
            is authorized, the function will return the session identity.
            </para>
            <para>
            An authorized identity must be mapped to <paramref name="cid"/>.
            If <paramref name="cid"/> is omitted the session identity must
            have been authorized.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.SeatType">
            <summary>
            Seat type enumeration defines seat type values such as whether this
            identity is a Bloomberg Professional Service user.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.SeatType.INVALID_SEAT">
            <summary>
            Invalid seat type
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.SeatType.BPS">
            <summary>
            Bloomberg Professional Service
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.SeatType.NONBPS">
            <summary>
            None Bloomberg Professional Service
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Identity">
            <summary>
            Provides access to the entitlements for a specific user.
            </summary>
            <remarks>  An unauthorized Identity is created using
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.CreateIdentity"/>. Once a Identity has been created it
            can be authorized using
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            SendAuthorizationRequest()</see>.
            The authorized Identity can then be used in <see
            cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
            Subscribe()</see> or
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            SendRequest()</see> calls. Once authorized a Identity has access to the
            entitlements of the user which it was validated for and can then be queried
            to see if a user is entitled to receive data.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Identity.IsAuthorized(Bloomberglp.Blpapi.Service)">
            <summary>
            Returns true if the user handle is authorized for the specified Service.
            </summary>
            <param name="service"></param>
            <returns><c>true</c> on authorized and <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">
            The specified 'service' is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Identity.HasEntitlements(System.Int32[],Bloomberglp.Blpapi.Service)">
            <summary>
            Returns true if the user has the specified entitlements for the specified
            Service.
            </summary>
            <remarks> Same as calling <see cref="M:Bloomberglp.Blpapi.Identity.HasEntitlements(System.Int32[],Bloomberglp.Blpapi.Service,System.Collections.Generic.List{System.Int32})">
            HasEntitlements(entitlements, service, null}</see>.
            </remarks>
            <param name="entitlements"></param>
            <param name="service"></param>
            <returns><c>true</c> on having entitlements for service and <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">
            The specified 'entitlements' or 'service' is null or invalid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Identity.HasEntitlements(System.Int32[],Bloomberglp.Blpapi.Service,System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns true if the user has the specified entitlements for the specified
            Service.
            </summary>
            <remarks> If the optional failedEntitlements is not null then the
            failedEntitlements list is populated with all entitlement ids of the
            specified Service that this Identity doesn't have.
            </remarks>
            <param name="entitlements"></param>
            <param name="service"></param>
            <param name="failedEntitlements"></param>
            <returns><c>true</c> on having entitlements for service and <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">
            The specified 'entitlements' or 'service' is null or invalid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Identity.HasEntitlements(Bloomberglp.Blpapi.Element,Bloomberglp.Blpapi.Service)">
            <summary>
            Returns true if the user has the specified entitlements for the specified
            Service.
            </summary>
            <remarks> Same as calling
            <see cref="M:Bloomberglp.Blpapi.Identity.HasEntitlements(Bloomberglp.Blpapi.Element,Bloomberglp.Blpapi.Service,System.Collections.Generic.List{System.Int32})">
            HasEntitlements(entitlements, service, null}</see>.
            </remarks>
            <param name="entitlements"></param>
            <param name="service"></param>
            <returns><c>true</c> on having entitlements for service and <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">
            The specified 'entitlements' or 'service' is null or invalid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Identity.HasEntitlements(Bloomberglp.Blpapi.Element,Bloomberglp.Blpapi.Service,System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns true if the user has the specified entitlements for the specified
            Service.
            </summary>
            <remarks> If the optional failedEntitlements is not null then the
            failedEntitlements list is populated with all entitlement ids of the
            specified Service that this Identity doesn't have.
            </remarks>
            <param name="entitlements"></param>
            <param name="service"></param>
            <param name="failedEntitlements"></param>
            <returns><c>true</c> on having entitlements for service and <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">
            The specified 'entitlements' or 'service' is null or invalid.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Identity.SeatType">
            <summary>
            Returns SeatType value of this identity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.IEventQueue">
            <summary>
            A queue used to handle replies to requests synchronously.
            <para>
            When a request is submitted, an application can either handle
            the responses asynchronously as they arrive or use an
            <see cref="T:Bloomberglp.Blpapi.IEventQueue"/> to handle all responses synchronously.
            The <see cref="T:Bloomberglp.Blpapi.IEventQueue"/> will only deliver responses to the
            request(s) it is associated with.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IEventQueue.NextEvent">
            <summary>
            Retrieves the next <see cref="T:Bloomberglp.Blpapi.Event"/> available for processing.
            <para>
            This method is the same as calling <see cref="M:Bloomberglp.Blpapi.IEventQueue.NextEvent(System.Int64)"/>
            with 0 milliseconds.
            </para>
            </summary>
            <returns>
            The next <see cref="T:Bloomberglp.Blpapi.Event"/> available.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IEventQueue.NextEvent(System.Int64)">
            <summary>
            Retrieves the next <see cref="T:Bloomberglp.Blpapi.Event"/> available for processing.
            <para>
            If no event is available immediately, wait for <paramref name="timeoutMillis"/>
            milliseconds for an event to arrive. If no event is received before the
            timeout expires returns a <see cref="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT"/> event.
            If the timeout is specified as 0 then wait for an infinite amount
            of time for an event to be received.
            </para>
            </summary>
            <param name="timeoutMillis">
            A timeout in milliseconds to wait for an event to be available.
            </param>
            <returns>
            The next event available on this session or a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.TIMEOUT"/> event in case of a timeout.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IEventQueue.TryNextEvent">
            <summary>
            Tries to retrieve the next <see cref="T:Bloomberglp.Blpapi.Event"/> available for processing.
            <para>
            This method never blocks.
            </para>
            </summary>
            <returns>
            Next <see cref="T:Bloomberglp.Blpapi.Event"/> if available or null if no <see cref="T:Bloomberglp.Blpapi.Event"/>
            is available immediately.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IEventQueue.Purge">
            <summary>
            Purges any <see cref="T:Bloomberglp.Blpapi.Event"/> objects in this queue which have
            not been processed and cancel any pending requests linked
            to this <see cref="T:Bloomberglp.Blpapi.IEventQueue"/>.
            <para>
            This queue can subsequently be re-used for a subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.AdhocResponseMessageIterator">
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil">
            <summary>
            This class provides a collection of utility functions to
            create admin messages. An admin message is a message created for blpapi
            users for operation status and error information such as session staus,
            service status, subscription status, request status, published topic
            status and so on.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.AdminServiceDefinition">
            <summary>
            Returns the service definition of the internal admin schema.
            </summary>
            <returns>The service definition of the internal admin schema or
            null if the schema failed to load.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateAdminEvent(Bloomberglp.Blpapi.Name)">
            <summary>
            Creates and returns an admin event with the specified
            <paramref name="eventName"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateAdminEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name)">
            <summary>
            Creates and returns an admin event with the specified
            <paramref name="eventName"/> using the specified <paramref name="adminSchema"/>.
            </summary>
            <param name="adminSchema">The admin schema defining event schema.</param>
            <param name="eventName">The event name.</param>
            <returns>An admin event.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSessionStatusEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,System.Net.IPEndPoint,Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionInfo)">
            <summary>
            Creates and returns a session status event with the specified
            <paramref name="eventName"/> using the specified <paramref name="adminSchema"/>.
            Such an event contains the service address information in the specified
            <paramref name="server"/>.
            </summary>
            <param name="adminSchema">The admin schema.</param>
            <param name="eventName">The event name.</param>
            <param name="server">
            Server address appearing in the message of the event.
            </param>
            <param name="sessionInfo">
            Connection session info containing encryption status and serverId
            appearing in the message.
            </param>
            <returns>A session status event.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSessionStatusEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a session status event with the specified
            <paramref name="eventName"/> using the specified <paramref name="adminSchema"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSessionStatusEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,System.String,System.Int32,System.String,System.String,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a session status error event with the specified
            <paramref name="eventName"/> using the specified <paramref name="adminSchema"/>.
            Other arguments provide error information.
            </summary>
            <param name="adminSchema">The admin schema.</param>
            <param name="eventName">The event name.</param>
            <param name="source">The error source.</param>
            <param name="errorCode">The error code.</param>
            <param name="category">The error category.</param>
            <param name="errorDescription">The description of error detail.</param>
            <param name="subcategory">The error subcategory.</param>
            <param name="guid">The request guid that causes this event.</param>
            <returns>Returns a session status error event.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSubscriptionStatusMsg(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,System.String,System.Int32,System.String,System.String,System.String,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a subscription error message with the specified
            <paramref name="eventName"/> using the specified <paramref name="adminSchema"/>
            for the subscription indexed by the specified <paramref name="correlationId"/>
            and <paramref name="topicName"/>. Other arguments provide error information.
            </summary>
            <param name="adminSchema">The admin schema.</param>
            <param name="eventName">The event name.</param>
            <param name="source">The error source.</param>
            <param name="errorCode">The error code.</param>
            <param name="category">The error category.</param>
            <param name="errorDescription">The description of error detail.</param>
            <param name="subcategory">The error subcategory.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the subscription.
            </param>
            <param name="topicName">The topic string of the subscription.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in the creation of this message.
            </param>
            <returns>Returns a subscription error message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSessionStatusMsg(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,System.Net.IPEndPoint,Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionInfo)">
            <summary>
            Creates and returns a sessions status message containing the server
            information described by the specified <paramref name="server"/>.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="eventName">The event name.</param>
            <param name="server">
            The server information appearing in message.
            </param>
            <param name="sessionInfo">
            Connection session info containing encryption status and serverId
            appearing in the message.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateTopicStatusMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.CorrelationID,System.Nullable{System.Int64},Bloomberglp.Blpapi.Internal.TopicString.FromUser,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a topic status message describing published
            topic status.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="name">The event name.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the published topic.
            </param>
            <param name="topicId">The topic Id of the published topic.</param>
            <param name="topic">The security topic string of the published topic.</param>
            <param name="guid">
            The request ID of the message that resulted in the creation of this
            message.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateResolutionSuccessMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.TopicString.Resolved,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a topic resolution success message for the
            published topic indexed by the specified <paramref name="correlationId"/>
            and described by the speicified <paramref name="topic"/>.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the topic.
            </param>
            <param name="topic">The topic string of the topic.</param>
            <param name="guid">
            The request ID of the message that resulted in the creation of this
            message.
            </param>
            <returns>Returns a resolution success message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateResolutionFailureMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a topic resolution failure message for the
            published topic indexed by the specified <paramref name="correlationId"/>.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the topic.
            </param>
            <param name="result">The failure detail.</param>
            <param name="guid">
            The request ID of the message that resulted in the creation of this
            message.
            </param>
            <returns>Returns a resolution failure message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateTopicCreationFailureMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.TopicString.FromUser,Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a message describing failure of creating a
            published topic.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the published topic.
            </param>
            <param name="topic">The topic string of the published topic.</param>
            <param name="result">The error detail.</param>
            <param name="guid">
            The request ID of the message that resulted in the creation of this
            message.
            </param>
            <returns>Returns a failure message for creating topic.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSubscriptionTerminatedMsg(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResultCode,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a subscription terminated message.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="resultCode">The termination detail.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing subscription.
            </param>
            <param name="topicName">The topic string of the subscription.</param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in the creation of this message.
            </param>
            <returns>Returns a subscription terminedted message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSubscriptionFailureMsg(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResultCode,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Nullable{System.Int32})">
            <summary>
            Creates and returns a (re)subscription failure message. If the
            specified <paramref name="resubId"/> is not null and the admin schema
            defines "resubscriptionId", the message contains "resubscriptionId" with
            the value of <paramref name="resubId"/>; otherwise, the message does
            not have "resubscriptionId".
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="result">The failure detail.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing subscription.
            </param>
            <param name="topicName">The topic string of the subscription.</param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in the creation of this message.
            </param>
            <param name="resubId">
            The resubscription ID appearing in resubscription failure message if not null.
            </param>
            <returns>Returns a subscription failure message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreatePermissionRequestMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicString.FromUser},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates a message specifying a permission request for the topics in
            the specified <paramref name="topicStringList"/> by the user
            described by other arguments.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="topicStringList">The list of toipic strings in the request.</param>
            <param name="uuid">The uuid if it is a user.</param>
            <param name="applicationId"> The application ID if it is an application.</param>
            <param name="seatType">The seat type.</param>
            <param name="userName">The user name if it is a user.</param>
            <param name="appName">The application name if it is a user.</param>
            <param name="serviceName">The service name of those topics.</param>
            <param name="deviceAddress">The device address.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing this request.
            </param>
            <param name="requestGuid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> associated with this request.
            </param>
            <returns>Returns a message containing a permission request.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSubscriptionFailureMsg(Bloomberglp.Blpapi.Internal.SchemaImpl,System.String,System.Int32,System.String,System.String,System.String,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionException},Bloomberglp.Blpapi.CorrelationID,System.String,System.Nullable{System.Int32},Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a (re)subscription failure message. If the
            specified <paramref name="resubId"/> is not null and the admin schema
            defines "resubscriptionId", the message contains "resubscriptionId"
            with the value of <paramref name="resubId"/>; otherwise, the message
            does not have "resubscriptionId".
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="source">The error source.</param>
            <param name="errorCode">The error code.</param>
            <param name="category">The error category.</param>
            <param name="errorMsg">The description of error detail.</param>
            <param name="subcategory">The error subcategory.</param>
            <param name="failureDetails">The detail appearing in the field "exception".</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the subscription.
            </param>
            <param name="topicName">The topic string of the subscription.</param>
            <param name="resubId">
            The resubscription ID appearing in
            resubscription failure message if not null.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in the creation of this message.
            </param>
            <returns>Returns a (re)subscription failure message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSessionStartedEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates and returns a session started event.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSubscriptionStartedMsg(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResultCode,Bloomberglp.Blpapi.CorrelationID,System.String,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.DataSetInfo},System.String,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Nullable{System.Int32})">
            <summary>
            Creates and returns a (re)subscription started message. If the
            specified <paramref name="resubId"/> is not null and the admin schema
            defines "resubscriptionId", the message contains "resubscriptionId"
            with the value of <paramref name="resubId"/>; otherwise, the message
            does not have "resubscriptionId".
            </summary>
            <param name="adminSchema">The admin schema.</param>
            <param name="result">
            The subscription result that may contain exceptions to fill message.
            </param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the subscription.
            </param>
            <param name="topicName">The topic string of the subscription.</param>
            <param name="dataSets">
            A collection of <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet"/> instances within the subscription.
            </param>
            <param name="receivedFrom">The endpoint of the subscription.</param>
            <param name="reason">
            The reason why this message was created.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in the creation of this message.
            </param>
            <param name="resubId">
            The resubscription ID appearing in resubscription failure message
            if not null.
            </param>
            <returns>Returns a subscription started message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateSubscriptionStartedMsg(Bloomberglp.Blpapi.Internal.SchemaImpl,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolutionNote},Bloomberglp.Blpapi.CorrelationID,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.DataSetInfo},System.String,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a (re)subscription started message. If the
            specified <paramref name="resubId"/> is not null and the admin schema
            defines "resubscriptionId", the message contains "resubscriptionId"
            with the value of <paramref name="resubId"/>; otherwise, the message
            does not have "resubscriptionId".
            </summary>
            <param name="adminSchema">The admin schema.</param>
            <param name="resolutionNotes">The exceptions to fill message.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the subscription.
            </param>
            <param name="topicName">The topic string of the subscription.</param>
            <param name="resubId">
            The resubscription ID appearing in resubscription failure message if not null.
            </param>
            <param name="dataSets">
            A collection of <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet"/> instances within the subscription.
            </param>
            <param name="receivedFrom">The endpoint of the subscription.</param>
            <param name="reason">
            The reason why this message was created.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in the creation of this message.
            </param>
            <returns>Returns a subscription started message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateServiceAvailabilityInfoMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,System.String,System.String[],Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Creates and returns a message describing that the connections to
            <paramref name="serverAddresses"/> are registered for the service
            with the name <paramref name="serviceName"/>.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="serviceName">The service name of registered service.</param>
            <param name="serverAddresses">
            The servers having connections that are registered.
            </param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object attached to message.
            </param>
            <returns>Returns a message describing service registration status.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateServiceStateChangeMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,System.Boolean,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            Creates and returns a service down/up message.
            </summary>
            <param name="adminSchema">
            The admin schema for the message.
            </param>
            <param name="isDown">
            Whether the message is for a <see cref="F:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.ServiceDown"/> or not.
            </param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing service request.
            </param>
            <param name="serviceName">The name of the service.</param>
            <returns>Returns a service status message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateServiceStateChangeMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a service down/up message.
            </summary>
            <param name="adminSchema">
            The admin schema for the message.
            </param>
            <param name="messageType">The message type.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing service request.
            </param>
            <param name="serviceName">The name of the service.</param>
            <param name="guid">
            The Request Id of the message which caused the creation of this
            message.
            </param>
            <returns>Returns a service status message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateServiceStatusEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a service opening or registering status event.
            </summary>
            <param name="adminSchema">The admin schema for message in event.</param>
            <param name="eventName">The event name.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing service request.
            </param>
            <param name="serviceName">The name of the service.</param>
            <param name="guid">
            The Request Id of the message which caused the creation of this
            message.
            </param>
            <returns>Returns a service status message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateServiceStatusEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,System.String,System.Int32,System.String,System.String,System.String,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a service opening or registering status event
            describing an error.
            </summary>
            <param name="adminSchema">The admin schema for message in event.</param>
            <param name="eventName">The event name.</param>
            <param name="source">The error source.</param>
            <param name="errorCode">The error code.</param>
            <param name="category">The error category.</param>
            <param name="errorDescription">The description of error detail.</param>
            <param name="subcategory">The error subcategory.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing service request.
            </param>
            <param name="serviceName">The name of the service.</param>
            <param name="guid">
            The Request Id of the message which caused the creation of this
            message.
            </param>
            <returns>Returns a service status message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateTokenStatusEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a token success event for token generation
            request.
            </summary>
            <param name="adminSchema">The admin schema for message in event.
            </param>
            <param name="eventName">The event name.</param>
            <param name="token">The token string.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the token generation request.
            </param>
            <param name="requestGuid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the token generation request.
            </param>
            <returns>Returns a token status event.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateTokenStatusEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,System.String,System.Int32,System.String,System.String,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a token failure event for token generation
            request.
            </summary>
            <param name="adminSchema">The admin schema for message in event.</param>
            <param name="eventName">The event name.</param>
            <param name="source">The error source.</param>
            <param name="errorCode">The error code.</param>
            <param name="category">The error category.</param>
            <param name="errorMsg">The description of error detail.</param>
            <param name="subcategory">The error subcategory.</param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing the token generation request.
            </param>
            <param name="requestGuid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the token generation request.
            </param>
            <returns>Returns a token status event.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateRequestStatusEvent(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Event.EventType,System.String,System.Int32,System.String,System.String,System.String,System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Requests.RequestGuid})">
            <summary>
            Create and return a request failure event that contains the same
            messages for all provided correlation ids.
            </summary>
            <param name="adminSchema">
            The schema using which the event will be generated.
            </param>
            <param name="eventName">The event name.</param>
            <param name="eventType"> The event type.</param>
            <param name="source">The source where the error occurred.</param>
            <param name="errorCode">
            The errorCode to associate the error back.
            </param>
            <param name="category">The category to which error belongs.</param>
            <param name="errorDescription">
            The user visible description about the error.
            </param>
            <param name="subcategory">The sub category if applicable.</param>
            <param name="correlationIds">
            The correationIds that will be attached to messages.
            </param>
            <param name="requestGuids">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> that will be attached to messages.
            </param>
            <returns>Returns a request status event.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateDataLossMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.CorrelationID,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Creates and returns data loss message having the specified
            <paramref name="id"/> for the subscription indexed by the specified
            <paramref name="cid"/>. The number of total lost messages
            is the specified <paramref name="ticksLostSize"/>.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="cid">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing subscription.
            </param>
            <param name="id">The unique Id field in message.</param>
            <param name="source">The data loss source.</param>
            <param name="ticksLostSize">The number of total lost messages.</param>
            <param name="timeReceived">
            The time of the first data loss represented by this event.
            </param>
            <returns>Returns a data loss message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.CreateDataLossMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Creates and returns data loss message having the specified
            <paramref name="id"/> for the list of subscriptions indexed by the
            specified <paramref name="cids"/>. The number of total lost messages
            is the specified <paramref name="ticksLostSize"/>.
            </summary>
            <param name="adminSchema">The admin schema for message.</param>
            <param name="cids">
            The list of <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object indexing subscriptions.
            </param>
            <param name="id">The unique Id field in message.</param>
            <param name="source">The data loss source.</param>
            <param name="ticksLostSize">The number of total lost messages.</param>
            <param name="timeReceived">
            The time of the first data loss represented by this event.
            </param>
            <returns>Returns a data loss message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.FillFieldExceptions(Bloomberglp.Blpapi.Internal.ElementImpl,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionException},Bloomberglp.Blpapi.Name)">
            <summary>
            Fill the sub-element identified by the specified
            <paramref name="exceptionsFieldName"/> in the specified
            <paramref name="parentElement"/> with field exception information
            from the specified <paramref name="exceptions"/>.  The schema of
            <paramref name="parentElement"/> must have a field whose type is
            an array of 'SubscriptionException'.
            Otherwise, the behaviour is undefined.
            </summary>
            <param name="parentElement">
            The element whose sub-element needs to be filled with exception
            information.
            </param>
            <param name="exceptions">
            The field exception information.
            </param>
            <param name="exceptionsFieldName">
            The sub-element to be filled with the exception information.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.FillFieldExceptions(Bloomberglp.Blpapi.Internal.ElementImpl,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolutionNote},Bloomberglp.Blpapi.Name)">
            <summary>
            Fill the sub-element identified by the specified.
            <paramref name="exceptionsFieldName"/> in the specified <paramref name="parentElement"/>
            with field exception information from the specified.
            <paramref name="resolutionNotes"/>.  The schema of <paramref name="parentElement"/>
            must have a field whose type is an array of 'SubscriptionException'.
            Otherwise, the behaviour is undefined.
            </summary>
            <param name="parentElement">
            The element whose sub-element needs to be filled with exception
            information.
            </param>
            <param name="resolutionNotes">
            The field exception information.
            </param>
            <param name="exceptionsFieldName">
            The sub-element to be filled with the exception information.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.FillResubId(Bloomberglp.Blpapi.Internal.ElementImpl,System.Nullable{System.Int32})">
            <summary>
            If the specified <paramref name="resubId"/> is not null, fill the
            re-subscription id sub-element of the specified
            <paramref name="parentElement"/> with the value of
            <paramref name="resubId"/>.  This function has no effect if
            <paramref name="resubId"/> is null.  The schema of
            <paramref name="parentElement"/> should have a re-subscription id sub-element.
            </summary>
            <param name="parentElement">
            The element whose re-subscription id sub-element needs to be filled.
            </param>>
            <param name="resubId">
            The re-subscription id value.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.FillReceivedFrom(Bloomberglp.Blpapi.Internal.ElementImpl,System.String)">
            <summary>Populate "received-from" address field.</summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.AdminEvents.AdminSchemaLoader">
            <summary>
            A singleton to statically load admin schema from resource.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.AdminSchemaLoader.GetServiceDefinition">
            <summary>
            Returns the admin <see cref="T:Bloomberglp.Blpapi.Internal.ServiceDefinition"/>.
            </summary>
            <returns>
            Returns admin <see cref="T:Bloomberglp.Blpapi.Internal.ServiceDefinition"/> or null if the schema
            failed to load.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.AdminEvents.EventTypeMaker">
            <summary>
            A map from event name strings to <see cref="T:Bloomberglp.Blpapi.Event.EventType"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.EventTypeMaker.#cctor">
            <summary>Initializes the map.</summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdminEvents.EventTypeMaker.From(System.String)">
            <summary>
            Returns an <see cref="T:Bloomberglp.Blpapi.Event.EventType"/> mapped from the specified
            <paramref name="eventName"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.RegisterHandlerForRequest(Bloomberglp.Blpapi.Internal.RequestImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Interfaces.IEventQueueImpl)">
            <summary>
                Register the specified back end request used for authorizing
                the user authorization request with cid
                <paramref name=" userRequestCid"/> for the specified
                <paramref name="identity"/>.
            </summary>
            <param name="newRequest">
                <see cref="T:Bloomberglp.Blpapi.Internal.RequestImpl"/> to be sent to the back-end
            </param>
            <param name="identity">
                Identity to associate with this request
            </param>
            <param name="userRequestCid">
                Correlation ID of the user authorization request
            </param>
            <param name="eventQueue">
                Optionally specified event queue for delivering events
            </param>
            <returns>
                A new authorization protocol handler that will use the
                specified <paramref name="newRequest"/>
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.SendCloneTokenRequest(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Int32,System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Send a request to clone tokens
            </summary>
            <param name="identity">Identity that owns the authorization</param>
            <param name="numTokens">Number of cloned copies required</param>
            <param name="originalToken">Original token</param>
            <param name="authCid">
                CID of the user auth request triggering this clone request
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.SendAdditionalCloneTokenRequest(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Int32)">
            <summary>
            Send a clone token request for additional tokens for the specified
            identity.
            </summary>
            <param name="identity">Identity requesting the tokens</param>
            <param name="numTokens">Number of cloned copies required</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.NormalizeAuthRequest(Bloomberglp.Blpapi.Internal.RequestImpl)">
             <summary>Create a new 'RequestImpl' from the specified 'original'
              rewriting 'emrsId' as 'authId'.</summary>
            
             The main purpose of this function is to be able to allow
             applications to use interchangeably the new 'authId' or the old
             'emrsId' fields.
            
             <param name="original">User provided request to rewrite</param>
             <returns>a new object with the same contents as the original
                      request except for the rewritten fields.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneNonTokenAuthRequest(Bloomberglp.Blpapi.Internal.RequestImpl,System.Int32)">
             <summary>
             Generate 'numClones' of the 'originalRequest'
             </summary>
            
             Note that the 'originalRequest' must be an authorization request
             and that the "clones" are normalized to use the preferred 'authId'
             field that replaces 'emrsId'.  Also note that the "clones" are not
             real clones, but rather references into a single normalized
             request.
            
             <returns>List of references to a normalized version of the
                      'originalRequest'</returns>
             <param name="originalRequest">Original request.</param>
             <param name="numClones">Number references to generate.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.SendMultiAuthorizationRequests(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.RequestImpl},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Interfaces.IEventQueueImpl)">
            <summary>
            Does the actual work of registering and sending authorization
            requests using the specified <paramref name="requests"/>, each
            encoding a back end authorization request.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.NotifyAuthorizationSuccess(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.OperationImpl,Bloomberglp.Blpapi.Event.EventType,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
             <summary>
             Send a response event of the specified 'eventType' with the
             specified 'byteBuffer' as data to the optionally specified
             'eventQueue', where the schema is based on the specified
             'operation' in the specified 'service'.  The response is for the
             request identified by the specified 'cid'.  If 'eventQueue' is
             'null' then the session default event queue will be used.
            
             Call this with 'mutex' unlocked.
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.NotifyAuthorizationSuccess(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.OperationImpl,Bloomberglp.Blpapi.Event.EventType,Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Send a response event of the specified <paramref name="eventType"/>
            with the specified <paramref name="byteBuffer"/> as data where the
            schema is based on the specified <paramref name="operation"/> in
            the specified <paramref name="service"/>. The response is for the
            given <paramref name="request"/> and its corresponding
            <paramref name="identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.IsHandleReadyForResponse(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationHandle)">
            <summary>
            Perform basic validation checks for a response delivered to an
            auth handler
            </summary>
            <returns>'true' if all checks pass, 'false' otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.ResetHandleOnConnectionDown(Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler)">
            <summary>
            The connection terminated before we got a response for an
            authorization request. Keep the request to be used in failover.
            This is not considered as an error response, so the authorization
            should not be failed.
            </summary>
            <param name="handler">the handler that received this response
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CheckResponse(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler,System.String@)">
            <summary>
            Validate the specified 'result' and message 'prolog' received in
            response to an authorization request for the request associated
            with the specified 'handler'.  Also invoke the appropriate error
            handling in case the reponse is invalid.
            </summary>
            <param name="result">Result code of the reply</param>
            <param name="prolog">Prolog of the reply</param>
            <param name="handler">Handler associated with the request</param>
            <param name="errorMsg">Informative message when the check fails
            </param>
            <returns>'false' when the response is invalid, 'true' otherwise
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.Retry(Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationHandle,System.String,System.String@)">
            <summary>
            Perform a retry after failure. Currently only ERROR_COMM or
            failure to decode response is retried.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.FailAuthorizationHandler(Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler)">
             <summary>
             Process the failure of the back end authorization request managed
             by the specified <c>handler</c>.  This marks the user request as
             failed, and cancels all sibling back end auth requests.  It also
             marks the identity as no longer authorized.
            
             Note that this method does *not* generate any user notification
             events, but it will update identity authorization state.  The
             caller must take care to save the pre-call authorization state as
             well as any state needed to generate user events.
             </summary>
             <param name="handler">Protocol handler that failed auth</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.FailUserAuthorization(Bloomberglp.Blpapi.CorrelationID)">
             <summary>
             Process failure of the specified user authorization request: mark
             the user request as failed, and cancel all the back end requests
             associated with that user request.
            
             Note that this method does *not* generate any user notification
             events, but it will update identity authorization state.  The
             caller must take care to save the pre-call authorization state as
             well as any state needed to generate user events.
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.FailUserAuthorizationAndCancelHandlers(Bloomberglp.Blpapi.CorrelationID,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Mark the specified user request as failed and cancel the specified
            handlers for the given identity.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.SendStatusEventUnlocked(Bloomberglp.Blpapi.Event.EventType,System.Int32,System.String,System.String,System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Interfaces.IEventQueueImpl,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Publish request failed admin event
            </summary>
            <param name="eventType">The event type.</param>
            <param name="errorCode">
            The event's error code.
            </param>
            <param name="errorMsg">
            A message detailing what the error is.
            </param>
            <param name="category">
            The category for the error.
            </param>
            <param name="subcategory">
            Further sub-categorization of the error.
            </param>
            <param name="cid">CID of user request that failed</param>
            <param name="eventQueue">Where event should be published</param>
            <param name="requestGuid">
            The unique identifier for this event.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.UserRequestRegistry">
            <summary>
            Manage authorization requests submitted by the user.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.UserRequestRegistry.RegisterRequest(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext)">
            <summary>
            Register a new request
            </summary>
            <param name="identity">Identity used to authorize this request
            </param>
            <param name="requestContext">Internal representation of the request
            </param>
            <returns>'true' if there is no request currently active (so
            the request being registered becomes the new active request),
            or 'false' otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.UserRequestRegistry.FailRequest(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Update data structures to reflect that user request has failed
            <list type="bullet">
            <item>If the identity is already authorized, it means that an
                  authorization success event has already been generated,
                  so it fails all the authorization requests for the
                  identity associated with the request.</item>
            <item>If the identity is not authorized, the specified request
                  is removed and the active request is cleared.
            </item>
            </list>
            </summary>
            <param name="cid">
            The user supplied CID of the failed request
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.UserRequestRegistry.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Process a connection down event on the specified 'connection'.
            </summary>
            <param name="connection">The connection that went down</param>
            <returns>A list of identities for which 'connection' was the
            last remaining connection before delivering authorization
            success, and therefore need to be notified.
            </returns>
            <remarks>
            This method supports the tracking of which connections remain
            to be authorized before delivering an authorization success
            event to the client.</remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.AuthorizationHandlerRegistry.AddHandler(Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler)">
            <summary>
            Add a handler to this pool, marked as available for future
            authorization requests.
            </summary>
            <param name="handler">The authorization handler to be added
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.AuthorizationHandlerRegistry.TryUseHandler(Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler)">
            <summary>
            Marks the specified handler to be used for an active connection
            that does not have any associated authorization handle.
            </summary>
            <param name="handler">The authorization handler to use</param>
            <returns>The connection to which the handler was assigned, or
                     <value>null</value> if no connection could be found.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.AuthorizationHandlerRegistry.RemoveHandle(Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationHandle)">
            <summary>
            Removes the specified handle from the pool
            </summary>
            <param name="requestHandle">Handle to be removed</param>
            <returns>Connection being used by the handle, or 'null' if it
                     was not bound to a connection
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.AuthorizationHandlerRegistry.ConnectionInfo.RemoveRequestHandler(Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler,System.Object)">
            <summary>
            Remove the specified 'handler' from the connetion up
            handlers and invoke the completion callback. Please call
            this method with 'mutex' lock-ed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.AuthorizationProtocolStateless.CancelAuthRequest">
            <summary>
            Cancel pending request (in case user cancel the auth process
            before the initial response came back, i.e.
            identity.isAuthorized() == false).
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.AuthorizationProtocolStateless.SendRevocation(System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext},Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Int32,System.String)">
            <summary>
            Send a revocation message ("AuthorizationRevoked") in an
            "AUTHORIZATION_STATUS" event to each user request in the
            specified 'requestsForNotification', where the revocation
            message has the specified 'revocationCode' and
            'revocationMessage' fields.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.AuthorizationProtocolStateless.ParseAuthorizationResponse(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Authorization.AuthorizationResponseControl,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Authorization.AuthorizationResponsePrivileges,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer@,System.String@)">
            <summary>
            Parse a stateless authorization response
            </summary>
            <param name="prolog">
            Prolog of the authorization response
            </param>
            <param name="payload">
            Payload of the authorization response
            </param>
            <param name="tokenData">Object to receive token data</param>
            <param name="privilegeInfo">
            Object to receive permissions and entitlements
            </param>
            <param name="userResponseData">
            Object to receive user/application data</param>
            <param name="errorMessage">
            This is set to an explanatory message when the return value is
            'false'.
            </param>
            <returns>
            'true' if the response can be parsed, false otherwise
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.AuthorizationProtocolVc.ProcessVcAuthFailure(System.Boolean,System.String,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
             <summary>
             Fail this handler and its associated user request with the
             specified <paramref name="errorMessage"/> and where
             <paramref name="errorPayload"/> contains any relevant error
             info from the back-end that should be given to the user.  If
             the specified <paramref name="internalFailure"/> is true, then
             <paramref name="errorPayload"/> is not used, and an error
             payload will be generated by the SDK.
            
             The AuthorizationManager mutex must be locked.
             </summary>
             <param name="internalFailure">Error originated in SDK</param>
             <param name="errorMessage">Text of user facing message</param>
             <param name="errorPayload">Error payload from back-end</param>
             <param name="guid">
             Identifier for the message that causes this failure.
             </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry">
            <summary>
            Manage pending token requests, maintain counts of completed vs
            pending requests, and manage the interaction with the
            <see cref="T:Bloomberglp.Blpapi.Internal.TokenGenerator"/>.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.pendingTokenRequestMap">
            <summary>
            Map clone request CID to details of the clone request
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.userAuthRequests">
            <summary>
            User auth requests for this identity
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.authMgrInstance">
            <summary>
            <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager"/> instance that owns this
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.numTokensCloned">
            <summary>
            Count of tokens successfully cloned
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.numTokensPending">
            <summary>
            Count of tokens requested but pending
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.RegisterCloneRequest(Bloomberglp.Blpapi.CorrelationID,System.String,System.Int32,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Register a new (pending) token cloning request
            </summary>
            <param name="cloneRequestCid">CID of the clone request</param>
            <param name="originalToken">Token to be cloned</param>
            <param name="nTokens">Number of cloned copies required</param>
            <param name="authRequestCid">
                CID of the triggering auth request
            </param>
            <returns>The 'PendingTokenRequest' encapsulating the new
                     request
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.DeRegisterPendingRequests">
            <summary>
            De-register all pending clone requests
            </summary>
            <returns>Correlation IDs of pending requests</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.MarkRequestComplete(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Mark the specified request as completed successfully, so the
            requested tokens were obtained.
            </summary>
            <param name="cloneRequestCid">CID of the clone request</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.MarkRequestCanceled(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Mark the specified request as canceled or failed, so the
            requested tokens were not obtained.
            </summary>
            <param name="cloneRequestCid">CID of the clone request</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CloneTokenRegistry.PendingTokenRequest.ValidateResponse(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Validate a response that claims to be for a request with
            the given CID.
            </summary>
            <param name="cloneRequestCid">CID of the request received
            </param>
            <param name="requestGuid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the clone token request.
            </param>
            <returns><c>true</c> if the response is valid, <c>false</c>
                     otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationManager.SendAuthorizationRequest(Bloomberglp.Blpapi.Internal.RequestImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationSuccessCallback,Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationFailureCallback,Bloomberglp.Blpapi.Internal.Interfaces.IEventQueueImpl)">
            <summary>
            Sends the specified authorization <paramref name="request"/> to
            authorize <paramref name="identity"/>. If the
            specified <paramref name="eventQueue"/> is not null, all
            events and messages relating to this request will be delivered to
            that event queue with <paramref name="correlationId"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler">
            <summary>
            Defines an authorization protocol handler.  The expected usage
            consists of:
            <list type="number">
            <item>
            Initialize the object using an <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationHandle"/>.
            </item>
            <item>
            Call <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler.SendAuthRequest"/> to send the backend request.
            </item>
            <item>
            If necessary, cancel an outstanding request using
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler.CancelAuthRequest"/>.
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler.SendAuthRequest">
            <summary>
            Sends the authorization request to the back end
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler.CancelAuthRequest">
            <summary>
            Cancels the authorization request, if any.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler.GetHandle">
            <summary>
            Retrieves the <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationHandle"/> used to
            initialize this handler.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.IAuthRetryStrategy">
            <summary>
            An interface for the authorization retry strategy. This is invoked
            when the authorization response comes back with recoverable error,
            i.e. ERROR_COMM (backend timeout) or failure to decode response.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthRetryStrategy.Retry">
            <summary>
            Retries authorization.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthRetryStrategy.RetryCount">
            <summary>
            Returns the number of retries that have been attempted.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.IAuthRetryStrategyFactory">
            <summary>
            A factory interface for creating retry strategies.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthRetryStrategyFactory.Create(System.Action)">
            <summary>
            Creates a strategy that can execute authorization retry.
            </summary>
            <param name="retryAction">
            The action where authorization is retried.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.AuthCheckResponseResult">
            <summary>
            This enum defines return values for preliminary check of authorization
            response. See <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager.CheckResponse(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationProtocolHandler,System.String@)"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthCredentialType">
            <summary>
            The kind of authentication credential in use for this identity.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategy">
            <summary>
            This class retries authorization at a later time by using
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManager"/> to schedule the retry.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategy.#ctor(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory,System.Action)">
            <summary>
            Creates a new delayed retry strategy.
            </summary>
            <param name="timerFactory">
            The factory for creating <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategy.timerEventManager"/>.
            </param>
            <param name="retryAction">
            The action where authorization is retried.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategy.Retry">
            <summary>
            Schedules a new retry.
            </summary>
            <returns>
            Returns <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRetryResult.Success"/> if scheduling succeeded;
            Returns <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRetryResult.AlreadyScheduled"/> if there's
            a retry already scheduled;
            Returns <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRetryResult.Fail"/> if a retry cannot be
            scheduled as determined by the strategy.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategy.TryNow(System.Object)">
            <summary>
            Executes the <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategy.retryAction"/>. Also set
            <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategy.alreadyScheduled"/> to false to indicate this retry
            has completed, the next retry can be scheduled.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategyFactory">
            <summary>
            An implementation of <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.IAuthRetryStrategyFactory"/> that
            creates <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthDelayedRetryStrategy"/> that uses
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory"/> to schedule a
            retry.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthManagerConfig">
            <summary>
            Provides a data structure that holds the configuration parameters to
            the <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.AuthorizationManager"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthOptionsType">
            <summary>
            The type of authentication being used.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationFailureCallback">
            <summary>
            A call back of this type is invoked after authorization request failed.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationHandle">
            <summary>
            A representation of an authorization request sent to the back-end
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationHandle.ResetRetryStrategy">
            <summary>
            Dispose and reset <see cref="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationHandle.RetryStrategy"/>. This is invoked
            when retry strategy is no longer needed, i.e. success or
            unrecoverable response, or request is canceled, or connection
            is down, etc.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationSuccessCallback">
            <summary>
            A call back of this type is invoked after authorization request
            succeeds.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationSuccessParts">
            <summary>
            Contain the data required to construct an 'AuthorizationSuccess'
            message for an arbitrary correlation ID.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext">
            <summary>
            Context for the authorization request submitted by a user.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext.Request">
            <summary>
            Internal encoding of the request
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext.Cid">
            <summary>
            User visible correlation ID, may be used for cancelling this
            request.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext.EventQueue">
            <summary>
            Queue on which to deliver events related to this request
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext.HasToken">
            <summary>
            Return <c>true</c> if this request represents a token based
            request, <c>false</c> otherwise.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestState">
            <summary>
            State of the user request.  A request can follow any of these
            transition paths:
            : NEW_REQUEST --> SUCCESS
            : NEW_REQUEST --> SUCCESS --> FAILURE
            : NEW_REQUEST --> FAILURE
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRetryResult">
            <summary>
            This enum defines return values for retrying authorization
            by <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthRetryStrategy.Retry"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback">
            <summary>
            A call back that is invoked after the authorization process
            is completed, either successfully or with a failure.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer">
             <summary>
             This class implements an asynchronous single step authorizer component,
             which authorizes identities. This component abstracts away the
             intermediary phases of token generation, service opening, request
             preparation and authorization request sending.
             </summary>
             <remarks>
             This component goes through the steps of opening the authorization
             service, token generation, building the authorization request, and
             sending the authorization request.
            
             The authorization process can be in different states.
             The possible authorization state transitions are explained below:
            
             1) <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.Authorize(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)"/>
                  o authorization service already opened
                      --> 2) <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.GenerateToken(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)"/>
                  o authorization service not opened
                      --> <see cref="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.OpenService(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback)"/>
                          --> 2) <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.GenerateToken(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)"/>
            
             2) <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.GenerateToken(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)"/>
                  o opening auth service failed
                      --> <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthServiceOpenFailure"/>
                  o identity already authorized
                      --> <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AlreadyAuthorized"/>
                  o invalid authOptions (authType == None)
                      --> <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.InvalidAuthOptions"/>
                  o authOptions of type AuthOptions.Token
                      --> 3) <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.SendAuthRequest(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)"/>
                  o authOptions of other type
                      --> <see cref="M:Bloomberglp.Blpapi.Internal.TokenGenerator.GenerateToken(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.EventQueueImpl,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.Authorization.Implementation.TokenCompletionCallback)"/>
                          --> 3) <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.SendAuthRequest(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)"/>, or
                          --> <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.TokenGenerationFailure"/>
                               if token generation fails.
            
             3) <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.SendAuthRequest(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)"/>
                  o token generation failed
                      --> <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.TokenGenerationFailure"/>
                  o build authorization request failed
                      --> <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthRequestCreationFailure"/>
                  o build authorization request succeeded
                      --> <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.IAuthorizationManager.SendAuthorizationRequest(Bloomberglp.Blpapi.Internal.RequestImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationSuccessCallback,Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthorizationFailureCallback,Bloomberglp.Blpapi.Internal.Interfaces.IEventQueueImpl)"/>
                          o fails in function (returns error code) / fails asynchronously
                              --> <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthFailure"/>
                          o succeeds
                              --> <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthSuccess"/>
             </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.Authorize(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)">
             <summary>
             If <paramref name="authOptions"/> has type <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthOptionsType.None"/>,
             <paramref name="completionCb"/> is invoked with
             <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.InvalidAuthOptions"/>.
            
             Otherwise starts the process of authorizing the specified
             <paramref name="identity"/> by opening the authorization service,
             with the specified <paramref name= "authOptions"/> and
             <paramref name= "correlationId"/>, calling the specified
             <paramref name="completionCb"/> function once authorization is
             finished. The specified <paramref name="ipAddressHint"/>
             represents a valid local IP address which is internally used as a
             seed value for creating the token generation request.
            
             The behavior is undefined if the function is called with an
             identity that is currently in the authorizing process.
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.GenerateTokenAfterOpeningAuthService(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)">
            <summary>
            Generates token after opening the auth service. If the specified
            <paramref name="result"/> is a failure (i.e. service is not opened
            successfully), the specified <paramref name="completionCb"/> is
            called with <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthServiceOpenFailure"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.GenerateToken(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)">
            <summary>
            Generates token for the specified <paramref name="identity"/>, with
            the specified <paramref name="correlationId"/>,
            <paramref name="authOptions"/>, and
            <paramref name="ipAddressHint"/>. If the specified
            <paramref name="identity"/> is already authorized, or if the
            specified <paramref name="authOptions"/> is not valid, the specified
            <paramref name="completionCb"/> is called with a failure status.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.SendAuthRequestAfterTokenGeneration(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Authorization.Implementation.TokenStatus,System.String,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Sends authorization request if token generation is successful,
            otherwise <paramref name="completionCb"/> is called with
            <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.TokenGenerationFailure"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.SendAuthRequest(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,System.String,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)">
            <summary>
            Builds and sends authorization request for the specified
            <paramref name="identity"/>, with the specified
            <paramref name="correlationId"/>, based on the specified
            <paramref name="token"/>, calling the specified
            <paramref name="completionCb"/> function once authorization
            finished.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthorizer.DispatchCallback(Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Helper method to call a callback on a different thread to avoid
            deadlocks.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthSuccess">
            <summary>
            The status when the authorization is successful.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AlreadyAuthorized">
            <summary>
            The status when the identity has already been authorized.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.InvalidAuthOptions">
            <summary>
            The status when authorizing with an invalid
            <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthOptionsType"/>, e.g. <see cref="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthOptionsType.None"/>.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.TokenGenerationFailure">
            <summary>
            The status when token generation fails.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthServiceOpenFailure">
            <summary>
            The status when opening auth service fails.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthRequestCreationFailure">
            <summary>
            The status when creating auth request fails.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthStatus.AuthFailure">
            <summary>
            The status when the authorization fails.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.TokenCompletionCallback">
            <summary>
            This is the callback invoked after token request is completed, either
            successfully or with a failure.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.TokenStatus">
            <summary>
            Represents the status of token generation.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl">
            <summary>
            Fully thread-safe authorization properties of an entity.
            </summary>
            <remarks>
            <para>
            This class provides a fully thread-safe container of privileges and
            authorization tokens of an entity. An object of this type has two
            purposes:
            <list type="bullet">
            <item>
            Attach the contained entity authorization token to outgoing
            requests.
            </item>
            <item>Provide access to the entity privileges.</item>
            </list>
            When an object of this type is created it is not associated with any
            entity. The <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetConnectionAuthorization(Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog)"/> function
            associates an object of this type with an entity.
            </para>
            <para>
            The <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetConnectionAuthorization(Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog)"/> function grants "full"
            authorization to this <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl"/> object by storing an
            authorization token; the <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorizedToConsume(System.UInt32)"/> and
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorizedToProvide(System.UInt32)"/> functions are used to check if a
            <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl"/> is fully authorized. A fully authorized
            <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl"/> object also can have its privileges set by
            calling the <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetPermissions(System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.Int32})"/> function.
            </para>
            <para>
            Two types of authorization services are supported:
            <list type="bullet">
            <item>V2 authorization service</item>
            <item>Virtual circuit authorization service</item>
            </list>
            Currently the only method to differentiate them is by checking the
            service code. If the service code is
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.BbcommServiceCode.APIAUTH_INVOKE"/>
            (99) it is a V2 authorization service, otherwise it is a virtual
            circuit authorization service. (There is more than one virtual circuit
            authorization service code.)
            </para>
            <para>
            This class is *exception* *neutral* with no guarantee of rollback:
            If an exception is thrown during the invocation of a method on a
            pre-existing object, the object is left in a valid state, but its
            value is undefined.
            </para>
            </remarks>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.serverIdentity">
            <summary>
            Unique (per <see cref="T:System.AppDomain"/>) integer to differentiate
            between different authorization messages. This is not valid across
            session boundaries.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.platformAuthorizations">
            <summary>
            Map from a connection to the authorization message option that must
            be attached to the prolog of every request sent on that connection.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.lock">
            <summary>
            Used to serialize access to this object's data members.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.isAuthorized">
            <summary>
            Whether this object was authorized using an authorization service.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.isPermissioned">
            <summary>
            Whether this object has the entity permissions loaded.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.v2EncryptedAuthInfo">
            <summary>
            Encrypted authorization payload to be attached to every outgoing
            message. This message option is used only in a V2 authorization
            service <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl"/> object.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.consumerPrivileges">
            <summary>
            This object's set of authorized privileges for a consumer session.
            The privileges are composed of a list entitlement ids and a list
            of service ids.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.producerPrivileges">
            <summary>
            This object's set of authorized privileges for a publisher
            session. The privileges are composed of a list of entitlement ids
            and a list of service ids.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.isVirtualCircuit">
            <summary>
            True if this object is attached to a virtual circuit authorization
            service and false otherwise (V2 authorization service).
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.bpuid">
            <summary>
            The authorization <see cref="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.Bpuid"/> structure. This is an
            in-memory representation of a parsed bpuid string taken from an
            option on the authorization response prolog.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.#ctor(System.Int32)">
            <summary>
            Construct a new <c>UserHandleImpl</c> object with the specified
            <paramref name="serverIdentity"/> as the
            <see cref="T:System.AppDomain"/>-unique identifier of this object.
            </summary>
            <param name="serverIdentity">
            An <see cref="T:System.AppDomain"/>-unique identifier.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.UseAuthStatusEvents">
            <summary>
            True if this identity is being used with
            <see cref="M:Bloomberglp.Blpapi.SessionOptions.SetSessionIdentityOptions(Bloomberglp.Blpapi.AuthOptions,Bloomberglp.Blpapi.CorrelationID)"/>
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.GenerateAuthorizedIdentity(Bloomberglp.Blpapi.AuthOptions,Bloomberglp.Blpapi.CorrelationID)"/> or false
            otherwise. If this flag is set to true, authorization related
            events should use
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.AUTHORIZATION_STATUS"/>
            event type instead of <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE"/>,
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.PARTIAL_RESPONSE"/>,
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.REQUEST_STATUS"/>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetTokenData(System.Int32,System.Byte[])">
            <summary>
            Store the specified <paramref name="token"/> of the specified
            <paramref name="tokenType"/> in this object as a message option to
            be later attached to outgoing
            requests using this object. The behavior of this function is
            undefined for an object associated with a virtual circuit
            authorization service.
            </summary>
            <param name="tokenType">The token type.</param>
            <param name="token">The token data.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetConnectionAuthorization(Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog)">
            <summary>
            Set the entity authorization token for this object for the
            specified <paramref name="connection"/> to that specified by the
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption.PROTOCOL_OPTION_AUTH_USER_INFO"/> user
            option if it is present in the specified <paramref name="prolog"/>.
            </summary>
            <param name="connection">
            The connection for this authorization.
            </param>
            <param name="prolog">
            The prolog of the authorization response.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetPermissions(System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Set this object's privileges with the permissions given by the
            specified <paramref name="consumerServices"/>,
            <paramref name="consumerServiceCatalogIds"/>,
            <paramref name="consumerEids"/>,
            <paramref name="publishServices"/>, and
            <paramref name="publishEids"/>. If this object is associated with
            a V2 authorization service, then the specified
            <paramref name="publishServices"/>,
            <paramref name="publishServiceCatalogIds"/> and
            <paramref name="publishEids"/> are ignored. Privileges can only be
            set for an identity that has been authorized with
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetConnectionAuthorization(Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog)"/>.
            </summary>
            <param name="consumerServices">
            List of authorized services for consumption.
            </param>
            <param name="consumerServiceCatalogIds">
            List of authorized catalogs for consumption.
            </param>
            <param name="consumerEids">
            List of authorized entitlement ids for consumption.
            </param>
            <param name="publishServices">
            List of authorized services for publishing.
            </param>
            <param name="publishServiceCatalogIds">
            List of authorized catalogs for publishing.
            </param>
            <param name="publishEids">
            List of authorized entitlement ids for publishing.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.AddPermissions(System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Add to this object's privileges the permissions given by the
            specified <paramref name="consumerServices"/>,
            <paramref name="consumerEids"/>,
            <paramref name="consumerServiceCatalogIds"/>,
            <paramref name="publishServices"/>,
            <paramref name="publishServiceCatalogIds"/> and
            <paramref name="publishEids"/>.
            </summary>
            <param name="consumerServices">
            List of authorized services for consumption.
            </param>
            <param name="consumerEids">
            List of authorized entitlement ids for consumption.
            </param>
            <param name="consumerServiceCatalogIds">
            List of authorized catalogs for consumption.
            </param>
            <param name="publishServices">
            List of authorized services for publishing.
            </param>
            <param name="publishServiceCatalogIds">
            List of authorized catalogs for publishing.
            </param>
            <param name="publishEids">
            List of authorized entitlement ids for publishing.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.RemoveConnectionAuthorization(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Remove authorization for the specified
            <paramref name="connection"/>. The authorization status of this
            object is not affected.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.FailConnectionAuthorization(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Remove authorization for the specified
            <paramref name="connection"/> and set the object as
            "not authorized" (i.e. <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorized"/> == false).
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetVirtualCircuit(System.Boolean)">
            <summary>
            Set whether this object is associated with a virtual circuit
            service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.Clear">
            <summary>
            Clear this object's authorizations and permissions. The
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorized"/> function returns false after this
            method call.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.HasEntitlements(System.Int32[],Bloomberglp.Blpapi.Service)">
            <summary>
            Return true if this object is authorized for all elements in the
            specified <paramref name="entitlements"/> on the specified
            <paramref name="service"/>; otherwise return false.
            </summary>
            <param name="entitlements">Entitlements to search for.</param>
            <param name="service">
            The service to verify the user has access to.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.HasEntitlements(System.Int32[],Bloomberglp.Blpapi.Service,System.Collections.Generic.List{System.Int32})">
            <summary>
            Return true if this object is authorized for all elements in the
            specified <paramref name="entitlements"/> on the specified
            <paramref name="service"/>; otherwise fill the array specified by
            <paramref name="failedEntitlements"/> with the entitlement IDs that
            this object is not authorized for and return false.
            </summary>
            <param name="entitlements">Entitlements to search for.</param>
            <param name="service">
            The service to verify the user has access to.
            </param>
            <param name="failedEntitlements">
            A list to be filled with failed entitlement ids.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.HasEntitlements(Bloomberglp.Blpapi.Element,Bloomberglp.Blpapi.Service)">
            <summary>
            Return true if this object is authorized for all elements in the
            specified <paramref name="entitlements"/> on the specified
            <paramref name="service"/>; otherwise return false.
            </summary>
            <param name="entitlements">
            <see cref="T:Bloomberglp.Blpapi.Element"/> object with a list of entitlements to search
            for.
            </param>
            <param name="service">
            The service to verify the user has access to.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.HasEntitlements(Bloomberglp.Blpapi.Element,Bloomberglp.Blpapi.Service,System.Collections.Generic.List{System.Int32})">
            <summary>
            Return true if this object is authorized for all elements in the
            specified <paramref name="entitlements"/> on the specified
            <paramref name="service"/>; otherwise fill the array
            specified by <paramref name="failedEntitlements"/> with the
            entitlement IDs that this object is not authorized for and return
            false.
            </summary>
            <param name="entitlements">
            <see cref="T:Bloomberglp.Blpapi.Element"/> object with a list of entitlements to search
            for.
            </param>
            <param name="service">
            The service to verify the user has access to.
            </param>
            <param name="failedEntitlements">
            A list to be filled with failed entitlement ids.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsPermissioned">
            <summary>
            Check the permissioning state of this identity. Note that
            'IsAuthorized()' == false' implies this also returns false (and
            conversely 'IsPermissioned() == true' also implies
            'IsAuthorized == true').
            </summary>
            <returns>
            'true' if this identity ever had its permissions
            initialized/loaded, even if the set of permissions is empty.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorized">
            <summary>
            Check the authorization state of this identity across all
            connections.
            </summary>
            <returns>
            'true' if this identity object is successfully authorized
            for at least one of the up connections, and if no authorization
            failure has been received on any other connection.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorized(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Return true if this object was provided a valid authorization for
            the specified <paramref name="connection"/> using the
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetConnectionAuthorization(Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog)"/> function.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorized(Bloomberglp.Blpapi.Service)">
            <summary>
            Return true if the specified <paramref name="service"/> is a
            Bloomberg service or is in the list of enabled services for
            consumption; otherwise return false.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsServiceAuthorized(System.UInt32,System.Boolean)">
            <summary>
            Return true if the specified <paramref name="serviceId"/> is a
            service id of a Bloomberg service or is in the list of enabled
            services for consumption if <paramref name="isConsumer"/> == true or
            for publishing if <paramref name="isConsumer"/> == false; otherwise
            return false.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsServiceCatalogIdAuthorized(System.UInt32,System.Boolean)">
            <summary>
            Return true if the specified <paramref name="serviceCatalogId"/> is
            in the list of enabled services for consumption
            if <paramref name="isConsumer"/> == true or for publishing if
            <paramref name="isConsumer"/> == false; otherwise return false.
            </summary>
            <param name="serviceCatalogId">
            The service catalog id to check.
            </param>
            <param name="isConsumer">
            If true method checks consumer privileges otherwise publisher ones.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorizedToConsume(System.UInt32)">
            <summary>
            Return true if the specified <paramref name="serviceId"/> is in
            the list of enabled services for consumption; otherwise return
            false.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsAuthorizedToProvide(System.UInt32)">
            <summary>
            Return true if the specified <paramref name="serviceId"/> is in
            the list of enabled services for publishing; otherwise return
            false.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.IsVirtualCircuit">
            <summary>
            Return true if this object is associated with a virtual circuit
            authorization service; otherwise (if using a V2 authorization
            service) return false.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SeatType">
            <summary>
            The <see cref="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SeatType"/> of this object. Read-only.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.Bpuid">
            <summary>
            The <see cref="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.Bpuid"/> of this object. Read-only.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.ServerIdentity">
            <summary>
            An <see cref="T:System.AppDomain"/>-unique id for this object. Read-only.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.HasEntitlements(System.Int32[],System.UInt32,System.Nullable{System.UInt32},System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Return true if this object is authorized for all elements in the
            specified <paramref name="entitlements"/> on the specified
            <paramref name="serviceId"/> or
            <paramref name="serviceCatalogId"/>; otherwise fill the array
            specified by <paramref name="failedEntitlements"/> with the
            entitlement IDs that this object is not authorized for and return
            false.
            </summary>
            <param name="entitlements"><see cref="T:Bloomberglp.Blpapi.Element"/> object with a list
            of entitlements to search for.</param>
            <param name="serviceId">A service id.</param>
            <param name="serviceCatalogId">
            A service catalog id of the service.
            </param>
            <param name="failedEntitlements">
            A list to be filled with failed entitlement ids.</param>
            <param name="isConsumer">
            If isConsumer is true method checks consumer privileges otherwise
            publisher ones.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.HasEntitlements(Bloomberglp.Blpapi.Element,System.UInt32,System.Nullable{System.UInt32},System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Return true if this object is authorized for all elements in the
            specified <paramref name="entitlements"/> on the specified
            <paramref name="serviceId"/> for consuming if <paramref
            name="isConsumer"/> is true or publishing if false; otherwise fill
            the array specified by <paramref name="failedEntitlements"/> with
            the entitlement IDs that this object is not authorized for and
            return false.
            </summary>
            <param name="entitlements"><see cref="T:Bloomberglp.Blpapi.Element"/> object with a list
            of entitlements to search for.</param>
            <param name="serviceId">A service id.</param>
            <param name="serviceCatalogId">
            A service catalog id of the service.
            </param>
            <param name="failedEntitlements">
            A list to be filled with failed.
            </param>
            <param name="isConsumer">
            If isConsumer is true method checks consumer privileges otherwise
            publisher ones.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.ReplaceIdentity(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Replace the authorization on the specified
            <paramref name="prolog"/> with the authorization of this object
            for the specified <paramref name="connection"/>.
            </summary>
            <param name="prolog">A <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/>.</param>
            <param name="connection">
            The <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> to select the authorization.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetAuthorized(System.Boolean)">
             <summary>
             Sets the authorized flag to the specified
             <paramref name="isAuthorized"/>, indicating that this identity is
             ready for use in making requests.
            
             This method is only provided for unit testing, normally
             the authorized flag is automatically managed by
             <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.SetAuthorized(System.Boolean)"/> and
             <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.FailConnectionAuthorization(Bloomberglp.Blpapi.Internal.ConnectionContext)"/>.
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl.AppendIdentity(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Append this object's authorization for the specified
            <paramref name="connection"/> to the specified
            <paramref name="prolog"/>.
            </summary>
            <param name="prolog">A <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/>.</param>
            <param name="connection">
            The <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> to select the authorization.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges">
            <summary>
            Entitlement ids and services collection.
            </summary>
            <remarks>
            An object of this class represent a set of privileges. This set of
            privileges consists of a set of entitlement IDs and a set of
            services. This class provides a number of functions to modify the
            object's set of privileges (e.g. <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.AddEntitlementIds(System.Collections.Generic.IList{System.Int32})"/>;
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.AddServiceIds(System.Collections.Generic.IList{System.UInt32})"/>) as well as
            several functions to inspect the set of privileges (e.g.
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.HasEntitlements(Bloomberglp.Blpapi.Element,System.Collections.Generic.List{System.Int32})"/>;
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.HasEntitlements(System.Int32[],System.Collections.Generic.List{System.Int32})"/>;
            <see cref="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.IsPresent(System.UInt32)"/>).
            </remarks>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.NonBloombergServiceMask">
            <summary>
            Service codes for non-BLP services always have this bit set,
            while the codes for blp services never do.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.authorizedServiceIds">
            <summary>
            Service ids of authorized services.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.authorizedServiceCatalogIds">
            <summary>
            Set of authorized service catalog ids.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.entitlementIds">
            <summary>
            Set of authorized entitlements.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.#ctor">
            <summary>
            Create a <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges"/> object containing
            no entitlements or services.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.AddEntitlementIds(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Add the specified <paramref name="eidIds"/> to this object's set of
            enabled entitlement IDs.
            </summary>
            <param name="eidIds">Entitlement ids to be added.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.AddServiceIds(System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Add the specified <paramref name="serviceIds"/> to this object's
            set of enabled services.
            </summary>
            <param name="serviceIds">Service ids to be added.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.AddServiceCatalogIds(System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Add the specified <paramref name="serviceCatalogIds"/> to this object's
            set of enabled service catalog ids.
            </summary>
            <param name="serviceCatalogIds">
            Service catalog ids to be added.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.IsServiceAuthorized(System.UInt32)">
            <summary>
            Return true if the specified <paramref name="serviceId"/> is a
            Bloomberg service or is in this object's set of enabled
            services; otherwise return false.
            </summary>
            <param name="serviceId">A service id.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.IsServiceCatalogIdAuthorized(System.UInt32)">
            <summary>
            Return true if the specified <paramref name="serviceCatalogId"/>
            is in this object's set of enabled service catalog ids; otherwise
            return false.
            </summary>
            <param name="serviceCatalogId">A service catalog id.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.IsPresent(System.UInt32)">
            <summary>
            Return true if the specified <paramref name="serviceId"/> is
            in this object's set of enabled services; otherwise return
            false.
            </summary>
            <param name="serviceId">The service id to look for.</param>
            <returns>
            <c>true</c> if the service is found in the set of authorized
            services; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.HasEntitlements(System.Int32[],System.Collections.Generic.List{System.Int32})">
            <summary>
            Return true if each entitlement id in the specified sequence of
            <paramref name="entitlementIds"/> is in this object's set of
            enabled entitlement IDs; otherwise fill the array specified by
            <paramref name="failedEntitlements"/> with the entitlement IDs
            that this object is not authorized for and return false.
            </summary>
            <param name="entitlementIds">Entitlements ids to check.</param>
            <param name="failedEntitlements">
            A list to be filled with failed entitlement ids.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImplPrivileges.HasEntitlements(Bloomberglp.Blpapi.Element,System.Collections.Generic.List{System.Int32})">
            <summary>
            Return true if each entitlement id in the specified
            <paramref name="entitlements"/> is in this object's set of
            enabled entitlement IDs; otherwise fill the array specified by
            <paramref name="failedEntitlements"/> with the entitlement IDs
            that this object is not authorized for and return false.
            </summary>
            <param name="entitlements">
            <see cref="T:Bloomberglp.Blpapi.Element"/> object with a list of entitlements to
            search for.
            </param>
            <param name="failedEntitlements">
            A list to be filled with failed entitlement ids.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserType">
            <summary>
            Indicates the type of authentication of a <see cref="T:Bloomberglp.Blpapi.AuthUser"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserVisibleRequests">
             <summary>
             ## Representation of Identity States ##
            
             ### Identity Authorized ###
            
             `UserVisibleRequests` will always contain a positive number of
             requests, and an active correlation ID (which is the correlation ID
             corresponding to the requests actually active on the wire).
            
             [When the last request goes away, that correlation ID will be used
             to cancel authorization requests on the wire, and the identity will
             no longer be authorized.]
            
             ### Identity Not Authorized ###
            
             #### `UserVisibleRequests` Has Active Correlation ID ####
            
             The user request with that correlation ID must be present in the
             user requests.  That request is currently pending response(s) from
             the backend.
            
             #### `UserVisibleRequests` Has No Active Correlation ID ####
            
             This indicates that the next request for the identity to have
             `sendAuthorizationRequest` will become the active request (meaning
             that requests dervied from this one will be sent out on the wire).
            
             The most common case is when there are no user requests at all
             (initially, and after the cancellation or failure of a single user
             request for an identity).  It is also possible to have a positive
             number of user requests but no active correlation ID; this state is
             briefly visited when a (user) request fails or is cancelled and
             more user requests have been submitted for that identity.
             </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserVisibleRequests.connectionsToAuthorizeForSuccess">
            <summary>
            Connections to be authorized before we can deliver an
            authorization success event to the user. If a connection is
            present in the map, it was in the initial connection list for
            this user request. If a connection is mapped to 'false', the
            authorization is complete or connection is down. Otherwise the
            authorization is still pending.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserVisibleRequests.GetRequestByCid(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Retrieve an <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.AuthRequestContext"/>
            </summary>
            <param name="cid">Correlation ID to look up</param>
            <returns>The request with the specified correlation ID or
                     <c>null</c> if no such request.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Authorization.ISingleStepAuthorizer">
            <summary>
            Provides mechanism to authorize an identity through one function call.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Authorization.ISingleStepAuthorizer.Authorize(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.Authorization.Implementation.SingleStepAuthCompletionCallback)">
            <summary>
            Authorizes <paramref name="identity"/> asynchronously.
            <paramref name="completionCb"/> is invoked with the result,
            either failure or success.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.BerResponseMessageIterator">
            <summary>
            Summary description for BerResponseMessageIterator.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Bundling.IBundler">
            <summary>
            Represents an object that constructs and sends protocol messages,
            primarily requests used to establish and manipulate subscriptions,
            containing pieces of content specified by the client.
            </summary>
            <remarks>
            The portion of a response that concerns the content will be passed as
            an argument to an invocation of the event of the compatible type. The
            result identifier <see cref="T:System.Int64"/> will match the return value of the
            corresponding include method, therefore correlating the request to the
            response.
            </remarks>
        </member>
        <member name="E:Bloomberglp.Blpapi.Internal.Bundling.IBundler.OnSubscriptionResult">
            <summary>
            This event is raised when a result is received after sending
            <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.Content.SubscriptionRequestContent"/>.
            </summary>
        </member>
        <member name="E:Bloomberglp.Blpapi.Internal.Bundling.IBundler.OnResubscriptionResult">
            <summary>
            This event is raised when a result is received after sending
            <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.Content.ResubscriptionRequestContent"/>.
            </summary>
        </member>
        <member name="E:Bloomberglp.Blpapi.Internal.Bundling.IBundler.OnUnsubscriptionResult">
            <summary>
            This event is raised when a result is received after sending
            <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.Content.UnsubscriptionRequestContent"/>.
            </summary>
        </member>
        <member name="E:Bloomberglp.Blpapi.Internal.Bundling.IBundler.OnResolveAndRouteResult">
            <summary>
            This event is raised when a result is received after sending
            <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.Content.ResolveAndRouteRequestContent"/>.
            </summary>
        </member>
        <member name="E:Bloomberglp.Blpapi.Internal.Bundling.IBundler.OnRouteResult">
            <summary>
            This event is raised when a result is received after sending
            <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.Content.RouteRequestContent"/>.
            </summary>
        </member>
        <member name="E:Bloomberglp.Blpapi.Internal.Bundling.IBundler.OnOpenResult">
            <summary>
            This event is raised when a result is received after sending
            <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.Content.OpenRequestContent"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send">
            <summary>
            Gather the pieces of content provided to this <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.IBundler"/>
            that have been included after the most recent call to <see cref="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send"/>,
            and assemble them into the smallest number of protocol messages
            possible, respecting the constraints noted in this component's
            component-level documentation, and send these messages out on their
            respective connections.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Include(Bloomberglp.Blpapi.Internal.Bundling.Content.SubscriptionRequestContent,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            Include the specified <paramref name="content"/> in the request(s)
            sent by the next call to <see cref="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Include(Bloomberglp.Blpapi.Internal.Bundling.Content.ResubscriptionRequestContent,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            Include the specified <paramref name="content"/> in the request(s)
            sent by the next call to <see cref="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Include(Bloomberglp.Blpapi.Internal.Bundling.Content.UnsubscriptionRequestContent,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            Include the specified <paramref name="content"/> in the request(s)
            sent by the next call to <see cref="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Include(Bloomberglp.Blpapi.Internal.Bundling.Content.ResolveAndRouteRequestContent,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            Include the specified <paramref name="content"/> in the request(s)
            sent by the next call to <see cref="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Include(Bloomberglp.Blpapi.Internal.Bundling.Content.RouteRequestContent,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            Include the specified <paramref name="content"/> in the request(s)
            sent by the next call to <see cref="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Include(Bloomberglp.Blpapi.Internal.Bundling.Content.OpenRequestContent,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            Include the specified <paramref name="content"/> in the request(s)
            sent by the next call to <see cref="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Include(Bloomberglp.Blpapi.Internal.Bundling.Content.CloseContent,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Include the specified <paramref name="content"/> in a 'Close'
            message destined for the specified
            <paramref name="connectionContext"/>, to be sent in the protocol
            message(s) sent by the next call to <see cref="M:Bloomberglp.Blpapi.Internal.Bundling.IBundler.Send"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.Implementation.IRequestContentEncoder.EncodeRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable,Bloomberglp.Blpapi.Internal.Requests.IResponseHandler,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType)">
            <summary>
            Encodes the specified <paramref name="request"/> and packs a new
            <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.Implementation.Components.EncodedRequestWithHandler"/>.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when the codec fails to encode the specified
            <paramref name="request"/>.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Bundling.Implementation.RequestContentEncoder.EncodeRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable,Bloomberglp.Blpapi.Internal.Requests.IResponseHandler,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType)">
            <summary>
            Encodes the specified <paramref name="request"/> and packs a new
            <see cref="T:Bloomberglp.Blpapi.Internal.Bundling.Implementation.Components.EncodedRequestWithHandler"/>.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when the codec fails to encode the specified
            <paramref name="request"/>.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CircularBuffer`1.#ctor(System.Int64,Bloomberglp.Blpapi.Internal.CircularBuffer{`0}.ExpirationCallback,System.Int32)">
            <summary> Create a CircularBuffer object with the specified arguments
            </summary>
             <param name="expirationInterval">Time interval in milliseconds after which items can
             be expired
             </param>
             <param name="expirationCallback">If not null - Callback to be called when each element
             is expired
             </param>
             <param name="initialSizeHint">The initial number of items that can be stored without
             growing
             </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CircularBuffer`1.append(System.Int32,`0,System.Int64,System.Boolean)">
            <summary>Append a new item at the end of the cache.
            </summary>
             <param name="seqNo">The sequence number of the item to be added.
             </param>
             <param name="v">The item to be added to the cache.
             </param>
             <param name="timestamp">The timestamp corresponding to the item.
             </param>
             <param name="forceAdvanceTrail">flag to indicate if the oldest item should be removed
             for space
             </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CircularBuffer`1.get(System.Int32)">
            <summary>
            Get the item corresponding to the specified sequence number
            <param name="seqNo">The sequence number of the item to be found
            </param>
            <returns>The item corresponding to 'seqNo' if found or if seqNo is too old, then the
            newest item which replaced the item being searched or null if the old item had expired
            and no new item has replaced it yet
            </returns>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CircularBuffer`1.lead">
            <summary>
            The sequence number of the most recent item added to the cache
            </summary>
            <returns>The sequence number of the most recent item</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CircularBuffer`1.trail">
            <summary>
            The sequence number of the least recent item added to the cache
            </summary>
            <returns>The sequence number of the least recent item</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CircularBuffer`1.size">
            <summary>
            Get the number of items in the cache
            </summary>
            <returns>The number of items in the cache</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CircularBuffer`1.capacity">
            <summary>
            The number of items which can be stored in the cache without reallocations
            </summary>
            <returns>The capacity of the buffer</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CircularBuffer`1.index(System.Int32)">
            <summary>
            Return the index in d_buffer where the specified sequence number can be found
            </summary>
            <param name="seqNo">The sequence number of the item to be found</param>
            <returns>the requested index in d_buffer</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Common.Utilities.StreamUtilities.ToInputStream(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream)">
            <summary>
            Transforms the provided OutputStream into an InputStream.
            This resets the contents of the OutputStream.
            </summary>
            <param name="stream">The stream to be transformed.</param>
            <returns>
            A new InputStream whose contents are equal to those of the
            provided OutputStream.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.#ctor">
            <summary> Create a new AtomicInteger with the given initial value.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.#ctor(System.Int32)">
            <summary> Create a new AtomicInteger with the given initial value.
            </summary>
            <param name="initialValue">the initial value
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.#ctor(System.UInt32)">
            <summary> Create a new AtomicInteger with the given initial value.
            </summary>
            <param name="initialValue">the initial value
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.get">
            <summary> Get the current value.
            </summary>
            <returns> the current value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.set(System.Int32)">
            <summary> Set to the given value.
            </summary>
            <param name="newValue">the new value
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.getAndSet(System.Int32)">
            <summary> Set to the give value and return the old value.
            </summary>
            <param name="newValue">the new value
            </param>
            <returns> the previous value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.compareAndSet(System.Int32,System.Int32)">
            <summary> Atomically set the value to the given updated value
            if the current value <tt>==</tt> the expected value.
            </summary>
            <param name="expect">the expected value
            </param>
            <param name="update">the new value
            </param>
            <returns> true if successful. False return indicates that
            the actual value was not equal to the expected value.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.weakCompareAndSet(System.Int32,System.Int32)">
            <summary> Atomically set the value to the given updated value
            if the current value <tt>==</tt> the expected value.
            May fail spuriously.
            </summary>
            <param name="expect">the expected value
            </param>
            <param name="update">the new value
            </param>
            <returns> true if successful.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.getAndAdd(System.Int32)">
            <summary> Atomically add the given value to current value.
            </summary>
            <param name="delta">the value to add
            </param>
            <returns> the previous value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.incrementAndGet">
            <summary> Atomically increment by one the current value.</summary>
            <returns> the updated value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.decrementAndGet">
            <summary> Atomically decrement by one the current value.</summary>
            <returns> the updated value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.addAndGet(System.Int32)">
            <summary> Atomically add the given value to current value.
            </summary>
            <param name="delta">the value to add
            </param>
            <returns> the updated value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicInteger.ToString">
            <summary> Returns the String representation of the current value.
            </summary>
            <returns> the String representation of the current value.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.#ctor(System.Int64)">
             <summary> Create a new AtomicLong with the given initial value.
            
             </summary>
             <param name="initialValue">the initial value
             </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.#ctor">
            <summary> Create a new AtomicLong with initial value <tt>0</tt>.</summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.get">
             <summary> Get the current value.
            
             </summary>
             <returns> the current value
             </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.set(System.Int64)">
             <summary> Set to the given value.
            
             </summary>
             <param name="newValue">the new value
             </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.getAndSet(System.Int64)">
             <summary> Set to the give value and return the old value.
            
             </summary>
             <param name="newValue">the new value
             </param>
             <returns> the previous value
             </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.compareAndSet(System.Int64,System.Int64)">
            <summary> Atomically set the value to the given updated value
            if the current value <tt>==</tt> the expected value.
            </summary>
            <param name="expect">the expected value
            </param>
            <param name="update">the new value
            </param>
            <returns> true if successful. False return indicates that
            the actual value was not equal to the expected value.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.weakCompareAndSet(System.Int64,System.Int64)">
            <summary> Atomically set the value to the given updated value
            if the current value <tt>==</tt> the expected value.
            May fail spuriously.
            </summary>
            <param name="expect">the expected value
            </param>
            <param name="update">the new value
            </param>
            <returns> true if successful.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.getAndAdd(System.Int64)">
            <summary> Atomically add the given value to current value.</summary>
            <param name="delta">the value to add
            </param>
            <returns> the previous value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.incrementAndGet">
            <summary> Atomically increment by one the current value.</summary>
            <returns> the updated value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.decrementAndGet">
            <summary> Atomically decrement by one the current value.</summary>
            <returns> the updated value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.addAndGet(System.Int64)">
            <summary> Atomically add the given value to current value.</summary>
            <param name="delta">the value to add
            </param>
            <returns> the updated value
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.Atomic.BlpAtomicLong.ToString">
            <summary> Returns the String representation of the current value.</summary>
            <returns> the String representation of the current value.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Compatibility.Utilities.Concurrent.BlpLinkedBlockingQueue`1">
            <summary>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ConnectionContext">
            <summary>
            Provides a value-semantic connection identifier.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ConnectionContext.#ctor(Bloomberglp.Blpapi.Internal.ConnectionContext.PlatformId,System.Int32)">
            <summary>
            Create an object with the specified 'platformId' and the specified
            'connectionId', which represents the connection attempt count
            across all connections.
            </summary>
            <remarks>
            This constructor should only be used by test drivers.
            </remarks>
            <param name="platformId">Identifier for the platform.</param>
            <param name="connectionId">Identifier for the connection.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ConnectionContext.#ctor(Bloomberglp.Blpapi.Internal.ConnectionContext.PlatformId)">
            <summary>
            Create an object with the specified 'platformId', everytime the
            constructor is called the connectionId is incremented
            </summary>
            <param name="platformId">Identifier for the platform.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ConnectionContext.CompareTo(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Compares this ConnectionContext object to another to determine
            their relative ordering.
            </summary>
            <returns>
            Negative if this object is less than the other, 0 if they are
            equal, or positive if this is
            greater.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ConnectionContext.connectionId">
            <summary>
            The Connection identifier.
            </summary>
            <remarks>
            This is generally a monotonically increasing sequence.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ConstantImpl">
             <summary> Represents a constant value in the data model. The concrete class of
             interface Constant.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ConstantsListImpl">
             <summary> Represents a list of Constant objects in the data model. This is the concrete
             class of interface ConstantList.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ConstraintImpl">
             <summary> Contains a single constraint. This is the concrete class of interface
             Constraint.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ConstraintsListImpl">
             <summary> Contains a list of Constraint objects. This is the concrete class of
             interface ConstraintsList.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.CorrelationRegistry.removeEntryList(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID})">
            <summary>
            Remove the correlation ids from the correlation registry
            </summary>
            <param name="cids">List of CorrelationID to remove from
            registry</param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.DataSetInfo.OngoingUpdateOperation">
            <summary>
            Returns <see cref="F:Bloomberglp.Blpapi.Internal.DataSetInfo.ongoingUpdate"/> operation or,
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.None"/> if <see cref="F:Bloomberglp.Blpapi.Internal.DataSetInfo.ongoingUpdate"/> is
            null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.CreateDataSetInfo(Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.DataSetInfo,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Creates a new <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> based on the provided
            <paramref name="dataSetInfo"/>.
            </summary>
            <param name="subscriptionInfo">
            Determines if the new dataset is for a snapshot subscription.
            </param>
            <param name="dataSetInfo">The original <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> to use.</param>
            <param name="connectionContext">
            The connection where the data set will be ticking.
            </param>
            <returns>
            A new dataset with the same information as
            <paramref name="dataSetInfo"/> except for the
            <see cref="P:Bloomberglp.Blpapi.Internal.DataSetInfo.StreamHandle"/> and <see cref="P:Bloomberglp.Blpapi.Internal.DataSetInfo.StreamId"/>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.CreateDataSetInfo(Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Permissions},Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.EventFilter,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ContentTransform,System.String,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Creates a DataSetInfo with the given parameters.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.CreateDataSetInfo(Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet)">
            <summary>
            Creates a DataSetInfo based on the <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet"/> received
            from the wire.
            </summary>
            <param name="subscriptionInfo">
            Determines if the dataset is for a snapshot subscription.
            </param>
            <param name="service">The service of the DataSetInfo.</param>
            <param name="dataSet">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet"/> from the wire.
            </param>
            <returns>
            A new <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> containing the information
            from the given <paramref name="dataSet"/>.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.SetOngoingUpdate(Bloomberglp.Blpapi.Internal.OperationType,Bloomberglp.Blpapi.Internal.DataSetInfo)">
            <summary>
            Sets the ongoing update representing an in-progress
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Reroute"/>,
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Reresolve"/>,
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Resubscribe"/>,
            or <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.ReresolveWithUts"/> operation.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.SetOngoingUpdate(Bloomberglp.Blpapi.Internal.OperationType,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo})">
            <summary>
            Sets the ongoing update representing an in-progress
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Reroute"/>,
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Reresolve"/>,
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Resubscribe"/>,
            or <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.ReresolveWithUts"/> operation.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.ResetOngoing">
            <summary>
            Sets <see cref="F:Bloomberglp.Blpapi.Internal.DataSetInfo.ongoingUpdate"/> to null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.RemoveFromOngoingUpdate(Bloomberglp.Blpapi.Internal.DataSetInfo)">
            <summary>
            Removes the <paramref name="dataSet"/> from the in-progress
            operation specified by <see cref="F:Bloomberglp.Blpapi.Internal.DataSetInfo.ongoingUpdate"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.DataSetsFromOngoingUpdate">
            <summary>
            Returns <see cref="T:System.Collections.Generic.IList`1"/>. List is empty if
            <see cref="F:Bloomberglp.Blpapi.Internal.DataSetInfo.ongoingUpdate"/> is null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DataSetInfo.OngoingUpdateContainsDataSet(Bloomberglp.Blpapi.Internal.DataSetInfo)">
            <summary>
            Returns true if <see cref="F:Bloomberglp.Blpapi.Internal.DataSetInfo.ongoingUpdate"/> has
            <paramref name="dataSet"/>, false otherwise.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.DeferredRequestManager_Types.DeferredRequestJob">
            <summary>
            Job interface to process a deferred request.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.DeferredRequestManager">
            <remarks>
            Defines an interface to defer processing subscription requests. A
            subscription request is deferred because it service has both
            subscription and request-response operations, and subscription is
            registered but request-response operations are not registered. Extends
            CompletionCallback to be notified of all registration results
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManager.ExecuteOnRegistration(Bloomberglp.Blpapi.Internal.DeferredRequestManager_Types.DeferredRequestJob,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Defers the specified 'request' when registration of service named
            the specified 'serviceName' is partially registered on the
            specified 'ctx' (subscription is registered but request-response is
            not registered), and immediately processes it otherwise.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManager.RegisterationComplete(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <remarks>
            Called to notify service registration is completed on the specified
            'ctx'. The result is the specified 'result', and the specified
            service' is the ServiceImpl object.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManager.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Called to notify the connection pointed by the specified
            'connectionContext' is down. Removes all deferred request jobs on
            the connection.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManager.RemoveJobs(Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Removes all request jobs on the service with the name of the
            specified 'serviceName'. Those removed jobs are not executed.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl">
            <remarks>
            This class manages all requests( currently only subscription requests)
            for publishers that need to be deferred until service registration is
            done. It binds a request into a request processing job and maps service
            names to such request processing jobs. When service registration is
            done, a method is called to execute all request processing jobs for
            this service.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequest">
            <summary>
            This class keeps a single request for publishers in the form of
            request processing job that will be called after service
            registration.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequest.#ctor(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.DeferredRequestManager_Types.DeferredRequestJob)">
            <summary>
            Creates a DeferredRequest object for the request in the
            specified 'request' of the service with the specified
            'serviceName' on the connection pointed by the specified
            'connectionContext'.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequest.ServiceName">
            <summary>
            Gets the service name of this request.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequest.ConnectionContext">
            <summary>
            Gets the connection this request comes from
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequest.Execute">
            <summary>
            Executes the job to process this request.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.ServiceConnectionPair">
            <summary>
            The pair of service name and connection.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequestsMap">
            <summary>
            A map from the pair of service name and connection to all requests
            on this service and connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequestsMap.#ctor">
            <summary>
            Creates a DeferredRequestsMap object.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequestsMap.AddRequest(Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequest)">
            <summary>
            Adds the specified 'request' into this map.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequestsMap.RemoveRequests(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Removes all request on the service with the specified 'serviceName'
            and on the connection pointed by the specified 'ctx', and returns
            all removed requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequestsMap.RemoveRequests(Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Removes all request on the service with the specified
            'serviceName', and returns all removed requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.DeferredRequestsMap.RemoveRequests(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Removes all request on the service with the specified 'serviceName',
            and returns all removed requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.#ctor(Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager,System.Int32)">
            <summary>
            Creates a DeferredRequestManagerImpl object.
            </summary>
            <param name="serviceManager">used to get ServiceImpl objects
            </param>
            <param name="sessionId">for logging</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.RegisterationComplete(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Called to notify service registration is completed.
            </summary>
            <param name="result">
            The result of the service registration.
            </param>
            <param name="service">
            The <see cref="T:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl"/> created.
            </param>
            <param name="ctx">
            The connection where the service was registered.
            </param>
            <param name="guid">
            The request ID of the response which completed the service
            registration.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.ExecuteOnRegistration(Bloomberglp.Blpapi.Internal.DeferredRequestManager_Types.DeferredRequestJob,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Defers the specified 'request' when registration of service named
            the specified 'serviceName' is partially registered on the
            specified 'ctx' (subscription is registered but request-response is
            not registered), and immediately processes it otherwise.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Called to notify the connection pointed by the specified
            'connectionContext' is down. Removes all deferred request jobs on the
            connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.DeferredRequestManagerImpl.RemoveJobs(Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Removes all request jobs on the service with the name of the specified
            'serviceName'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ElementImpl">
             <summary> Represents a field in a message. The implementation class
                       for Element.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImpl.ToString">
            <remarks>
            Print format is as follows:
            <code>
            NameSequence = {
                NameChoice = {
                    NameBool1 = true
                }
                NameSeqArray[] = {
                    NameSeqArray = {
                        NameChar = 'A'
                    }
                    NameSeqArray = {
                        NameInt32 = 123
                    }
                    NameSeqArray = {
                        NameInt64 = 123456789012345
                    }
                    NameSeqArray = {
                        NameFloat32 = 1.23
                    }
                }
                NameDoubleArray[] = {
                    3.123456789, 0.0
                }
                NameEmptyArray[] = {
                }
                NameNullInt =
                NameString = "A string "
                NameEmptyString = ""
                NameNullString =
                NameDateTime = 2012-02-01
                NameEnum = constant1
            }
            </code>
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImpl.elementImplWithoutCreating(System.Int32)">
            Get the subfield by the specified 'order' int the field definitions
            If it is null, return null;
            This doesn't throw exception except unsupported.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImpl.hasName(Bloomberglp.Blpapi.Name)">
            Return true if its name or one of the alternate names is equal to
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImpl.elementImplWithoutCreating(Bloomberglp.Blpapi.Name)">
            This doesn't throw exception except unsupported.
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ElementImplArray">
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ElementImplBit32">
             <summary> Element implementation for type bool, char, float32, int32.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ElementImplBit64">
             <summary> Element implementation for type float64, int64.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ElementImplChoice">
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ElementImplComposite">
             <remarks>
             ElementImplComposite implements a sequence element by extending
             ElementImpl.  It also implements EncodeableSequence interface to make
             it BER encodable.  A sequence contains a list of sub-elements. An
             ElementImplComposite could be null.  Also, its sub-elements may be
             present or not. Those are defined by its SchemaElementDefinitionImpl.
            
             Considering space and time efficiency of this class, the data structure
             ofstoring its sub-elements is varied based on whether
             ElementImplComposite is sparse or not. Here 'sparse' means that in each
             sequence instance of a given SchemaElementDefinitionImpl there are many
             sub-elements but most of them may not be present. It is service schema
             to define whether a sequence is sparse or not in sequence definition.
            
             If a sequence is not 'sparse', an array with size of the number of
             possible sub-elements is allocated to store sub-elements indexed by the
             order of each sub-element in the definition. If an sub-element is
             present, it is referred by the corresponding array element. Otherwise,
             its corresponding array element is null. In addition, an ArrayList is
             used to store present sub-elements ordered by their creation order.
             This order makes all must-be-present sub-elements are in front and
             sorted by the definition order, and other sub-elements are sorted by
             when they are created.
            
             If a sequence is 'sparse', an ArrayList of present sub-elements are
             still there and the same. But an array of all sub-elements references
             are replaced by a map from field ID to sub-element to save allocated
             memory.
             </remarks>
             <author>  Chao Yao(cyao3)</author>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ElementImplComposite.IsComposite">
            <remark>Always return true because this is a sequence.
            </remark>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.SetNull">
            <remark>Always Set the instance to NULL.
             Different from setNull(true) because it Ignores isNullable()
            </remark>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.setNull(System.Boolean)">
            <remark> This not only sets NULL or not NULL, but also constructs
             necessary subfields when changed into not NULL from NULL.
            </remark>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ElementImplComposite.NumElements">
            <summary>
            Return number of sub-elements.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ElementImplComposite.IsNull">
            <summary>
            Return whether this is null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.IsEqualTo(Bloomberglp.Blpapi.Constant,System.Int32)">
            <summary>
            Always return false because this is a sequence.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.FindConstant(Bloomberglp.Blpapi.ConstantsList,System.Int32)">
            <summary>
            Always throw NotFoundException because this is a sequence.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.printProxy(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ProxyWriter)">
            <summary>
            Print this sequence. The printing of sub-elements are ordered
            by definition.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.Equals(System.Object)">
            <summary>
            Return true if its sub-elements are equal to ones of another.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.IsValid">
            <summary>
            Not useful and not tested yet.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.elementImplAt(System.Int32)">
            <summary>
            Return the sub-element at specified 'position', which is an
            index in present fields.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.elementImpl(Bloomberglp.Blpapi.Name)">
            <summary>
            Return the sub-element specified by 'name'. If it doesn't exist,
            create and return it.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.elementImpl(System.String)">
            <summary>
            Return the sub-element specified by 'name'. If it doesn't exist,
            create and return it.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.elementImpl(System.Int32)">
            <summary>
            Return the sub-element specified by field id 'name'. If it doesn't
            exist, create and return it. If 'name' is not in definition. throw
            NotFoundException
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.elementImplWithoutException(System.Int32)">
            <summary>
            Return the sub-element specified by field id 'name'. If it doesn't
            exist, create and return it. If 'name' is not in definition. return
            null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.elementImplWithoutCreating(System.Int32)">
            <summary>
            Return the sub-element specified by field index 'order'. If it
            doesn't exist or 'name' is not in definition, return null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.Reset">
            <summary>
            Clear this element.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.AccessAttribute(Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.AttributeVisitor,System.Int32)">
            <summary>
            Access sub-element by 'visitor', which is specified by field id.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.createAttributes">
            <summary>
            Create all must-be-present sub-elements.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.createAttributeByIndex(System.Int32)">
            <remarks>
            Create sub-element specified by definition index.
            Precondition: the element at 'index' is not created
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ElementImplComposite.AccessAttributes(Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.AttributeVisitor)">
            <summary>
            Access all present sub-elements for encoding.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ElementImplFactory">
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ElementImplObject">
             <summary>
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.EventDispatcherImpl">
            <summary>
            Dispatches events from one or more sessions through callbacks.
            </summary>
            <author>
            Siva Somu (ssomu)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.EventDispatcherImpl.EventDispatcherJobWithExitCode">
            <summary>
            Provides a protocol for items of work for the dispatcher threads.
            </summary>
            <returns>Returns <c>false</c> if the dispatcher thread executing
            this job should stop, and returns <c>true</c> if it should continue 
            executing jobs.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventDispatcherImpl.MultiQueueManager.deleteJobQueue(Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher.QueueId)">
            <summary>
            Delete job queue so that it does not accept any new jobs. The
            jobs already submitted are unchanged by this call.</summary>
            <param name="queueId">
            The queue identifier of the queue to be deleted.</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.EventFactory">
            <summary>
            A factory class to create all kinds of <c>EventImpl</c> objects.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.createSubscriptionDataEvent(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry,Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.SnapshotFunc,System.Boolean,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,System.DateTime,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Creates and returns a subscription data event wrapping the subscription data
            in the specified <c>eventData</c>. The specified <c>dataContextRegistry</c>
            or <c>snapshotFunc</c> provides mapping stream IDs to <c>SubscriptionDataContext</c>
            objects to find the data context to decode subscription data. If the specified
            <c>foldCorrelators</c> is true, one message is returned with all
            <c>CorrelationId</c> objects for one tick message; otherwise, for each
            subscription, a message is returned with its <c>CorrelationId</c> object.
            </summary>
            <param name="dataContextRegistry">The data context registry to look up for decoding
            subscription data if <c>snapshotRunc</c> is not provided nor called</param>
            <param name="snapshotFunc">The functor called to get
            <c>SubscriptionDataContextRegistry</c> and overwrite <c>dataContextRegistry</c>, usually
            when the event is popped from the queue</param>.
            <param name="foldCorrelators"></param>
            <param name="eventData"></param>
            <param name="timeReceived">the time when this event is created</param>
            <param name="ctx">the connection this event is coming from</param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.createAdminEvent(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry,Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.SnapshotFunc,System.Boolean,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Creates and returns a subscription admin data event wrapping the subscription data
            in the specified <c>eventData</c>. The specified <c>dataContextRegistry</c>
            or <c>snapshotFunc</c> provides mapping stream IDs to <c>SubscriptionDataContext</c>
            objects to find the data context to decode subscription data. If the specified
            <c>foldCorrelators</c> is true, one message is returned with all
            <c>CorrelationId</c> objects for one tick message; otherwise, for each
            subscription, a message is returned with its <c>CorrelationId</c> object.
            </summary>
            <param name="dataContextRegistry">The data context registry to look up for decoding
            subscription data if <c>snapshotRunc</c> is not provided nor called</param>
            <param name="snapshotFunc">The functor called to get
            <c>SubscriptionDataContextRegistry</c> and overwrite <c>dataContextRegistry</c>,
            usually when the event is popped from the queue</param>.
            <param name="foldCorrelators"></param>
            <param name="eventData"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.createAdhocResponseEvent(Bloomberglp.Blpapi.Event.EventType,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns an adhoc response event that has the schema attached
            to its event data. The data and schema are in the specified <c>eventData</c>.
            The response has the specified <c>eventType</c>, and is for the request
            indexed by the specified <c>correlationId</c> on the service specified by
            <c>service</c>.
            </summary>
            <param name="eventType">The response event type</param>
            <param name="correlationId">The <c>CorrelationID</c> object indexing the request</param>
            <param name="service">The service of the request</param>
            <param name="eventData">The response data containing response and schema</param>
            <param name="requestGuid">Request id for this response.</param>
            <returns>A response event</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.createBerEvent(Bloomberglp.Blpapi.Event.EventType,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,System.Int32,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a BER-encoded response event. The raw data are in the specified
            <c>eventData</c>. The response has the specified <c>eventType</c>, and is for the
            request indexed by the specified <c>correlationId</c>. Its schema is located by the
            specified <c>eventId</c> in the specified <c>service</c>.
            </summary>
            <param name="eventType">The response event type</param>
            <param name="correlationId">The <c>CorrelationID</c> object indexing the request</param>
            <param name="service">The service of the request</param>
            <param name="eventData">The response data containsing response and schema</param>
            <param name="eventId">The event ID of response in the service</param>
            <param name="requestGuid">Request identifier associated with this response.</param>
            <returns>A response event</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.createBerResponseEvent(Bloomberglp.Blpapi.Event.EventType,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.OperationImpl,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates and returns a ber-encoded response event. The raw data are in the specified
            <c>eventData</c>. The response has the specified <c>eventType</c>, and is for
            the request indexed by the specified <c>correlationId</c>. Its schema is located by the
            specified <c>operation</c> in the specified <c>service</c>.
            </summary>
            <param name="eventType">The response event type</param>
            <param name="correlationId">The <c>CorrelationID</c> object indexing the request</param>
            <param name="service">The service of the request</param>
            <param name="eventData">The response data containing response and schema</param>
            <param name="operation">The operation of response in the service</param>
            <param name="requestGuid">Request id for the response.</param>
            <returns>A response event</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.createSimpleEvent(Bloomberglp.Blpapi.Event.EventType,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.MessageImpl},System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback})">
            <summary>
            Crates and returns a <c>SimpleEventImpl</c> object contaning a collection
            of <c>MessageImpl</c> objects in the specified <c>messages</c> and a collection
            of callbacks in the specified <c>accessCallbacks</c> that are called ususally when
            the event is popped up from the event queue.
            </summary>
            <param name="eventType">The event type</param>
            <param name="messages">The collection of messages in event</param>
            <param name="accessCallbacks">The collection of callbacks associated with event</param>
            <returns>A <c>SimpleEventImpl</c> object</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.createSimpleEvent(Bloomberglp.Blpapi.Event.EventType,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.MessageImpl})">
            <summary>
            Crates and returns a <c>SimpleEventImpl</c> object contaning a collection
            of <c>MessageImpl</c> objects in the specified <c>messages</c>.
            </summary>
            <param name="eventType">The event type</param>
            <param name="messages">The collection of messages in event</param>
            <returns>A <c>SimpleEventImpl</c> object</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.createSimpleEvent(Bloomberglp.Blpapi.Event.EventType,Bloomberglp.Blpapi.Internal.MessageImpl)">
            <summary>
            Crates and returns a <c>SimpleEventImpl</c> object contaning a single
            <c>MessageImpl</c> object specified by <c>message</c>.
            </summary>
            <param name="eventType">The event type</param>
            <param name="message">The <c>MessageImpl</c> object</param>
            <returns>A <c>SimpleEventImpl</c> object</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.getTimeoutEvent">
            <summary>
            Returns the timeout event
            </summary>
            <returns>The timeout event</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.EventFactory.CreateInternalEvent(System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback})">
            <summary>
            Creates and returns an internal event associated with a collection of
            callbacks in the specified <c>accessCallbacks</c>. The event is not exposed
            to blpapi users and only used to call the collection of callbacks when
            <c>InvokeAccessCallbacks</c> get called.
            </summary>
            <param name="accessCallbacks">The list of callbacks</param>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.AbstractEventImpl">
            <summary>
            The abstract implementation of <c>EventImpl</c> providing <c>EventType</c> value.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AbstractEventImpl.#ctor(Bloomberglp.Blpapi.Event.EventType)">
            <summary>
            Initalizes an <c>AbstractEventImpl</c> object having the specified <c>eventType</c>.
            </summary>
            <param name="eventType">The event type</param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.AbstractEventImpl.Type">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TimeoutEvent">
            <summary>
            This class implements a timeout event indicating timout on getting events
            from the event queue.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TimeoutEvent.#ctor">
            <summary>
            Initializes a timeout event object.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TimeoutEvent.IsValid">
            <summary>
            Returns true always
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TimeoutEvent.iterator">
            <summary>
            Returns a null iterator which means this event has no messages and
            cannot be iterated.
            </summary>
            <returns>A null <c>IMessageIterator</c></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SimpleEventImpl">
            <summary>
            This class implements a simple event containing a collection
            of <c>MessageImpl</c> objects and optionally a collection of callbacks
            called when <c>InvokeAccessCallbacks</c> get called.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SimpleEventImpl.#ctor(Bloomberglp.Blpapi.Event.EventType,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.MessageImpl})">
            <summary>
            Initializes a <c>SimpleEventImpl</c> object with the specifie <c>eventType</c>
            containing a collection of <c>MessageImpl</c> objects in the specified <c>messages</c>.
            </summary>
            <param name="eventType">The event type</param>
            <param name="messages">The collection of <c>MessageImpl</c> objects</param>
            <exception cref="T:System.ArgumentNullException">
            Parameters should be non-null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SimpleEventImpl.#ctor(Bloomberglp.Blpapi.Event.EventType)">
            <summary>
            Initializes a SimpleEventImpl object with the specified eventType
            and an empty list of messages and access callbacks.
            </summary>
            <param name="eventType">The event type.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SimpleEventImpl.#ctor(Bloomberglp.Blpapi.Event.EventType,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.MessageImpl},System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback})">
            <summary>
            Initializes a <c>SimpleEventImpl</c> object with the specifie <c>eventType</c>
            containing a collection of <c>MessageImpl</c> objects in the specified <c>messages</c>
            and a collection of callbacks called when <c>InvokeAccessCallbacks</c> get called.
            </summary>
            <param name="eventType">The type of the event.</param>
            <param name="messages">The list of messages.</param>
            <param name="accessCallbacks">
            The list of access callbacks.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Parameters should be non-null.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SimpleEventImpl.IsValid">
            <summary>
            The list of messages is never null as a precondition. Therefore
            this event is always valid.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SimpleEventImpl.iterator">
            <summary>
            Creates and returns a <c>IMessageIterator</c> object for iterating this event.
            </summary>
            <returns>The created <c>IMessageIterator</c> object</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SimpleEventImpl.appendMessage(Bloomberglp.Blpapi.Internal.MessageImpl)">
            <summary>
            Appends the specified <c>msg</c> into this event.
            </summary>
            <param name="msg">The <c>MessageImpl</c> object</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SimpleEventImpl.AppendAccessCallback(Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback)">
            <summary>
            Appends the given <paramref name="callback"/> into the
            collection of callbacks in this event.
            </summary>
            <param name="callback">The callback to add.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SimpleEventImpl.AppendAccessCallbacks(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback})">
            <summary>
            Appends the given list of <paramref name="callbacks"/> into the
            collection of callbacks in this event.
            </summary>
            <param name="callbacks">
            The callbacks to add. This parameter must not be null.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SimpleEventImpl.InvokeAccessCallbacks">
            <summary>
            If the collection of callbacks is not empty, call them one by one.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.InternalEventImpl">
            <summary>
            This class implements an internal event that is not exposed to blpapi users
            but provide a way to call a collection of callbacks.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.InternalEventImpl.#ctor">
            <summary>
            Intializes an empty <c>InternalEventImpl</c> object.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.InternalEventImpl.#ctor(System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback})">
            <summary>
            Intializes an <c>InternalEventImpl</c> object containing the
            specified <c>accessCallbacks</c>
            </summary>
            <param name="accessCallbacks">A collection of callbacks called when
            <c>InvokeAccessCallbacks</c> is called</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.InternalEventImpl.AppendAccessCallback(Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback)">
            <summary>
            Appends the specified <c>cb</c> into the collection of callbacks in this event.
            </summary>
            <param name="cb">The callback</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.InternalEventImpl.iterator">
            <summary>
            Returns null since it is not iterable.
            </summary>
            <returns>null</returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.InternalEventImpl.IsValid">
            <summary>
            Returns true always.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.InternalEventImpl.InvokeAccessCallbacks">
            <summary>
            Calls the callbacks in this event one by one.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.InternalEventImpl.IsInternal">
            <summary>
            Returns ture indicating this event should not exposed to blpapi users.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.AdhocResponseEventImpl">
            <summary>
            This class implements a response event called adhoc response event. The
            schema of adhoc response is received together with its response raw data.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdhocResponseEventImpl.#ctor(Bloomberglp.Blpapi.Event.EventType,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <remarks>Initializes an adhoc response event that has the schema attached
            to its event data. The data and schema are in the specified <c>eventData</c>.
            The response has the specified <c>eventType</c>, and is for the request
            indexed by the specified <c>correlationId</c> on the service specified by <c>service</c>.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.AdhocResponseEventImpl.IsValid">
            <summary>
            Returns whether it is a valid event. If it does not have <c>CorrelationId</c>
            object nor event raw data, it is an invalid event.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.AdhocResponseEventImpl.iterator">
            <summary>
            Returns a <c>IMessageIterator</c> object for iterating messages in this event.
            </summary>
            <returns>A <c>IMessageIterator</c> object</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.BerResponseEventImpl">
            <summary>
            This class implements response event containing BER-encoded raw data.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.BerResponseEventImpl.#ctor(Bloomberglp.Blpapi.Event.EventType,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.SchemaElementDefinitionImpl,System.Boolean,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <remarks>
            Initializes <c>BerResponseEventImpl</c> object. Its raw data are in the specified
            <c>eventData</c>. The response has the specified <c>eventType</c>, and is for the
            request indexed by the specified <c>correlationId</c>. Its schema is the specified
            <c>elementDef</c> in the specified <c>service</c>. If the specified <c>hasSelection</c>
            is true, <c>elementDef</c> is not the top definition but a selection of the top choice
            definition.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.BerResponseEventImpl.IsValid">
            <summary>
            Returns whether it is a valid event. If it does not have <c>CorrelationId</c>
            object, event raw data nor schema, it is an invalid event.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.BerResponseEventImpl.iterator">
            <summary>
            Returns a <c>IMessageIterator</c> object for iterating(decoding) messages in this
            event.
            </summary>
            <returns>A <c>IMessageIterator</c> object</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl">
            <summary>
            This class implements an event containing encoded subscription data.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl.#ctor(Bloomberglp.Blpapi.Event.EventType,Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry,Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.SnapshotFunc,System.Boolean,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,System.DateTime,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Initializes a <c>SubscriptionEventImpl</c> wrapping the subscription data
            in the specified <c>eventData</c>. The specified <c>dataContextRegistry</c>
            or <c>snapshotFunc</c> provides mapping stream IDs to <c>SubscriptionDataContext</c>
            objects to find the data context to decode subscription data. If the specified
            <c>foldCorrelators</c> is true, one message is returned with all
            <c>CorrelationId</c> objects for one tick message; otherwise, for each
            subscription, a message is returned with its <c>CorrelationId</c> object.
            </summary>
            <param name="eventType">The event type that can be SUBSCRIPTION_DATA or ADMIN</param>
            <param name="dataContextRegistry">The data context registry to look up for decoding
            subscription data if <c>snapshotRunc</c> is not provided nor called</param>
            <param name="snapshotFunc">The functor called to get
            <c>SubscriptionDataContextRegistry</c> and overwrite <c>dataContextRegistry</c>, usually
            when the event is popped from the queue</param>.
            <param name="foldCorrelators"></param>
            <param name="eventData"></param>
            <param name="timeReceived">the time when this event is created</param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl.IsValid">
            <summary>
            Returns true always.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl.iterator">
            <summary>
            Returns a <c>IMessageIterator</c> object for iterating(decoding) messages in this
            event.
            </summary>
            <returns>A <c>IMessageIterator</c> object</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl.iteratorForSecureLog">
            <summary>
            Returns a <c>IMessageIterator</c> object for iterating(decoding) messages for secure
            logging. The messages that do not need secure logging are skipped in iterating.
            </summary>
            <returns>A <c>IMessageIterator</c> object</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl.appendToDataLoss(Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl)">
            <summary>
            Appends the information into the specified <c>dataloss</c>. The
            information shows this subscription data is lost.
            </summary>
            <param name="dataLoss">The data loss event into which the loss of this data is appended
            </param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl.createDataLoss">
            <summary>
            Creates and returns a <c>SubscriptionDataLossEventImpl</c> that initially
            has this event as loss.
            </summary>
            <returns><c>ture</c> if success and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl.streamIdIterator">
            <summary>
            Creates and returns <c>SubscriptionDataMsgIterator</c> object to
            iterate and get all stream IDs in this event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionEventImpl.InvokeAccessCallbacks">
            <summary>
            If the snapshot functor passed by constructor is not null,
            call it to get the snaphost of <c>SubscriptionDataContextRegistry</c>
            used for decoding subscription data.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.ElementImplInfo">
            <summary>
            The purpose of the class is to track the sub-elements that have been
            set in an Element so that the same sub-Element can not be set again.
            The idea is that after the first time a sub-Element is set, its
            definition ID is saved in <see cref="F:Bloomberglp.Blpapi.Internal.Events.ElementImplInfo.currSubElementIds"/>. Whenever a
            sub-Element is set, first we see if its definition ID is
            in currSubElementIds.
            In C++ we don't have this class, instead FieldImpl takes cares of
            duplicate set. We can't implement this in <see cref="T:Bloomberglp.Blpapi.Internal.ElementImpl"/>
            because when an Element is added, all the required sub-elements are
            added automatically which makes it hard to know if the sub-Element is
            set or is automatically added. C++ has its own problem, which is, when
            an Element is added, all the required sub-elements are NOT added
            automatically.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Events.ElementImplInfo.currSubElementIds">
            <summary>
            Stores the sub-elements that have been set.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.ElementImplInfo.GetSchemaDefinitionForComplexType(Bloomberglp.Blpapi.Name)">
            <summary>
            Gets the schema for the complex type represented by
            <paramref name="name"/>.
            <exception cref="T:System.NotSupportedException">
            Thrown when the type is not a complex type.
            </exception>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.InitPaintType">
            <summary>
            Can be treated as internal implementation of
            <see cref="T:Bloomberglp.Blpapi.Message.Recap"/>, which is a public facing enum.
            Also this is consistent with C++.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo">
            <summary>
            Provides an interface for storing all the information required to
            create and publish messages.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.Field">
            <summary>
            The field member of this message.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.Depth">
            <summary>
            The depth at which the current message is being formatted.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.IsValid">
            <summary>
            True if this message is valid; false otherwise.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.TickId">
            <summary>
            The tickId associated with this message.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.SequenceNumber">
            <summary>
            The last set sequence number associated with this message.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.Topic">
            <summary>
            The <see cref="T:Bloomberglp.Blpapi.Internal.TopicImpl"/> associated with this message.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.RecapSubType">
            <summary>
            The <see cref="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.RecapSubType"/> associated with this message.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.InitPaintType">
            <summary>
            The <see cref="P:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.InitPaintType"/> associated with this message.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.SetValue(Bloomberglp.Blpapi.Name,System.Boolean)">
            <summary>
            Sets the value specified by <paramref name="value"/> to a
            sub-element specified by <paramref name="name"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.SetValueNull(Bloomberglp.Blpapi.Name)">
            <summary>
            Sets the sub-field specified by <paramref name="name"/> to a
            null value.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.PushElement(Bloomberglp.Blpapi.Name)">
            <summary>
            Creates and sets the element specified by <paramref name="name"/>
            to the top of the stack.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.PopElement">
            <summary>
            Pops stack of active elements.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.AppendValue(System.Boolean)">
            <summary>
            Appends the specified <paramref name="value"/> to the current element.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.AppendElement">
            <summary>
            Appends a complex sub-element to the current element.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo.AppendTick(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionDataMsgFormatter)">
            <summary>
            Appends this tick to the specified
            <paramref name="envelopFormatter"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.MessageAppender">
            <summary>
            Appends messages to <see cref="T:Bloomberglp.Blpapi.Internal.Events.WritableEvent"/> objects.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.MessageAppender.AppendMessage(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Internal.TopicImpl,System.Nullable{System.Int32})">
            <summary>
            Appends a message to the held event.
            </summary>
            <param name="name">The name of the message to be appended.</param>
            <param name="topic">The topic the message pertains to.</param>
            <param name="sequenceNumber">
            The sequence number for the message.
            </param>
            <returns>
            A <see cref="T:Bloomberglp.Blpapi.Internal.Test.MessageFormatter"/> with the newly appended message.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.MessageAppender.AppendRecapMessage(Bloomberglp.Blpapi.Internal.TopicImpl,System.Nullable{System.Int32},Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Similar to <see cref="M:Bloomberglp.Blpapi.Internal.Events.MessageAppender.AppendMessage(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Internal.TopicImpl,System.Nullable{System.Int32})"/>. The difference being the
            name of the recap is already decided from the schema
            (eventIds 9999 and 10000).
            </summary>
            <param name="topic">The topic the message pertains to.</param>
            <param name="sequenceNumber">
            The sequence number for this message.
            </param>
            <param name="correlationId">
            If specified then the recap is a solicited recap else it's an
            unsolicited recap.
            </param>
            <returns>
            A <see cref="T:Bloomberglp.Blpapi.Internal.Test.MessageFormatter"/> with the newly appended message.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.MessageAppender.AppendResponse(Bloomberglp.Blpapi.Name)">
            <summary>
            Appends a response to the event.
            <para>
            Calling this method on an event other than of type
            <see cref="T:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl"/> is a failure.
            </para>
            <para>
            If this operation succeeds, a new element is added and subsequent
            set/append calls will operate on the newly inserted element.
            </para>
            </summary>
            <param name="name">
            The name of the message to append.
            </param>
            <returns>
            A <see cref="T:Bloomberglp.Blpapi.Internal.Test.MessageFormatter"/> with the newly appended message.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.MessageAppender.AppendFragmentedRecapMessage(Bloomberglp.Blpapi.Internal.TopicImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Message.Fragment,Bloomberglp.Blpapi.Name,System.Nullable{System.Int32})">
            <summary>
            Fragmented recaps may be supported in the future. For that reason
            this method is kept but made private.
            </summary>
            <param name="topic">The topic this message pertains to.</param>
            <param name="correlationId">
            If specified then the recap is a solicited recap else it's an
            unsolicited recap.
            </param>
            <param name="fragmentType">
            The type of fragmented recap being appended.
            </param>
            <param name="name">The name of the message to append.</param>
            <param name="sequenceNumber">
            The sequence number for the message.
            </param>
            <returns>
            A <see cref="T:Bloomberglp.Blpapi.Internal.Test.MessageFormatter"/> with the newly appended message.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl">
            <summary>
            Represents a response event for publishers to answer incoming requests.
            <para>
            Contains response data in form of <see cref="T:Bloomberglp.Blpapi.Internal.MessageImpl"/>. Keeps a
            <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to map the incoming request and
            <see cref="T:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl"/> for response schema.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl.#ctor(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Events.ResponseType)">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.Event"/> that can be used for responding to
            <see cref="F:Bloomberglp.Blpapi.Internal.AdminEvents.AdminEventsUtil.PermissionRequest"/>.
            </summary>
            <param name="correlationId">
            The <see cref="P:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl.CorrelationId"/> of the request for which this
            event is the response.
            </param>
            <param name="service">
            The service pertaining to the request/response.
            </param>
            <param name="responseType">
            Indicates if this is a partial or final response.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl.Operation">
            <summary>
            The operation for this response event, or null if the event is
            empty or if the message is of type <see cref="F:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl.PermissionResponse"/>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl.IsPermissionResponse">
            <summary>
            True if this event has a response of type
            <see cref="F:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl.PermissionResponse"/>; false otherwise.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoExtended2Flags">
            <summary>
            This class stores information for the 'extended2' flags associated with a
            published message.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoExtended2Flags.HasExtraFlags">
            <summary>
            True if the 'extended2' header bits have the publisher ID, data
            source ID and group ID bits set.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoExtended2Flags.Extended2Flags">
            <summary>
            The 'extended2' header bits that are set for the published message.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoFlat">
            <summary>
            This class represents a mechanism optimized for storing all the
            information required to create and publish a self describing message
            (flat).
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoFlat.rootElement">
            <summary>
            This is of type <see cref="T:Bloomberglp.Blpapi.Internal.Events.ElementImplInfo"/> so that we can
            prevent the same element from being set again. The real
            <see cref="T:Bloomberglp.Blpapi.Internal.ElementImpl"/> is wrapped inside
            <see cref="T:Bloomberglp.Blpapi.Internal.Events.ElementImplInfo"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoGeneric">
            <summary>
            This class represents a mechanism optimized for storing all the
            information required to create and publish complex messages such as
            arrays, sequences, enums, and choices.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoGeneric.#ctor(Bloomberglp.Blpapi.Internal.ElementImpl,System.Int32,System.Nullable{System.Int32},Bloomberglp.Blpapi.Internal.TopicImpl,Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoExtended2Flags,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Creates an instance which can represent generic messages.
            </summary>
            <param name="rootElement">
            The element which will contain the message's information.
            </param>
            <param name="tickId">
            The tick id of the message.
            </param>
            <param name="sequenceNumber">
            Can specify the sequence number for this message.
            </param>
            <param name="topic">
            The topic this message pertains to.
            </param>
            <param name="extended2Flags">
            The flags that contain information about this message, such as
            <see cref="T:Bloomberglp.Blpapi.Internal.Events.InitPaintType"/> and <see cref="T:Bloomberglp.Blpapi.Internal.Events.RecapSubType"/>.
            </param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> of the subscription this
            message may pertain to.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.PublishMessageInfoHeader">
            <summary>
            This class defines a value semantic type which stores information associated
            with the published messages.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.RecapSubType">
            <summary>
            Can be treated as internal implementation of
            <see cref="T:Bloomberglp.Blpapi.Message.Fragment"/>, which is a public facing enum.
            Also this is consistent with C++.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.ResponseType">
            <summary>
            Indicates if an <see cref="T:Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl"/> is of type
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.PARTIAL_RESPONSE"/> or
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.WritableContributionEvent">
            <summary>
            Contains messages/ticks formatted by the user with the intent of
            publishing.
            <para>
            An instance of this type is created when the user calls
            <see cref="M:Bloomberglp.Blpapi.Service.CreatePublishEvent"/> if the service is a
            contribution service.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.WritableEvent">
            <summary>
            Base class for writable events which a user can generate through our
            public interface (e.g.
            <see cref="M:Bloomberglp.Blpapi.Service.CreatePublishEvent"/> or
            <see cref="M:Bloomberglp.Blpapi.Test.TestUtil.CreateEvent(Bloomberglp.Blpapi.Event.EventType)"/>).
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Events.WritableEvent.Messages">
            <summary>
            The list of messages (i.e ticks) contained in this event.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.WritableEvent.AppendMessage(Bloomberglp.Blpapi.Internal.TopicImpl,Bloomberglp.Blpapi.Name,System.Nullable{System.Int32})">
            <summary>
            Appends a message.
            </summary>
            <param name="topic">
            The topic this message pertains to.
            </param>
            <param name="messageType">
            The type of message to append.
            </param>
            <param name="sequenceNumber">
            Optional sequence number for the message.
            </param>
            <returns>The appended message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.WritableEvent.AppendRecapMessage(Bloomberglp.Blpapi.Internal.TopicImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Events.RecapSubType,Bloomberglp.Blpapi.Name,System.Nullable{System.Int32})">
            <summary>
            Appends a recap message.
            </summary>
            <param name="topic">
            The topic the message pertains to.
            </param>
            <param name="correlationId">
            If specified it means the recap is a
            <see cref="F:Bloomberglp.Blpapi.Internal.Events.InitPaintType.SolicitedInitPaint"/>. Otherwise the recap
            is an <see cref="F:Bloomberglp.Blpapi.Internal.Events.InitPaintType.InitPaint"/>.
            </param>
            <param name="recapSubType">
            The type of recap to be appended.
            </param>
            <param name="name">
            If specified the message is named using the specified
            <paramref name="name"/>, otherwise eventId
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.TickTypes.RECAP_TICK_TYPE"/> is used for a solicited
            recap message, and eventId
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.TickTypes.FORCED_RECAP_TICK_TYPE"/> for an unsolicited
            recap message.
            </param>
            <param name="sequenceNumber">
            /// Optional sequence number for the message.
            </param>
            <returns>The appended recap message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.WritableEvent.SetResponseMessage(Bloomberglp.Blpapi.Name)">
            <summary>
            Creates a new response message and adds it to this event.
            <para>
            This operation will fail if this event contains other messages.
            </para>
            </summary>
            <param name="responseType">
            The name of the response to be added.
            </param>
            <returns>The added message.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.WritableGenericEvent">
            <summary>
            Provides an <see cref="T:Bloomberglp.Blpapi.Event"/> for creating generic messages.
            <para>
            Holds generic messages with almost no checks. An instance of this type
            is created via <see cref="M:Bloomberglp.Blpapi.Test.TestUtil.CreateEvent(Bloomberglp.Blpapi.Event.EventType)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.WritableGenericEvent.AppendGenericMessage(Bloomberglp.Blpapi.Internal.SchemaElementDefinitionImpl,Bloomberglp.Blpapi.Test.MessageProperties)">
            <summary>
            Creates and appends a message.
            </summary>
            <param name="schema">
            The schema the message will follow.
            </param>
            <param name="properties">
            The properties for the message that will be appended.
            </param>
            <returns>
            The appended message.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Events.WritableSubscriptionEvent">
            <summary>
            Provides an <see cref="T:Bloomberglp.Blpapi.Event"/> for creating subscription messages such
            as ticks and recaps.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Events.WritableSubscriptionEvent.solicitedRecapMessages">
            <summary>
            The list of solicited recap messages contained in this event.
            <para>
            It is not possible to query individual messages
            <see cref="T:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo"/> to see if they are a solicited
            recap message or not.That is why we are keeping track of these
            here.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Events.WritableSubscriptionEvent.AppendRecapMessage(Bloomberglp.Blpapi.Internal.TopicImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Events.RecapSubType,Bloomberglp.Blpapi.Name,System.Nullable{System.Int32})">
            <summary>
            Appends a recap message.
            </summary>
            <param name="topic">
            The topic the message pertains to.
            </param>
            <param name="correlationId">
            If specified it means the recap is a
            <see cref="F:Bloomberglp.Blpapi.Internal.Events.InitPaintType.SolicitedInitPaint"/>. Otherwise the recap
            is an <see cref="F:Bloomberglp.Blpapi.Internal.Events.InitPaintType.InitPaint"/>.
            </param>
            <param name="recapSubType">
            The type of recap to be appended.
            </param>
            <param name="recapNameOverride">
            If specified the message is named using the specified
            <paramref name="recapNameOverride"/>, otherwise eventId
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.TickTypes.RECAP_TICK_TYPE"/> is used for a solicited
            recap message, and eventId
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.TickTypes.FORCED_RECAP_TICK_TYPE"/> for an unsolicited
            recap message.
            </param>
            <param name="sequenceNumber">
            Optional sequence number for the message.
            </param>
            <returns>The appended recap message.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.DateTimeType">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable">
            <summary>
            Provides methods to encode and decode an object.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodableArray">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.ObjectAttributeManipulator">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.ObjectAttributeVisitor">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.CodecXmlDeserializer">
            <summary>
            Creates and populates object instances from xml.
            <para>
            This class is not thread safe. There is state which is built up
            and used throughout multiple methods, and this state would be
            overwritten by a concurrent call.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.CodecXmlDeserializer.CreateWithSharedCache">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.CodecXmlDeserializer"/> instance which uses
            a shared static <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.Implementation.CodecXmlReflectionCache"/>.
            <para>
            This is best for performance, but this can make unit testing
            non-deterministic,.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.CodecXmlDeserializer.CreateWithIsolatedCache">
            <summary>
            Creates an <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.CodecXmlDeserializer"/> instance which uses
            a new isolated <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.Implementation.CodecXmlReflectionCache"/>.
            <para>
            This constructor is useful for unit testing because the
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.Implementation.CodecXmlReflectionCache"/> cache will not persist across
            test cases.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.CodecXmlDeserializer.Deserialize``1(System.String)">
            <summary>
            Deserializes an instance of the specified type
            <typeparamref name="T"/> from the specified <see cref="T:System.String"/>
            containing an <paramref name="xml"/> document.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.CodecXmlDeserializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes an instance of the specified type
            <typeparamref name="T"/> from the specified <see cref="T:System.IO.Stream"/>
            containing an <paramref name="xml"/> document.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Xml.CodecXmlDeserializer.Deserialize``1(System.IO.TextReader)">
            <summary>
            Deserializes an instance of the specified type
            <typeparamref name="T"/> from the specified
            <see cref="T:System.IO.TextReader"/> which must provide an xml document that
            is compatible with the specified type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.HashSetList`1">
            <summary>
            Provides an ordered sequence of objects that are unique.
            </summary>
            <remarks>
            <para>
            This container is not suitable for large value types, as each value
            is stored more than once. Consider explicit boxing in those cases.
            </para>
            <para>
            This container is not as efficient as either a <see cref="T:System.Collections.Generic.HashSet`1"/>
            or a <see cref="T:System.Collections.Generic.List`1"/> alone. You should only use this container
            if you require an ordered and unique sequence of items.
            </para>
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySet`1">
            <summary>
            Defines a read-only unordered container of objects that are unique.
            </summary>
            <remarks>
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySet`1"/> has never been introduced in the
            .NET Framework. In the future, this interface may be removed in favor
            of a framework equivalent, if one is ever made available.
            Efficient sequential access by enumeration and random access by value
            are supported.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySetList`1">
            <summary>
            Defines a read-only ordered container of objects that are unique.
            </summary>
            <remarks>
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySetList`1"/> has never been introduced in the .NET
            Framework. In the future, this interface may be removed in favor of
            a framework equivalent, if one is ever made available. Efficient
            sequential access by enumeration and random access by value and index
            are available.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.ISetList`1">
            <summary>
            Defines an ordered container of objects that are unique.
            </summary>
            <remarks>
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.ISetList`1"/> has never been introduced in the .NET
            Framework. In the future, this interface may be removed in favor of
            a framework equivalent, if one is ever made available. Efficient
            sequential access by enumeration and random access by value and index
            are available.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.NestedDictionary`3">
            <summary>
            NestedDictionary is a class that abstracts the nested "dictionary of dictionaries"
            data structure.
            </summary>
            <typeparam name="TKey1">Key of the higher level dictionary.</typeparam>
            <typeparam name="TKey2">Key of the lower level dictionary.</typeparam>
            <typeparam name="TValue">The type of the value of the lower-level dictionary.</typeparam>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.NestedDictionary`3.Contains(`0)">
            <summary>
            Determines whether the higher-level dictionary contains <paramref name="key1"/>.
            </summary>
            <param name="key1">Key to look for in the higher-level dictionary.</param>
            <returns>True if <paramref name="key1"/> exists, false otherwise.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.NestedDictionary`3.Contains(`0,`1)">
            <summary>
            Determines whether the higher-level dictionary contains the entry where
            the key is <paramref name="key1"/> and the lower-level dictionary contains
            <paramref name="key2"/>.
            </summary>
            <param name="key1">Key to look for in the higher-level dictionary.</param>
            <param name="key2">Key to look for in the lower-level dictionary.</param>
            <returns>True if the entry exists, false otherwise.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.NestedDictionary`3.Add(`0,`1,`2)">
            <summary>
            Adds a new entry where the higher-level dictionary key is <paramref name="key1"/> and
            lower-level dictionary key and value are <paramref name="key2"/> and <paramref name="value"/>.
            If <paramref name="key1"/> already exists in the higher-level dictionary, it will
            be grabbed. Otherwise a new entry with <paramref name="key1"/> and empty lower-level
            dictionary as value will be created.
            If the lower-level dictionary associated with <paramref name="key1"/> already contains
            an entry with <paramref name="key2"/> as key, ArgumentException will be thrown.
            </summary>
            <param name="key1">Key to add to the higher-level dictionary.</param>
            <param name="key2">Key to add to the lower-level dictionary.</param>
            <param name="value">Value to add to the lower-level dictionary.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.NestedDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            Gets the value associated with the specified <paramref name="key1"/> in the
            higher-level dictionary and <paramref name="key2"/> in the lower-level dictionary.
            </summary>
            <param name="key1">Key to look for in the higher-level dictionary.</param>
            <param name="key2">Key to look for in the lower-level dictionary.</param>
            <param name="value">
            When this method returns, contains the value associated with the
            specified <paramref name="key1"/> and <paramref name="key2"/>, if the keys
            are found. Otherwise, the default value for the type of the value parameter.
            </param>
            <returns>True if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.NestedDictionary`3.TryGetValue(`0,System.Collections.Generic.Dictionary{`1,`2}@)">
            <summary>
            Gets the lower-level dictionary associated with the specified <paramref name="key1"/>
            in the higher-level dictionary
            </summary>
            <param name="key1">Key to look for in the higher-level dictionary.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified
            <paramref name="key1"/>, if the key was found in the higher-level dictionary.
            Otherwise, the default value for the type of the lower-level dictionary.
            </param>
            <returns>True if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.NestedDictionary`3.Remove(`0)">
            <summary>
            Removes the entry with the specified <paramref name="key1"/> from the higher-level
            dictionary.
            </summary>
            <param name="key1">Key to look for in the higher-level dictionary.</param>
            <returns>
            True if the element is successfully found and removed, false
            otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.NestedDictionary`3.Remove(`0,`1)">
            <summary>
            Removes the entry associated with the specified <paramref name="key1"/> in the
            higher-level dictionary and <paramref name="key2"/> in the lower-level dictionary.
            </summary>
            <param name="key1">Key to look for in the higher-level dictionary.</param>
            <param name="key2">Key to look for in the lower-level dictionary.</param>
            <returns>
            True if the element is successfully found and removed, false
            otherwise.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.SetWrapper`1">
            <summary>
            A pass-through wrapper for an <see cref="T:System.Collections.Generic.ISet`1"/> to implement the
            provided <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySet`1"/> interface.
            </summary>
            <remarks>
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySet`1"/> has never been introduced in the
            .NET Framework. In the future, this class may be unnecessary.
            Because this class also implements <see cref="T:System.Collections.Generic.ISet`1"/>, it is generally
            possible and intended that you can simply create an instance of this class
            and treat this exactly as though it were a read/write set within the
            immediate context where you would want to populate the set before
            returning it as a read-only set.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.Wrapper">
            <summary>
            Defines a set of quick methods for creating empty (or populated) collection wrappers.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.Wrapper.Set``1">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.SetWrapper`1"/>.
            </summary>
            <remarks>
            The underlying set will be a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.Wrapper.Set``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Collections.SetWrapper`1"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.LazyInstance`1">
            <summary>
            The point of this class is to protect a lazily initialized
            field from modification since it is not readonly.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Components.ManualReferenceCounter.IncrementReferenceCount">
            <summary>
            Increases the reference count by one.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Components.ManualReferenceCounter.QueueReferenceDecrement">
            <summary>
            Queues a decrement in the reference count to be applied later.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Components.ManualReferenceCounter.DecrementReferenceCountByQueuedAmount">
            <summary>
            Decreases the reference count by the queued amount.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Components.ManualReferenceCounter.DecrementReferenceCount">
            <summary>
            Instantly decrements the reference count by one.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Components.ManualReferenceCounter.OnAllReferencesExhausted">
            <summary>
            Will be invoked once all references have been removed from this
            object.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.Once">
            <summary>
            Provides a convenient thread safe way to act only once.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Components.Once.EnsureComplete(System.Action)">
            <summary>
            Ensures that the specified <paramref name="action"/> is completed
            once and only once.
            </summary>
            <param name="action">
            The work that must be done only once.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.Once`1">
            <summary>
            Provides a convenient thread safe way to act only once for a given key.
            </summary>
            <typeparam name="TKey">
            The type of the key that is to be used to determine whether the operation
            has already been done or is currently being done.
            <para>
            Pay attention to how equality works for the type you specify because this
            class assumes the key has a sane notion of uniqueness and can be used as
            a key in a set.
            </para>
            </typeparam>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Components.Once`1.EnsureComplete(`0,System.Action{`0})">
            <summary>
            Ensures that the specified <paramref name="action"/> is completed
            once and only once per <typeparamref name="TKey"/>.
            </summary>
            <param name="key">
            A unique identifier for which an action must only be completed
            once.
            </param>
            <param name="action">
            The work that must be done only once for the specified key.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.IOptional`1">
            <summary>
            Represents a single-item container that may or may not have a value.
            </summary>
            <remarks>
            The purpose of this type is to provide a uniform surface for value and
            reference types that may or may not exist.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Components.IOptional`1.HasValue">
            <summary>
            Gets whether a value is present in the container.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Components.IOptional`1.Value">
            <summary>
            Gets the value that is currently in the container.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws when <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Components.IOptional`1.HasValue"/> is null.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.OptionalStruct`1">
            <summary>
            Provides a single-item value type container that may or may not have a value.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.OptionalClass`1">
            <summary>
            Provides a single-item reference type container that may or may not have a value.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.EmptyOptional`1">
            <summary>
            Provides an empty container that never has a value. Because there is no
            value, there is no class or struct constraint required, which makes
            this useful for generics which don't know if their own type argument is
            a class or a struct.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.PeekEnumerator`1">
            <summary>
            Provides one element of lookahead for an enumerator.
            </summary>
            <remarks>
            This class takes responsibility for disposing the source enumerator.
            You must dispose this class when finished with it.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.ReferenceEqual`1">
            <summary>
            Provides a semantic wrapper to make it very clear that reference
            equality and reference hashing are intentional.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Components.Union`2">
            <summary>
            Represents a container for either one or the other of two possible
            values.
            <para>
            For reference types, a value may be null, and that still is mutually
            exclusive with the other value being present.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.BestCompression">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.BestSpeed">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.DefaultCompression">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.NoCompression">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.Deflated">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NoCompression
            and BestCompression, or DefaultCompression.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NoCompression
            and BestCompression.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput().
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.SetStrategy(Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for SharpZipLib.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with serialized data.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.StreamDecodingException">
            <summary>
            Indicates that an error occured during decoding of a input stream due to corrupt
            data or (unintentional) library incompability.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.StreamDecodingException.#ctor">
            <summary>
            Initializes a new instance of the StreamDecodingException with a generic message
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.StreamDecodingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StreamDecodingException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.StreamDecodingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the StreamDecodingException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.StreamDecodingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the StreamDecodingException class with serialized data.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.ValueOutOfRangeException">
            <summary>
            Indicates that a value was outside of the expected range when decoding an input stream
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.ValueOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ValueOutOfRangeException class naming the the causing variable
            </summary>
            <param name="nameOfValue">Name of the variable, use: nameof()</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.ValueOutOfRangeException.#ctor(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the ValueOutOfRangeException class naming the the causing variable,
            it's current value and expected range.
            </summary>
            <param name="nameOfValue">Name of the variable, use: nameof()</param>
            <param name="value">The invalid value</param>
            <param name="maxValue">Expected maximum value</param>
            <param name="minValue">Expected minimum value</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.ValueOutOfRangeException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ValueOutOfRangeException class naming the the causing variable,
            it's current value and expected range.
            </summary>
            <param name="nameOfValue">Name of the variable, use: nameof()</param>
            <param name="value">The invalid value</param>
            <param name="maxValue">Expected maximum value</param>
            <param name="minValue">Expected minimum value</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.ValueOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ValueOutOfRangeException class with serialized data.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32">
             <summary>
             Computes Adler32 checksum for a stream of data. An Adler32
             checksum is not as reliable as a CRC32 checksum, but a lot faster to
             compute.
            
             The specification for Adler32 may be found in RFC 1950.
             ZLIB Compressed Data Format Specification version 3.3)
            
            
             From that document:
            
                  "ADLER32 (Adler-32 checksum)
                   This contains a checksum value of the uncompressed data
                   (excluding any dictionary data) computed according to Adler-32
                   algorithm. This algorithm is a 32-bit extension and improvement
                   of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                   standard.
            
                   Adler-32 is composed of two sums accumulated per byte: s1 is
                   the sum of all bytes, s2 is the sum of all s1 values. Both sums
                   are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                   Adler-32 checksum is stored as s2*65536 + s1 in most-
                   significant-byte first (network) order."
            
              "8.2. The Adler-32 algorithm
            
                The Adler-32 algorithm is much faster than the CRC32 algorithm yet
                still provides an extremely low probability of undetected errors.
            
                The modulo on unsigned long accumulators can be delayed for 5552
                bytes, so the modulo operation time is negligible.  If the bytes
                are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
                and order sensitive, unlike the first sum, which is just a
                checksum.  That 65521 is prime is important to avoid a possible
                large class of two-byte errors that leave the check unchanged.
                (The Fletcher checksum uses 255, which is not prime and which also
                makes the Fletcher check insensitive to single byte changes 0 -
                255.)
            
                The sum s1 is initialized to 1 instead of zero to make the length
                of the sequence part of s2, so that the length does not have to be
                checked separately. (Any sequence of zeroes has a Fletcher
                checksum of zero.)"
             </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32.checkValue">
            <summary>
            The CRC data checksum so far.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32"></see>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32.Reset">
            <summary>
            Resets the Adler32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32.Update(System.Byte[])">
            <summary>
            Updates the Adler32 data checksum with the bytes taken from
            a block of data.
            </summary>
            <param name="buffer">Contains the data to update the checksum with.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.Checksum.Adler32.Update(System.ArraySegment{System.Byte})">
            <summary>
            Update Adler32 data checksum based on a portion of a block of data
            </summary>
            <param name = "segment">
            The chunk of data to add
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.Debugging">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.StoredBlock">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.StaticTrees">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.DynTrees">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.PresetDict">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.DefaultMemLevel">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.MaxMatch">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.MinMatch">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.MaxWBits">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.WSize">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.WMask">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.HashBits">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.HashSize">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.HashMask">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.HashShift">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.MinLookahead">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.MaxDist">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.PendingBufSize">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.DeflateStored">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.DeflateFast">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.DeflateSlow">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.MaxBlockSize">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.GoodLength">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.MaxLazy">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.NiceLength">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.MaxChain">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterConstants.ComprFunc">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMask]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.#ctor(Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            Adler calculation will be peformed
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.#ctor(Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterPending,System.Boolean)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>
            <param name="noAdlerCalculation">
            If no adler calculation should be performed
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflateStrategy">deflate strategy</see>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>
            <returns>Return true if input is needed via <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + DeflaterConstants.MaxMatch &lt;= window.length.</code>
             </summary>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman">
             <summary>
             This is the DeflaterHuffman class.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of Deflate and SetInput.
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.#ctor(Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree.CalcBLFreq(Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree.WriteTree(Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterPending">
             <summary>
             This class stores the pending output of the Deflater.
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterDynHeader.LiteralLengthTree">
            <summary>
            Get literal/length huffman tree, must not be used before <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterDynHeader.AttemptRead"/> has returned true
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.StreamDecodingException">If hader has not been successfully read by the state machine</exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterDynHeader.DistanceTree">
            <summary>
            Get distance huffman tree, must not be used before <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterDynHeader.AttemptRead"/> has returned true
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.StreamDecodingException">If hader has not been successfully read by the state machine</exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterDynHeader.AttemptRead">
            <summary>
            Continue decoding header from <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterDynHeader.input"/> until more bits are needed or decoding has been completed
            </summary>
            <returns>Returns whether decoding could be completed</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterHuffmanTree.#ctor(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterHuffmanTree.DefLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterHuffmanTree.DefDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.InflaterHuffmanTree.GetSymbol(Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.CopyStored(Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer">
             <summary>
             This class is general purpose class for writing data to a buffer.
            
             It allows you to write bits as well as bytes
             Based on DeflaterPending.java
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.buffer">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.TryGetBits(System.Int32,System.Int32@,System.Int32)">
            <summary>
            Tries to grab the next <paramref name="bitCount"/> bits from the input and
            sets <paramref name="output"/> to the value, adding <paramref name="outputOffset"/>.
            </summary>
            <returns>true if enough bits could be read, otherwise false</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.TryGetBits(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Tries to grab the next <paramref name="bitCount"/> bits from the input and
            sets <paramref name="index"/> of <paramref name="array"/> to the value.
            </summary>
            <returns>true if enough bits could be read, otherwise false</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Implementation.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
            
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream.
            Only valid if mode is DecodeDictState or DecodeChksumState.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DecodeDictState, DecodeChksumState,
            DecodeHuffmanLenBitsState or DecodeHuffmanDistBitsState.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or
            footer.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.#ctor(System.Boolean)">
             <summary>
             Creates a new inflater.
             </summary>
             <param name="noHeader">
             True if no RFC1950/Zlib header and footer fields are expected in the input data
            
             This is used for GZIPed/Zipped input.
            
             For compatibility with
             Sun JDK you should provide one byte of input more than needed in
             this case.
             </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput().
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.SharpZipLib.Exceptions.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream">
            <summary>
            Provides zlib or bare deflate compression over an existing
            <see cref="T:System.IO.Stream"/>.
            <para>
            This class is not thread safe, but reading and writing are isolated
            from each other and safe to operate concurrently to the extent that
            the inner <see cref="T:System.IO.Stream"/> is.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Provides bidirectional zlib compression over an underlying stream.
            </summary>
            <param name="innerStream">
            The underlying stream that compressed data will be written to and read from.
            </param>
            <param name="level">The zlib compression level that should be used.</param>
            <param name="noZlibHeaderOrFooter">
            Specifies whether a zlib header should be written when this class
            is constructed and whether a zlib footer should be written when
            this class is disposed. Also specifies whether a zlib header should
            be expected as the first data read from the underlying
            <see cref="T:System.IO.Stream"/> and whether a zlib footer should be expected
            at the end of the data read from the underlying
            <see cref="T:System.IO.Stream"/>.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Provides bidirectional zlib compression over an underlying stream.
            </summary>
            <param name="innerStream">
            The underlying stream that compressed data will be written to and read from.
            </param>
            <param name="level">The zlib compression level that should be used.</param>
            <param name="leaveInnerStreamOpen">
            Specifies whether the inner stream should be left open or disposed
            when this stream is closed or disposed.
            </param>
            <param name="noZlibHeaderOrFooter">
            Specifies whether a zlib header should be written when this class
            is constructed and whether a zlib footer should be written when
            this class is disposed. Also specifies whether a zlib header should
            be expected as the first data read from the underlying
            <see cref="T:System.IO.Stream"/> and whether a zlib footer should be expected
            at the end of the data read from the underlying
            <see cref="T:System.IO.Stream"/>.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Provides bidirectional zlib compression over an underlying stream.
            <para>
            This overload is to be used when there are bytes that were already
            read (prematurely) out of the inner stream that need to be run
            through the inflater. This occurs because we read in fixed size
            chunks without regard to how much we need for the very next
            message, and this means we can over-read beyond the start of
            compression.
            </para>
            </summary>
            <param name="innerStream">
            The underlying stream that compressed data will be written to and read from.
            </param>
            <param name="level">The zlib compression level that should be used.</param>
            <param name="leaveInnerStreamOpen">
            Specifies whether the inner stream should be left open or disposed
            when this stream is closed or disposed.
            </param>
            <param name="noZlibHeaderOrFooter">
            Specifies whether a zlib header should be written when this class
            is constructed and whether a zlib footer should be written when
            this class is disposed. Also specifies whether a zlib header should
            be expected as the first data read from the underlying
            <see cref="T:System.IO.Stream"/> and whether a zlib footer should be expected
            at the end of the data read from the underlying
            <see cref="T:System.IO.Stream"/>.
            </param>
            <param name="initialBytes">
            These bytes will be fed into the inflator immediately during
            construction.
            <para>
            This is a workaround for the fact that we may have read bytes out
            of the underlying <see cref="T:System.IO.Stream"/> that are compressed before
            wrapping the underlying <see cref="T:System.IO.Stream"/> in this new
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream"/>, and so we need to be able to feed the
            bytes that were already read into the inflater before we read any
            further bytes from the underlying <see cref="T:System.IO.Stream"/>. There are
            other ways this problem could have been solved, but this solution
            introduced the fewest side effects out of the options available
            with the lowest risk and the least implementation effort.
            </para>
            </param>
            <param name="initialBytesOffset">
            The position that we should begin reading from the
            <paramref name="initialBytes"/> buffer.
            </param>
            <param name="initialBytesLength">
            The number of bytes that we should read from the
            <paramref name="initialBytes"/> buffer.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.CanSeek">
            <summary>
            Seeking is not supported.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.Length">
            <summary>
            This property is not supported.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.Position">
            <summary>
            This property is not supported.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.FlushDeflater">
            <summary>
            Flush the internal deflater and transfer all available deflated
            bytes to the underlying <see cref="T:System.IO.Stream"/>.
            <para>
            This method exists so that we don't have to flush the deflater
            every single write call (which is very inefficient) nor do we
            have to tie the deflater flushing to the <see cref="T:System.IO.Stream"/>
            flushing which would be potentially undesirable and unnecessary.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Compression.Zlib.ZlibStream.TransferDeflatedBytes">
            <summary>
            Transfers all available deflated bytes to the inner
            <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.DictionaryExtensions.AddToSet``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2)">
            <summary>
            Implements a common pattern of adding an item to an
            <see cref="T:System.Collections.Generic.ISet`1"/> which is a value of a
            <see cref="T:System.Collections.Generic.IDictionary`2"/>, where the key may not
            already exist, in which case it is necessary to create a new
            <see cref="T:System.Collections.Generic.ISet`1"/> value.
            </summary>
            <returns>
            true if the item is added to the set; false if the item is already
            in the set.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.DictionaryExtensions.RemoveFromSet``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2,System.Boolean)">
            <summary>
            Implements a common pattern of removing an item from an
            <see cref="T:System.Collections.Generic.ISet`1"/> which is a value of a
            <see cref="T:System.Collections.Generic.IDictionary`2"/>, where the key may not
            already exist.
            </summary>
            <remarks>
            The <see cref="T:System.Collections.Generic.ISet`1"/> which is the value of the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> will be removed by default
            if it is empty after the removal of the specified item, however
            this behavior may be specified.
            </remarks>
            <returns>
            true if item was successfully removed; false if the item was not
            already in the set.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.DictionaryExtensions.AddToList``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2)">
            <summary>
            Implements a common pattern of adding an item to an
            <see cref="T:System.Collections.Generic.IList`1"/> which is a value of a
            <see cref="T:System.Collections.Generic.IDictionary`2"/>, where the key may not
            already exist, in which case it is necessary to create a new
            <see cref="T:System.Collections.Generic.IList`1"/> value.
            </summary>
            <returns>
            true if the item is added to the set; false if the item is already
            in the set.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.DictionaryExtensions.GetValueOrStoreDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Implements a common pattern of getting an item from a
            <see cref="T:System.Collections.Generic.IDictionary`2"/>, where the key may not
            already exist, in which case it is necessary to create a new
            value and add it to the dictionary. Uses lazy generator for the value.
            </summary>
            <returns>
            The stored item if it was present, or the one
            that was generated and added.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.DictionaryExtensions.GetValueOrStoreNew``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Implements a common pattern of getting an item from a
            <see cref="T:System.Collections.Generic.IDictionary`2"/>, where the key may not
            already exist, in which case it is necessary to construct a new
            value and add it to the dictionary.
            </summary>
            <returns>
            The stored item if it was present, or the one
            that was constructed and added.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.DictionaryExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Provides an easy way to remove an entry from a dictionary and get
            the removed value at the same time.
            <para>
            Attempts to remove the given <paramref name="key"/> from the
            dictionary. If the key exists and was removed from the dictionary
            the value is assigned to <paramref name="value"/>. Otherwise
            returns false and assigns the default value to
            <paramref name="value"/>.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ListExtensions.Rotate``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Performs an in-place rotation of the elements in the specified
            <paramref name="source"/> <see cref="T:System.Collections.Generic.List`1"/> such that the index
            specified as <paramref name="first"/> becomes the new first index.
            </summary>
            <remarks>
            This extension method uses the <see cref="T:System.Collections.Generic.List`1"/> implementation
            of <see cref="M:System.Collections.Generic.List`1.Reverse"/> which has access to the
            underlying array. This could potentially be more performant than
            a more naive approach which does not have knowledge of the
            underlying storage mechanism.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ListExtensions.Rotate``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Performs an in-place rotation of the elements in the specified
            <see cref="T:System.Collections.Generic.IList`1"/> such that the index specified as
            <paramref name="first"/> becomes the new first index.
            </summary>
            <remarks>
            This extension method has no knowledge of the underlying storage
            mechanism of the specified <see cref="T:System.Collections.Generic.IList`1"/>, so we use our
            own <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ListExtensions.Reverse``1(System.Collections.Generic.IList{``0})"/>
            method. An attempt is made to cast to a <see cref="T:System.Collections.Generic.List`1"/> to
            see if the work can be deferred to the more specific implementation.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ListExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Performs an in-place reversal of the elements in the specified
            <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ListExtensions.Reverse``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Performs an in-place reversal of the elements in the specified
            <see cref="T:System.Collections.Generic.IList`1"/>, starting from the specified
            <paramref name="index"/> and including <paramref name="count"/>
            elements.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ListExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly shuffles the elements in the given
            <paramref name="source"/> list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ListExtensions.NonGenericShuffle(System.Collections.IList)">
            <summary>
            Randomly shuffles the elements in the given
            <paramref name="source"/> list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ObjectExtensions.Action``1(``0,System.Action{``0})">
            <summary>
            Provides a way to perform an <paramref name="action"/> on an object
            <paramref name="instance"/> inline as an expression.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ObjectExtensions.NullCheck``1(``0,System.Action{``0})">
            <summary>
            Provides a way to do an inline null check.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ObjectExtensions.NullCheck``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Provides a way to do an inline null check.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ObjectExtensions.NullableCheck``1(System.Nullable{``0},System.Action{``0})">
            <summary>
            Provides a way to do an inline null check.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.ObjectExtensions.NullableCheck``2(System.Nullable{``0},System.Func{``0,``1},``1)">
            <summary>
            Provides a way to do an inline null check.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.TaskExtensions.ToApm``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>
            Converts a generic <see cref="T:System.Threading.Tasks.Task`1"/> to an APM-style <see cref="T:System.IAsyncResult"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.TaskExtensions.ToApm(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Converts a <see cref="T:System.Threading.Tasks.Task"/> to an APM-style <see cref="T:System.IAsyncResult"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.WaitHandleExtensions.GetAwaiter(System.Threading.WaitHandle)">
            <summary>
            Makes it possible to directly await a WaitHandle.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.ExtensionMethods.WaitHandleExtensions.ToTask(System.Threading.WaitHandle)">
            <summary>
            Provides a Task that will complete when the specified
            <paramref name="waitHandle"/> is set.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BitConverter2">
            <summary>
            Summary description for BitConverter2.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BitConverter2.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a
            32-bit signed integer.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A 32-bit signed integer whose value is equivalent to value.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BitConverter2.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision
            floating point number.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A single-precision floating point number whose value is
            equivalent to value.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer">
            <summary>
            A container for data of a specific primitive type.
            <para>
            A buffer is a linear, finite sequence of elements of a specific
            primitive type. Aside from its content, the essential properties of a
            buffer are its capacity, limit, and position:
            </para>
            <para>
            A buffer's <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Capacity"/> is the number of elements it contains.
            The capacity of a buffer is never negative and never changes.
            </para>
            <para>
            A buffer's <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Limit"/> is the index of the first element that should
            not be read or written. A buffer's limit is never negative and is never
            greater than its capacity.
            </para>
            <para>
            A buffer's <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Position"/> is the index of the next element to be
            read or written. A buffer's position is never negative and is never
            greater than its limit.
            </para>
            <para>
            Each subclass of this class defines two categories of get and put
            operations:
            </para>
            <para>
            Relative operations read or write one or more elements starting at the
            current position and then increment the position by the number of
            elements transferred. If the requested transfer exceeds the limit then
            a relative get operation throws a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException"/>
            and a relative put operation throws a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException"/>;
            in either case, no data is transferred.
            </para>
            <para>
            Absolute operations take an explicit element index and do not affect
            the position. Absolute get and put operations throw an
            <see cref="T:System.IndexOutOfRangeException"/> if the index argument exceeds
            the limit.
            </para>
            <para>
            Data may also, of course, be transferred in to or out of a buffer by
            the I/O operations of an appropriate channel, which are always relative
            to the current position.
            </para>
            <para>
            A buffer's <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.MarkValue"/> is the index to which its position
            will be reset when the <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Reset"/> method is invoked. The mark
            is not always defined, but when it is defined it is never negative and
            is never greater than the position. If the mark is defined then it is
            discarded when the position or the limit is adjusted to a value smaller
            than the mark. If the mark is not defined then invoking the
            <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Reset"/> method causes an <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.InvalidMarkException"/>
            to be thrown.
            </para>
            <para>
            The following invariant holds for the mark, position, limit, and
            capacity values:
            0 &lt;= <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.MarkValue"/> &lt;= <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Position"/> &lt;=
            <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Limit"/> &lt;= <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Capacity"/>
            </para>
            <para>
            A newly-created buffer always has a position of zero and a mark that is
            undefined. The initial limit may be zero, or it may be some other value
            that depends upon the type of the buffer and the manner in which it is
            constructed. The initial content of a buffer is, in general, undefined.
            </para>
            <para>
            In addition to methods for accessing the position, and capacity
            values and for marking and resetting, this class also defines the
            following operations upon buffers:
            </para>
            <para>
            <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Clear"/> makes a buffer ready for a new sequence of
            channel-read or relative put operations: It sets the limit to the
            capacity and the position to zero.
            </para>
            <para>
            <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Flip"/> makes a buffer ready for a new sequence of
            channel-write or relative get operations: It sets the limit to the
            current position and then sets the position to zero.
            </para>
            <para>
            <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Rewind"/> makes a buffer ready for re-reading the data that
            it already contains: It leaves the limit unchanged and sets the
            position to zero.
            </para>
            <para>
            Buffers are not safe for use by multiple concurrent threads. If a
            buffer is to be used by more than one thread then access to the buffer
            should be controlled by appropriate synchronization.
            </para>
            <para>
            Methods in this class that do not otherwise have a value to return are
            specified to return the buffer upon which they are invoked. This allows
            method invocations to be chained; for example, the sequence of statements:
            </para>
            <para>
            b.flip(); b.position(23); b.limit(42);
            </para>
            <para>
            can be replaced by the single, more compact statement:
            </para>
            <para>
            b.flip().position(23).limit(42);
            </para>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Capacity">
            <summary>Returns this buffer's capacity.</summary>
            <returns>The capacity of this buffer.</returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Position">
            <summary>Returns this buffer's position.</summary>
            <returns>The position of this buffer.</returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Limit">
            <summary>Returns this buffer's limit.</summary>
            <returns>The limit of this buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.SetPosition(System.Int32)">
            <summary>
            Sets this buffer's position. If the mark is defined and larger than
            the new position then it is discarded.
            </summary>
            <param name="newPosition">
            The new position value; must be non-negative and no larger than the
            current limit.
            </param>
            <returns>This buffer.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when the preconditions on the <paramref name="newPosition"/>
            parameter do not hold.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.SetLimit(System.Int32)">
            <summary>
            Sets this buffer's limit. If the position is larger than the new
            limit then it is set to the new limit. If the mark is defined and
            larger than the new limit then it is discarded.
            </summary>
            <param name="newLimit">
            The new limit value; must be non-negative and no larger than this
            buffer's capacity.
            </param>
            <returns>This buffer.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the preconditions on <paramref name="newLimit"/> do
            not hold.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Mark">
            <summary>Sets this buffer's mark at its position.</summary>
            <returns>This buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Reset">
            <summary>
            Resets this buffer's position to the previously-marked position.
            <para>
            Invoking this method neither changes nor discards the mark's value.
            </para>
            </summary>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.InvalidMarkException">
            Thrown when the mark has not been set.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Clear">
            <summary>
            Clears this buffer. The position is set to zero, the limit is set
            to the capacity, and the mark is discarded.
            <para>
            Invoke this method before using a sequence of channel-read or put
            operations to fill this buffer. For example:
            </para>
            <para>
            buf.clear(); // Prepare buffer for reading
            </para>
            <para>
            in.read(buf); // Read data
            </para>
            <para>
            This method does not actually erase the data in the buffer, but it
            is named as if it did because it will most often be used in
            situations in which that might as well be the case.
            </para>
            </summary>
            <returns>This buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Flip">
            <summary>
            Flips this buffer. The limit is set to the current position and
            then the position is set to zero. If the mark is defined then it is
            discarded.
            <para>
            After a sequence of channel-read or put operations, invoke this
            method to prepare for a sequence of channel-write or relative get
            operations. For example:
            </para>
            <para>
            buf.put(magic); // Prepend header
            </para>
            <para>
            in.read(buf); // Read data into rest of buffer
            </para>
            <para>
            buf.flip(); // Flip buffer
            </para>
            <para>
            out.write(buf); // Write header + data to channel
            </para>
            </summary>
            <returns>This buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Rewind">
            <summary>
            Rewinds this buffer. The position is set to zero and the mark is
            discarded.
            <para>
            Invoke this method before a sequence of channel-write or get
            operations, assuming that the limit has already been set
            appropriately. For example:
            </para>
            <para>
            out.write(buf); // Write remaining data
            </para>
            <para>
            buf.rewind(); // Rewind buffer
            </para>
            <para>
            buf.get(array); // Copy data into array
            </para>
            </summary>
            <returns>This buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.Remaining">
            <summary>
            Returns the number of elements between the current position and the
            limit.
            </summary>
            <returns>The number of elements remaining in this buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.HasRemaining">
            <summary>
            Tells whether there are any elements between the current position
            and the limit.
            </summary>
            <returns>
            true if, and only if, there is at least one element remaining in
            this buffer.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.NextPutIndex">
            <summary>
            Checks the current position against the limit, throwing a
            <see cref="T:System.IO.IOException"/> if it is not smaller than the limit, and
            then increments the position.
            </summary>
            <returns>
            The current position value, before it is incremented.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.Buffer.CheckIndex(System.Int32)">
            <summary>
            Checks the given index against the limit, throwing an
            <see cref="T:System.IndexOutOfRangeException"/> if it is not smaller than
            the limit or is smaller than zero.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Creates a new buffer with the given mark, position, limit,
            capacity, backing array, and array offset.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Allocate(System.Int32)">
            <summary>
            Allocates a new byte buffer.
            <para>
            The new buffer's position will be zero, its limit will be its
            capacity, and its mark will be undefined.  It will have a
            <see cref="T:byte[]"/> backing array, and its <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.offset"/>.
            </para>
            </summary>
            <param name="capacity">The new buffer's capacity, in bytes.</param>
            <returns>The new byte buffer.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="capacity"/> is a negative integer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Wraps a byte array into a buffer.
            <para>
            The new buffer will be backed by the given byte array;
            that is, modifications to the buffer will cause the array to be
            modified and vice versa. The new buffer's capacity will be the
            <see cref="T:byte[].Length"/> of the <paramref name="array"/>, its
            position will be <paramref name="offset"/>, its limit will be
            <paramref name="offset"/> plus <paramref name="length"/>, and its
            mark will be undefined. Its <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.hb"/> backing array will be
            the given array, and its <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.offset"/> will be zero.
            </para>
            </summary>
            <param name="array">The array that will back the new buffer.</param>
            <param name="offset">
            The offset of the subarray to be used; must be non-negative and no
            larger than the <see cref="T:byte[].Length"/> of
            <paramref name="array"/>. The new buffer's position will be set to
            this value.
            </param>
            <param name="length">The length of the subarray to be used;
            must be non-negative and no larger than the
            <see cref="T:byte[].Length"/> of the <paramref name="array"/> minus
            <paramref name="offset"/>.  The new buffer's limit will be set to
            <paramref name="offset"/> plus <paramref name="length"/>.
            </param>
            <returns>The new byte buffer.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when the preconditions on the <paramref name="offset"/> and
            <paramref name="length"/> parameters do not hold.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Wrap(System.Byte[])">
            <summary>
            Wraps a byte array into a buffer.
            <para>
            The new buffer will be backed by the given byte array;
            that is, modifications to the buffer will cause the array to be
            modified and vice versa.  The new buffer's capacity and limit will
            be the <see cref="T:byte[].Length"/> of <paramref name="array"/>,
            its position will be zero, and its mark will be undefined. Its
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.hb"/> backing array will be the given array, and its
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.offset"/> will be zero.
            </para>
            </summary>
            <param name="array">The array that will back this buffer.</param>
            <returns>The new byte buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Slice">
            <summary>
            Creates a new byte buffer whose content is a shared subsequence of
            this buffer's content.
            <para>
            The content of the new buffer will start at this buffer's current
            position.  Changes to this buffer's content will be visible in the
            new buffer, and vice versa; the two buffers' position, limit, and
            mark values will be independent.
            </para>
            <para>
            The new buffer's position will be zero, its capacity and its limit
            will be the number of bytes remaining in this buffer, and its mark
            will be undefined.  The new buffer will be direct if, and only if,
            this buffer is direct, and it will be read-only if, and only if,
            this buffer is read-only.
            </para>
            </summary>
            <returns>The new byte buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Duplicate">
            <summary>
            Creates a new byte buffer that shares this buffer's content.
            <para>
            The content of the new buffer will be that of this buffer. Changes
            to this buffer's content will be visible in the new buffer, and
            vice versa; the two buffers' position, limit, and mark values will
            be independent.
            </para>
            <para>
            The new buffer's capacity, limit, position, and mark values will be
            identical to those of this buffer.  The new buffer will be direct
            if, and only if, this buffer is direct, and it will be read-only
            if, and only if, this buffer is read-only.
            </para>
            </summary>
            <returns>The new byte buffer.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Put(System.Byte)">
            <summary>
            Relative put method; (optional operation).
            <para>
            Writes the given byte into this buffer at the current position, and
            then increments the position.
            </para>
            </summary>
            <param name="b">The byte to be written.</param>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Thrown when this buffer's current position is not smaller than its
            limit.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Get(System.Int32)">
            <summary>
            Absolute get method. Reads the byte at the given index.
            </summary>
            <param name="index">The index from which the byte will be read.</param>
            <returns>The byte at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when <paramref name="index"/> is negative or not smaller
            than the buffer's limit.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Put(System.Int32,System.Byte)">
            <summary>
            Absolute put method (optional operation).
            <para>
            Writes the given byte into this buffer at the given index.
            </para>
            </summary>
            <param name="index">The index at which the byte will be written.</param>
            <param name="b">The byte value to be written.</param>
            <returns>This buffer.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when <paramref name="index"/> is negative or not smaller
            than the buffer's limit.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Get(System.Byte[])">
            <summary>
            Relative bulk get method.
            <para>
            This method transfers bytes from this buffer into the given
            destination array. An invocation of this method of the form
            <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Get(System.Byte[])"/> behaves in exactly the same way as the
            invocation <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Get(System.Byte[],System.Int32,System.Int32)"/> where the
            <c>withOffset</c> parameter is <c>0</c> and the <c>length</c>
            parameter is <c>dst.Length</c>.
            </para>
            </summary>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown when there are fewer than <see cref="T:byte[].Length"/> of
            <paramref name="dst"/> bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Put(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Relative bulk put method (optional operation).
            <para>
            This method transfers bytes into this buffer from the given
            source array.  If there are more bytes to be copied from the array
            than remain in this buffer, that is, if <paramref name="length"/>
            remaining, then no bytes are transferred and a
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException"/> is thrown.
            </para>
            <para>
            Otherwise, this method copies <paramref name="length"/> bytes from
            the given array into this buffer, starting at the given offset in
            the array and at the current position of this buffer. The position
            of this buffer is then incremented by <paramref name="length"/>.
            </para>
            <para>
            In other words, an invocation of this method of the form
            <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Put(System.Byte[],System.Int32,System.Int32)"/> has exactly the same effect as
            the loop except that it first checks that there is sufficient space
            in this buffer and it is potentially much more efficient.
            </para>
            </summary>
            <param name="src">The array from which bytes are to be read.</param>
            <param name="withOffset">
            The offset within the array of the first byte to be read; must be
            non-negative and no larger than the <see cref="T:byte[].Length"/>
            of <paramref name="src"/>.
            </param>
            <param name="length">
            The number of bytes to be read from the given array; must be
            non-negative and no larger than the <see cref="T:byte[].Length"/>
            of <paramref name="src"/> minus <paramref name="withOffset"/>.
            </param>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Thrown when there is insufficient space in this buffer.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when the preconditions on the <paramref name="withOffset"/>
            and <paramref name="length"/> parameters do not hold.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Put(System.Byte[])">
            <summary>
            Relative bulk put method (optional operation).
            <para>
            This method transfers the entire content of the given source
            byte array into this buffer.  An invocation of this method of the
            form <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Put(System.Byte[])"/> behaves in exactly the same way as
            the invocation <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Put(System.Byte[],System.Int32,System.Int32)"/> where the
            <c>withOffset</c> parameter is <c>0</c> and the <c>length</c>
            parameter is <c>src.Length</c>.
            </para>
            </summary>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Throws when there is insufficient space in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.Array">
            <summary>
            Returns the byte array that backs this buffer (optional operation).
            <para>
            Modifications to this buffer's content will cause the returned
            array's content to be modified, and vice versa.
            </para>
            <para>
            Invoke the {@link #hasArray hasArray} method before invoking this
            method in order to ensure that this buffer has an accessible
            backing array.
            </para>
            </summary>
            <returns>The array that backs this buffer.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when this buffer is not backed by an accessible array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.ToString">
            <summary>
            Returns a string summarizing the state of this buffer.
            </summary>
            <returns>A summary string.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.GetShort">
            <summary>
            Relative get method for reading a <see cref="T:System.Int16"/> value.
            <para>
            Reads the next two bytes at this buffer's current position,
            composing them into a <see cref="T:System.Int16"/> value according to the
            current byte order, and then increments the position by two.
            </para>
            </summary>
            <returns>
            The <see cref="T:System.Int16"/> value at the buffer's current position.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown when there are fewer than two bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.GetUnsignedShort">
            <summary>
            Relative get method for reading a <see cref="T:System.UInt16"/> value;
            </summary>
            <para>
            Reads the next two bytes at this buffer's current position,
            composing them into a <see cref="T:System.UInt16"/> value according to the
            current byte order, and then increments the position by two.
            </para>
            <returns>
            The <see cref="T:System.UInt16"/> value at the buffer's current position.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown when there are fewer than two bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.PutShort(System.Int16)">
            <summary>
            Relative put method for writing a <see cref="T:System.Int16"/> value
            (optional operation).
            <para>
            Writes two bytes containing the given <see cref="T:System.Int16"/> value,
            in the current byte order, into this buffer at the current
            position, and then increments the position by two.
            </para>
            </summary>
            <param name="value">
            The <see cref="T:System.Int16"/> value to be written.
            </param>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Thrown when there are fewer than two bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.PutUnsignedShort(System.UInt16)">
            <summary>
            Relative put method for writing a <see cref="T:System.UInt16"/> value
            (optional operation).
            <para>
            Writes two bytes containing the given <see cref="T:System.UInt16"/> value,
            in the current byte order, into this buffer at the current
            position, and then increments the position by two.
            </para>
            </summary>
            <param name="value">
            The <see cref="T:System.UInt16"/> value to be written.
            </param>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Thrown when there are fewer than two bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.GetInt">
            <summary>
            Relative get method for reading an <see cref="T:System.Int32"/> value.
            <para>
            Reads the next four bytes at this buffer's current position,
            composing them into an <see cref="T:System.Int32"/> value according to the
            current byte order, and then increments the position by four.
            </para>
            </summary>
            <returns>
            The <see cref="T:System.Int32"/> value at the buffer's current position.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown when there are fewer than four bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.PutInt(System.Int32)">
            <summary>
            Relative put method for writing an <see cref="T:System.Int32"/> value
            (optional operation).
            <para>
            Writes four bytes containing the given <see cref="T:System.Int32"/> value, in
            the current byte order, into this buffer at the current position,
            and then increments the position by four.
            </para>
            </summary>
            <param name="value">
            The <see cref="T:System.Int32"/> value to be written.</param>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Thrown when there are fewer than four bytes remaining in this
            buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.GetInt(System.Int32)">
            <summary>
            Absolute get method for reading an <see cref="T:System.Int32"/> value.
            <para>
            Reads four bytes at the given index, composing them into a
            <see cref="T:System.Int32"/> value according to the current byte order.
            </para>
            </summary>
            <param name="index">
            The index from which the bytes will be read.
            </param>
            <returns>The <see cref="T:System.Int32"/> value at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when <paramref name="index"/> is negative or not smaller
            than the buffer's limit, minus three.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.PutInt(System.Int32,System.Int32)">
            <summary>
            Absolute put method for writing an <see cref="T:System.Int32"/> value
            (optional operation).
            <para>
            Writes four bytes containing the given <see cref="T:System.Int32"/> value, in
            the current byte order, into this buffer at the given index.
            </para>
            </summary>
            <param name="index">
            The index at which the bytes will be written.
            </param>
            <param name="value">
            The <see cref="T:System.Int32"/> value to be written.
            </param>
            <returns>This buffer.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when the <paramref name="index"/> is negative or not smaller
            than the buffer's limit, minus three.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.GetUnsignedInt">
            <summary>
            Relative get method for reading a <see cref="T:System.UInt32"/> value;
            </summary>
            <para>
            Reads the next four bytes at this buffer's current position,
            composing them into a <see cref="T:System.UInt32"/> value according to the
            current byte order, and then increments the position by four.
            </para>
            <returns>
            The <see cref="T:System.UInt32"/> value at the buffer's current position.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown when there are fewer than four bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.PutUnsignedInt(System.UInt32)">
            <summary>
            Relative put method for writing an <see cref="T:System.UInt32"/> value
            (optional operation).
            <para>
            Writes four bytes containing the given <see cref="T:System.UInt32"/> value, in
            the current byte order, into this buffer at the current position,
            and then increments the position by four.
            </para>
            </summary>
            <param name="value">
            The <see cref="T:System.UInt32"/> value to be written.</param>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Thrown when there are fewer than four bytes remaining in this
            buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.GetLong">
            <summary>
            Relative get method for reading a <see cref="T:System.Int64"/> value.
            <para>
            Reads the next eight bytes at this buffer's current position,
            composing them into a <see cref="T:System.Int64"/> value according to the current byte order,
            and then increments the position by eight.
            </para>
            </summary>
            <returns>
            The <see cref="T:System.Int64"/> value at the buffer's current position.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown when there are fewer than eight bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.PutLong(System.Int64)">
            <summary>
            Relative put method for writing a <see cref="T:System.Int64"/> value
            (optional operation).
            <para>
            Writes eight bytes containing the given <see cref="T:System.Int64"/> value,
            in the current byte order, into this buffer at the current
            position, and then increments the position by eight.
            </para>
            </summary>
            <param name="value">
            The <see cref="T:System.Int64"/> value to be written.
            </param>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Thrown when there are fewer than eight bytes remaining in this
            buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.GetFloat">
            <summary>
            Relative get method for reading a <see cref="T:System.Single"/> value.
            <para>
            Reads the next four bytes at this buffer's current position,
            composing them into a <see cref="T:System.Single"/> value according to the
            current byte order, and then increments the position by four.
            </para>
            </summary>
            <returns>
            The <see cref="T:System.Single"/> value at the buffer's current position.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown when there are fewer than four bytes remaining in this
            buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.PutFloat(System.Single)">
            <summary>
            Relative put method for writing a <see cref="T:System.Single"/> value
            (optional operation).
            <para>
            Writes four bytes containing the given <see cref="T:System.Single"/> value,
            in the current byte order, into this buffer at the current
            position, and then increments the position by four.
            </para>
            </summary>
            <param name="value">
            The <see cref="T:System.Single"/> value to be written.
            </param>
            <returns>This buffer.</returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
            Thrown when there are fewer than four bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.GetDouble">
            <summary>
            Relative get method for reading a <see cref="T:System.Double"/> value.
            <para>
            Reads the next eight bytes at this buffer's current position,
            composing them into a <see cref="T:System.Double"/> value according to the
            current byte order, and then increments the position by eight.
            </para>
            </summary>
            <returns>
            The <see cref="T:System.Double"/> value at the buffer's current position.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown when there are fewer than eight bytes remaining in this buffer.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer.PutDouble(System.Double)">
             <summary>
             Relative put method for writing a <see cref="T:System.Double"/> value
             (optional operation).
             <para>
             Writes eight bytes containing the given <see cref="T:System.Double"/> value,
             in the current byte order, into this buffer at the current
             position, and then increments the position by eight.
             </para>
            
             </summary>
             <param name="value">
             The <see cref="T:System.Double"/> value to be written.
             </param>
             <returns>This buffer.</returns>
             <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferOverflowException">
             Thrown when there are fewer than eight bytes remaining in this buffer.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream.WriteBytes(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream)">
            <summary>
            Appends the bytes in the specified <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer"/> stream
            <paramref name="bbos"/> into this stream. This stream and the
            <paramref name="bbos"/> should be open for writing.
            </summary>
            <exception cref="T:System.IO.IOException">
            Thrown when the underlying <see cref="T:System.IO.Stream"/> is closed.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream.ClearMarker">
            <summary>
            Clears the marker for this <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream"/>.
            <para>
            Has no effect on the size and position of this stream. The user
            needs to call <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream.SetMarker(System.Int32)"/> to set the marker to a new
            position.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream.Clear">
            <summary>
            Clears the stream for reuse. Clears the previously stored data but
            leaves the stream in its previous state. If the stream is still
            open, then it can be reused to insert new data. Reuses previously
            allocated Buffers if possible.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream.AddBuffer(System.Int32)">
            <summary>
            Allocate a buffer which is large enough to store data of specified
            size.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteOrder.BIG_ENDIAN">
            Constant denoting big-endian byte order.  In this order, the bytes of a
            multibyte value are ordered from most significant to least significant.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteOrder.LITTLE_ENDIAN">
            Constant denoting little-endian byte order.  In this order, the bytes of
            a multibyte value are ordered from least significant to most
            significant.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteOrder.nativeOrder">
             Retrieves the native byte order of the underlying platform.
            
             <p> This method is defined so that performance-sensitive Java code can
             allocate direct buffers with the same byte order as the hardware.
             Native code libraries are often more efficient when such buffers are
             used.  </p>
            
             @return  The native byte order of the hardware upon which this Java
                      virtual machine is running
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteOrder.ToString">
             Constructs a string describing this object.
            
             <p> This method returns the string <tt>"BIG_ENDIAN"</tt> for {@link
             #BIG_ENDIAN} and <tt>"LITTLE_ENDIAN"</tt> for {@link #LITTLE_ENDIAN}.
             </p>
            
             @return  The specified string
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.AddressInfo">
            <summary>
            Class to represent an IP address, encoding both the address and its
            "type", that is, which API was used to fetch the address.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.AddressType">
            <summary>
            IP address types allowed in <c>GenerateTokenRequest</c> messages.
            </summary>
            <seealso cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.GenerateTokenRequest"/>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.CloneTokenRequest">
            <summary>
            Message to request numCopies <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.CloneTokenRequest.numCopies"/> clones from the
            original <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.CloneTokenRequest.original"/> token.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.CloneTokenResponse">
            <summary>
            Message containing the response to a
            <cref name="CloneTokenRequest"/>, containing either a list
            (<cref name="d_token"/>) of tokens or <cref name="d_errorInfo"/>
            to indicate an error.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.DirectoryServiceInfo">
            <summary>
            Summary description for DirectoryServiceInfo.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.GenerateTokenRequest">
            <summary>
            Summary description for GenerateTokenRequest.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.GenerateTokenResponse">
            <summary>
            Summary description for GenerateTokenResponse.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.LogonInfo">
            <summary>
            Summary description for LogonInfo.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.Request">
            <summary>
            Summary description for Request.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.Request.SELECTION_INDEX_GENERATE_TOKEN_REQUEST">
             Implementation Note:
             --------------------
             'generateBbcommTokenRequest' is not used by BLPAPI so the classes
             have not been implemented in this package. However, for consistency
             with the code from BAS codegen, the enums and constants still refer
             to it, but 'accessSelection', 'manipulateSelection' etc. work as
             though this does not exist.
            
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.Response">
            <summary>
            Summary description for Response.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.UserInfo">
            <summary>
            Summary description for UserInfo.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Authorization.AuthorizationRequest">
            <summary>
            Summary description for AuthorizationRequest.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Authorization.AuthorizationResponsePrivileges">
            <summary>
            Summary description for AuthorizationResponsePrivileges.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Authorization.AuthorizationRevokedValue">
            <summary>
            Summary description for AuthorizationRevocationInfo.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Authorization.AuthorizationUpdate">
            <summary>
            Summary description for AuthorizationUpdate.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Authorization.AuthorizationUpdateInfo">
            <summary>
            Summary description for AuthorizationUpdateInfo.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Compression">
            <summary>
            Defines the compression algorithms that are potentially supported
            </summary>
            <para>
            Compression is used in both payload level and stream level. In
            payload level, the value itself is transferred on the wire; In stream
            level when used as message option, the value is translated to mask to
            support multiple compression options and transferred on the wire.
            </para>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog.FindTimeout">
            <summary>
            Returns request timeout in milliseconds from <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog.FindAnyOption(System.Int32)">
            <summary>
            Returns a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption"/> for given <paramref name="optionId"/>
            or <c>null</c> if not present. It does not filter out non-raw options.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog.GetRequestGuid">
            <summary>
            Returns the value of the guid option in this prolog as
            <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>.
            </summary>
            <returns>
            The value of guid option in this prolog or null if this prolog does
            not have one.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog.SetRequestGuid(Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Sets the guid option with a specific <paramref name="requestGuid"/>.
            <para>Note that the guid option can only be set once.</para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog.EnsureRequestGuid">
            <summary>
            Sets the guid option with a new random value if it's absent.
            </summary>
            <returns>
            The value of existing or the newly appended guid option.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MultipartMsgIterator">
            <summary>
            Summary description for MultipartMsgIterator.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption.PROTOCOL_OPTION_SVC_IDENTIFICATION">
            <summary>
            Identification of service via a specific RDP endpoint, including its 'catalog' and 'permission' ids.
            NOTE: This is a size aligned (4 bytes) BER encoded byte sequence corresponding
            to a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.ServiceIdentification.ServiceIdentificationOption"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressPair">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddTraceParameters">
            <summary>
            Translation of apimsg::MessageOptionAddTraceParameters required by
            Apinisvc.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAuthorizationToken">
            <summary>
            Objects of this class represent <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption"/> options
            storing authorization tokens.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAuthorizationToken.d_tokenType">
            <summary>
            the type of token, as described by 'apimsgs.xsd'. (The type will
            typically be the service id of the authorization service used.)
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAuthorizationToken.d_tokenData">
            <summary>
            a variable-length binary string carrying the token data
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAuthorizationToken.FIXED_SIZE_IN_WORDS">
            <summary>
            the size (in 4 bytes words) of the fixed-sized parts of this
            option (the size in words of <c>d_tokenType</c>)
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAuthorizationToken.#ctor(System.Int32,System.Byte[])">
            <summary>
            Construct an authorization token <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption"/> with
            the specified <paramref name="tokenType"/> and
            <paramref name="tokenData"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAuthorizationToken.#ctor(System.Byte[])">
            <summary>
            Construct an authorization token <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption"/> with
            <c>tokenType == 0</c> and the specified
            <paramref name="tokenData"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAuthorizationToken.streamOut(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream)">
            <summary>
            Serialize this object on the specified <paramref name="bbos"/> to
            be sent on the network.
            </summary>
            <param name="bbos">a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream"/> to
            stream out this object on</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionClientIdent">
            <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            MessageOptionClientIdent.cs  Apr 9, 2007
            </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionSupportedEncodings.FromOptionPayload(System.Byte[])">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionSupportedEncodings"/> from an option payload
            </summary>
            <param name="bytes">option payload</param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.BufferUnderflowException">
            Thrown if the length of bytes passed to the function is less than 8
            </exception>
            <returns>
            A new message option support encoding object with contents derived
            from the input byte stream
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionSupportedEncodings.AddCompressions(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Compression[])">
            <summary>
            Used to enable one or more compression type(s)
            </summary>
            <param name="newCompressions"> list of compressions to enable</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionSupportedEncodings.GetCompressions">
            <summary>
            Used to get a list of all the enabled compressions
            </summary>
            <returns>
            A list of enabled compressions
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionSupportedEncodings.GetActiveCompression">
            <summary>
            Used to get the currently active compression
            </summary>
            <para>
            Will return the first found compression. If more than one compression
            type is found, an exception is thrown
            </para>
            <exception cref="T:System.InvalidOperationException">
            Thrown if more than one compression is currently enabled
            </exception>
            <returns>
            active compression
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionSupportedEncodings.streamOut(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream)">
            <summary>
            Streams the content of the object into the provided byte buffer output stream
            </summary>
            <param name="bbos">byte buffer output stream</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionTimeout">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResponseMessageHeader">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Resubscription">
            <summary>
            Summary description for Resubscription.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResubscriptionResponse">
            <summary>
            Summary description for ResubscriptionResponse.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SelfDescribingTickFieldHeader">
            <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)</author>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionDataMsgFormatter.appendEvent(System.Int32,System.Int32,System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionDataEvents.SubscriptionDataEventHeaderExtended2,Bloomberglp.Blpapi.Internal.ElementImpl)">
            <summary>
            Encodes the element named field based into a ByteBufferOutputStream.
            This uses the SelfDescribingEventFormatter for flat elements and
            chmeBasedEventFormatter for non-flat schema type elements. After
            events have been appended to a stream, use the Formatter's data()
            method to get the inserted ticks.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionDataMsgIterator">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionDataTickHeader">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionLost">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.AllowedFieldIds">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedOpenResults">
            <summary>
            Contains the results of processing and categorizing an Open response.
            Also holds the <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SharedOpenContext"/> shared by the
            response needed to process these results.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedOpenResults.DataSetsToActivate">
            <summary>The subscriptions to be activated.</summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedOpenResults.DataSetsToDeactivate">
            <summary>The subscriptions to be deactivated.</summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedOpenResults.DataSetsToRoute">
            <summary>The subscriptions to be routed.</summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedOpenResults.FailedSubscriptions">
            <summary>The subscriptions that deemed failed.</summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedOpenResults.DataSetsToClose">
            <summary>The subscriptions to be closed.</summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedOpenResults.SharedContext">
            <summary>
            The open context shared by all the subscriptions in the response.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedOpenResults.ConnectionContextToEliminate">
            <summary>
            The connection context to be eliminated in case of IO Errors or
            Timeouts.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults">
            <summary>
            Contains the results of processing and categorizing a ResolveAndRoute
            response. Also holds the <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.RoutingContext"/> shared by the
            response needed to process these results.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.SubscriptionsToFail">
            <summary>
            The subscriptions which should be terminated and a ResolveAndRoute
            request not retried. Each entry contains the failed
            <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionInfo"/> and a corresponding error code.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.SubscriptionsToReresolveWithElimination">
            <summary>
            The subscriptions for which we should retry sending another
            ResolveAndRoute request by eliminating the shared
            <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> from both the send and
            connectivity handles.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.SubscriptionsToReresolveWithSendElimination">
            <summary>
            The subscriptions for which we should retry sending another
            ResolveAndRoute request by eliminating the shared
            <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> from the send handle.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.DataSetsToRerouteWithDomainElimination">
            <summary>
            Contains the <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet"/>s for which the resolution was
            succesful but the routing has failed. A Route request should be
            sent by eliminating the shared <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/>
            from both the send and connectivity handles.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.DataSetsToRerouteWithoutElimination">
            <summary>
            Contains the <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet"/>s for which the resolution was
            succesful but the routing has failed. These need to be rerouted.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.DataSetsToOpen">
            <summary>
            A list of <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet"/>s whose ResolveAndRoute response
            was succesful and are ready to be opened.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.ResubscriptionNoServiceMap">
            <summary>
            Contains the resubscriptions for which the service has not been
            opened.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.ResubscriptionMap">
            <summary>
            Contains the resubscriptions for which the service has been
            opened.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults.RoutingContext">
            <summary>
            The routing context shared by all the subscriptions in the response.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Close">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Connectivity">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ContentTransform">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DataSet">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.DisableSubscriptionData">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Error">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.EventFilter">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.IgnoredConnectivity">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.MulticastEndpoint">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.MulticastEndpointRange">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Open">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Opened">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.OpenRequest">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.OpenRequestConnectivity">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.OpenResponse">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.OpenResult">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.OpenResultChoice">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Permissions">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Reachable">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ReachableChoice">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolutionFieldException">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolutionNote">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolutionRequest">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolutionResponse">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolutionResult">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolutionResultChoice">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Resolve">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolveAndRoute">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolveAndRouteRequest">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolveAndRouteResponse">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolveAndRouteResult">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolveAndRouteResultChoice">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolveSuccess">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResumeFrom">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Route">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RoutedStream">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteRequest">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteResponse">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteResult">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteResultChoice">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteSuccess">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteSuccessRoute">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.SyncRequest">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.TopicRouting">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.UpdateResolution">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.UpdateRoute">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.UpdateStreams">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.Uts">
            <author>Thomas Foster (tfoster28)</author>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubServiceCodeRegistrationEntry.d_goodRanges">
            The ranges and priorities of sub service codes that are supported and
            currently available.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubServiceCodeRegistrationEntry.d_badRanges">
            The ranges of sub service codes that are supported, but are currently
            unavailable.  This is intended as a hint of what would be supported in
            the sunny day case.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubServiceCodeStatusEntry.d_serviceCode">
            Service id for which subservice code change is requested.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubServiceCodeStatusEntry.d_goodRanges">
            The ranges and priorities of sub service codes that are supported and
            currently available.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubServiceCodeStatusEntry.d_badRanges">
            The ranges of sub service codes that are supported, but are currently
            unavailable.  This is intended as a hint of what would be supported in
            the sunny day case.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Xml.MessageXmlDecoder.IterateArrayChildren(System.Xml.Linq.XElement,Bloomberglp.Blpapi.Internal.SchemaElementDefinitionImpl,System.Int32)">
            <summary>
            Iterates an array of child elements defined by
            <paramref name="childElementDefinition"/> until a different child
            element starts.
            </summary>
            <returns>
            The index where the last array element of this child stops.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.CbStreamChannel.#ctor(System.IO.Stream,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory,Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncDispatcher,System.Net.EndPoint,System.Net.EndPoint,System.Int32,Bloomberglp.Blpapi.Internal.ConnectionContext)">
             <summary>
             <para>
             Creates CbStreamChannel with the specified <c>connectedChannel</c>,
             local address at <c>localEndpoint</c> and peer address at <c>remoteEndpoint</c>.
             By default WriteHighWatermark is 64K.
             </para>
            
             <remarks>
             Requirements to <c>connectedChannel</c> of type <see cref="T:System.IO.Stream"/>
            
             <para>
             Type of <c>connectedChannel</c> must provide asynchronous implementations of methods:
             <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>, <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>.
             </para>
            
             <para>
             if <c>connectedChannel</c> is an instance <see cref="T:System.Net.Sockets.NetworkStream"/>
             then for underlying <see cref="T:System.Net.Sockets.Socket"/> Nagle's algorithm must be turned off.
             </para>
             </remarks>
             </summary>
             <param name="connectedChannel">Input/output stream</param>
             <param name="timerEventManagerFactory">
             The timer factory that facilitates timed read.
             </param>
             <param name="asyncDispatcher">
             Facilitates invoking callbacks asynchronously.
             </param>
             <param name="localEndpoint">Local address of the socket</param>
             <param name="remoteEndpoint">Peer address</param>
             <param name="sessionId">
             The ID of the session this channel belongs to.
             </param>
             <param name="connectionContext">
             The connection context.
             </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.CbStreamChannel.#ctor(System.IO.Stream,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory,Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncDispatcher,System.Net.EndPoint,System.Net.EndPoint,System.Int32,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int32)">
             <summary>
             <para>
             Creates CbStreamChannel with the specified <c>connectedChannel</c>,
             local address at <c>localEndpoint</c>, peer address at <c>remoteEndpoint</c>
             and provided <c>writeHighWatermark</c>
             </para>
            
             <remarks>
             Requirements to <c>connectedChannel</c> of type <see cref="T:System.IO.Stream"/>
            
             <para>
             Type of <c>connectedChannel</c> must provide asynchronous implementations of methods:
             <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>, <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>.
             </para>
            
             <para>
             if <c>connectedChannel</c> is an instance <see cref="T:System.Net.Sockets.NetworkStream"/>
             then for underlying <see cref="T:System.Net.Sockets.Socket"/> Nagle's algorithm must be turned off.
             </para>
             </remarks>
             </summary>
             <param name="connectedChannel">Input/output stream</param>
             <param name="timerEventManagerFactory">
             The timer factory that facilitates timed read.
             </param>
             <param name="asyncDispatcher">
             Facilitates invoking callbacks asynchronously to prevent deadlock.
             </param>
             <param name="localEndpoint">Local address of the socket</param>
             <param name="remoteEndpoint">Peer address</param>
             <param name="sessionId">
             The ID of the session this channel belongs to.
             </param>
             <param name="connectionContext">
             The connection context.
             </param>
             <param name="writeHighWaterMark">
             Max size of pending data to be sent
             </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.DefaultSslStreamFactory">
            <summary>
            Factory for creating SslStream instances. On each invocation of method
            <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.DefaultSslStreamFactory.Create(System.IO.Stream,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.RemoteCertificateValidationCallback)"/> new instance is created.
            Any exception thrown by SslStream is passed to the caller.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Implementation.TimerReq.#ctor(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory,System.Threading.TimerCallback,System.Int64,Bloomberglp.Blpapi.Internal.Infrastructure.Network.Implementation.ReadRequest)">
            <summary>
            Creates a read request that times out in
            <paramref name="timeoutMillis"/> milliseconds. if
            <paramref name="timeoutMillis"/> is negative, start the timer
            immediately.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ICbChannel">
             <summary>
             <para>
             Component providing facility to send/receive data asynchronously.
             </para>
            
             <para>
             All methods are thread-safe.
             </para>
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ICbChannel.Read(System.Int32,Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadCallback)">
             <summary>
             <para>
             Requests CbChannel to read <c>numBytes</c> and return them back in
             the callback <c>readCb</c> along with the
             <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus">status</see>. Only one read request is
             active at a time. Other read requests are queued.
             </para>
            
             <para>
             Caller's callback is invoked only if size of received data is
             greater or equal to a requested size. Channel waits and accumulates
             data to fulfill read request.
             </para>
            
             <para>
             Caller can request more data in the callback with use of
             <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadCompletionStatus"/> parameter. If caller
             requests more data to read in the callback request is considered as
             pending. Further read requests are queued until the caller of the
             head read request stop requesting more data.
             </para>
            
             <para>
             Caller gets notified in case of any error too.
             </para>
            
             </summary>
             <param name="numBytes">Number of bytes to read from CbChannel</param>
             <param name="readCb"><see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadCallback">Callback</see> to notify caller on result</param>
             <returns>Preliminary <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus">status</see> of operation</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ICbChannel.TimedRead(System.Int32,System.Int64,Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadCallback)">
             <summary>
             <para>
             Requests CbChannel to read <c>numBytes</c> with the specified
             <c>timeOut</c> in milliseconds and return them back in the
             callback <c>readCb</c> along with the
             <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus">status</see>. Only one read request is
             active at a time. Other read requests are queued.
             </para>
            
             <para>
             Caller's callback is invoked only if size of received data is
             greater or equal to a requested size. Channel waits and accumulates
             data to fulfill read request. If timeout has expired but channel
             received some data then data will stay in the internal buffer of
             channel for other read requests.
             </para>
            
             <para>
             Caller can request more data in the callback with use of
             <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadCompletionStatus"/> parameter. If
             caller requests more data to read request is considered as pending.
             Further read requests are queued until the caller of the head read
             request stop requesting more data.
             </para>
            
             <para>
             Timeout is setup only for the first read request from the caller.
             If caller requests more data with
             <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadCompletionStatus"/> parameter then new
             request has no timeout.
             </para>
            
             <para>
             Caller gets notified in case of any error too.
             </para>
             </summary>
             <param name="numBytes">Number of bytes to read from CbChannel</param>
             <param name="timeOut">Timeout value in milliseconds</param>
             <param name="readCb"><see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadCallback">Callback</see> to notify caller on result</param>
             <returns>Preliminary <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus">status</see> of operation</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ICbChannel.Write(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer)">
            <summary>
            Sends <c>data</c> asynchronously via CbChannel. Write requests are
            ordered.
            </summary>
            <param name="data">buffer with data to send(data.Limit > data.Position)</param>
            <returns>Preliminary <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus">status</see> of operation</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ICbChannel.Write(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,System.Int32)">
             <summary>
             <para>
             Sends <c>data</c> asynchronously via CbChannel. Write requests are
             ordered.
             </para>
            
             <para>
             <c>highWaterMark</c> limits the max size of pending data to send
             inside CbChannel. If sum of pending data size and <c>data</c>
             buffer size is greater then <c>highWaterMark</c> then write request
             is cancelled with status <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus.WriteBufferFull"/>.
             </para>
             </summary>
             <param name="data">buffer with data to send(data.Limit > data.Position)</param>
             <param name="highWaterMark">max size of pending datat to send</param>
             <returns><see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus">Status</see> of operation</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ICbChannel.Write(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[])">
            <summary>
            Sends <c>data</c> asynchronously via CbChannel. Write requests are
            ordered.
            </summary>
            <param name="data">buffers with data to send(data.Limit > data.Position)</param>
            <returns>Preliminary <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus">status</see> of operation</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ICbChannel.Write(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],System.Int32)">
             <summary>
             <para>
             Sends <c>data</c> asynchronously via CbChannel. Write requests are
             ordered.
             </para>
            
             <para>
             <c>highWaterMark</c> limits the max size of pending data to send
             inside CbChannel. If sum of pending data size and <c>data</c>
             buffer size is greater then <c>highWaterMark</c> then write request
             is cancelled with status <see cref="P:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus.WriteBufferFull"/>.
             </para>
             </summary>
             <param name="data">buffers with data to send(data.Limit > data.Position)</param>
             <param name="highWaterMark">max size of pending datat to send</param>
             <returns><see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus">Status</see> of operation</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ICbChannel.Close">
             <summary>
             <para>
             Cancels all read and write requests. Notifies owners of
             read requests on channel closed with status
             <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus.Closed"/>.
             </para>
            
             <para>
             All further read/write requests to channel will be denied
             immediately with status <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus.Closed"/>.
             </para>
             </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus.Success">
            <summary>
            Read operation completed successfully, channel has enough data
            to fullill read request
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus.Timeout">
            <summary>
            Read operation failed, channel hasn't got enough data to
            fulfill read request
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus.Closed">
            <summary>
            Read operation failed, channel had been closed
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus.DeadPeer">
            <summary>
            Read operation failed, channel is going to be closed as remote
            peer doesn't reply to keep-alive pings
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.ReadStatus.Cancelled">
            <summary>
            not used
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.SslStreamFactory">
             <summary>
             Factory for creating SslStream instances.
            
             Requirements to the implementations:
             - transport stream must be left open after SslStream close
             - encryption is required
             - factory doesn't do authentication of SslStream
             </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus.Success">
            <summary>
            Write operation succeeded, data were sent to peer
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus.Cancelled">
            <summary>
            not used
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus.Closed">
            <summary>
            Write operation failed, channel had been closed
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.WriteStatus.WriteBufferFull">
            <summary>
            Write operation failed, number of pending bytes to write were
            greater than high watermark
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.ApiSession.AliveCheckConfig.d_inactivityTime">
            <summary>
            Period in milliseconds, during which, no read activity will
            result in a probe
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.ApiSession.AliveCheckConfig.d_aliveResponseTimeout">
            <summary>
            Timeout in seconds for receiving the response to a probe
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.ApiSession.AliveCheckConfig.d_inactivityRetries">
            <summary>
            Maximum number of consecutive failed probes after which the
            peer is treated dead. Should be (>=1) for probes to be sent
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.ApiSession.keepAliveHealthCheckCallback">
            Callback to be implemented by the derived session class in order
            to provide feedback to the keep-alive mechanism.
            This method will be called prior to actually sending the keep-alive
            out, returning false will cancel sending of the keep-alive.
            The base session provides a default implementation that always
            returns true.
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.CompressionStatus">
            <summary>
            Compression status of a connection.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.CompressionStatus.Compressed">
            <summary>
            Data is compressed.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.CompressionStatus.Uncompressed">
            <summary>
            Data is uncompressed
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.EncryptionStatus">
            <summary>
            Encryption status of a connection.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.EncryptionStatus.Clear">
            <summary>
            Connection is not encrypted.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.EncryptionStatus.Verified">
            <summary>
            Handshake done but connection is not encrypted due to TLS stop.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.EncryptionStatus.Encrypted">
            <summary>
            Connection is encrypted.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.Negotiation.ApiClientSessionNegotiator.State">
            <summary>
            Only used for testing purposes.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.Negotiation.ApiClientSessionNegotiator.ValidateGrantedCompression(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog)">
            <summary>
            Validates the granted compression in prolog.
            </summary>
            <para>A maximum of only 1 compression is expected to be set</para>
            <param name="prolog">prolog </param>
            <returns>
            returns true if there is no granted compression and false if otherwise
            supported
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.Negotiation.ApiClientSessionNegotiator.StartChannelCompressionIfNecessary(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer)">
            <summary>
            Creates a compression channel on top of existing channel if compression is required
            </summary>
            <param name="remainingBytes">
            All remaining bytes in the <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer"/> will be
            discarded momentarily because we are swapping out the
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Network.CbStreamChannel"/> which owns the
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer"/> we are reading from. The remaining
            bytes in the <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer"/> are supposed to be
            compressed at this point, so we actually want to feed them
            back into the <see cref="T:System.IO.Stream"/> chain so that the bytes
            are processed by the zlib inflater. It is a requirement that
            the provided <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer"/> position is advanced to
            account for all bytes that are considered consumed at this point.
            </param>
            <returns> Returns the negotiation result</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.Negotiation.NegotiationCallback">
            <summary>
            The callback invoked to either create a new API session upon success or
            report the error upon failure after the API session negotiation is
            completed.
            </summary>
            <param name="result">The negotiation status.</param>
            <param name="channel">
            The channel where the new API session is going to communicate with the
            endpoint.
            </param>
            <param name="sessionInfo">The API session configurations.</param>
            <param name="errorInfo">The detailed failure error.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionFactory.SessionCreationCb.handleSessionCreationStatus(Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionFactory.SessionCreationStatus,Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.Session,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ErrorInfo)">
            <summary>
            The callback invoked after either a new API session is created
            upon session negotiation success or error is reported upon
            failure.
            </summary>
            <param name="status">The API session negotiation status</param>
            <param name="session">
            The new API session if negotiation is successful.
            </param>
            <param name="errorInfo">
            The detailed error if negotiation fails.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionInfo.EncryptionStatus">
            <summary>
            Encryption status of a connection.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionInfo.CipherDescription">
            <summary>
            Description of the cipher used for connection encryption.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncDispatcher">
            <summary>
            Provides a formal way to perform work asynchronously when you do not
            intend or have the ability to check up on it later.
            <para>
            The intended use case for this interface is for asynchronous callback
            invocation. This is meant to be a solution for a great many deadlock
            scenarios and lock reentrance scenarios.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncDispatcher.Dispatch(System.Action)">
            <summary>
            Executes the specified <see cref="T:System.Action"/> asynchronously.
            <para>
            There is no facility for the caller to receive any result, receive
            any status, or cancel the specified work. This is a fire-and-forget
            system.
            </para>
            </summary>
            <param name="action">
            The work which is to be performed. It must not be null.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncSequentialDispatcher">
            <summary>
            Provides a formal way to perform work asynchronously but in sequential
            order.
            <para>
            The intended use case for this interface is to prevent lock reentrance
            by asynchronous event dispatch where it's also required to maintain
            the order of events, for example, in <see cref="T:Bloomberglp.Blpapi.Internal.ClusterServiceHandler"/>.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncSequentialDispatcher.Dispatch(System.Action)">
            <summary>
            Executes the specified <see cref="T:System.Action"/> asynchronously.
            <para>
            There is no facility for the caller to receive any result, receive
            any status, or cancel the specified work. This is a fire-and-forget
            system.
            </para>
            </summary>
            <param name="action">
            The work which is to be performed. It must not be null.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Logger">
             <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextException">
            <summary>
            Provides a convenient wrapper for exception propagation to attach an
            async context.
            <para>
            The way this is meant to be used is that in a location where exceptions
            may propagate and there is also an <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker"/> in
            use, exceptions can be caught and then this exception can be thrown with
            the original exception as the <c>innerException</c>. That way, when the
            propagated exception is inspected, the viewer can see both the original
            exception as well as the asynchronous context which caused this to
            occur. In practice, this perhaps means that almost all the time that an
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker"/> is in use, in any context, there
            should be an exception handler that introduces this exception as a
            wrapper.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker">
            <summary>
            Provides a tool to record mementos to help correlate asynchronous work
            with whatever started that work.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.Parent">
            <summary>
            Gets the context that created this one, if there is one, otherwise
            <c>null</c>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.Memento">
            <summary>
            Gets the <see cref="T:System.Object"/> that was used to mark this context.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.CreateWithString(System.String)">
            <summary>
            Creates a new context with a <see cref="T:System.String"/> as the memento.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.CreateWithMemento(System.Object)">
            <summary>
            Creates a new context with an <see cref="T:System.Object"/> as the memento.
            <para>
            It is important that the specified <see cref="T:System.Object"/> have a
            useful <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.ToString"/> override.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.CreateWithStackTrace">
            <summary>
            Creates a new context with the current call stack as the memento.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.AddString(System.String)">
            <summary>
            Chains a new context off of an existing one, with a
            <see cref="T:System.String"/> as the memento.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.AddMemento(System.Object)">
            <summary>
            Chains a new context off of an existing one, with an
            <see cref="T:System.Object"/> as the memento.
            <para>
            It is important that the specified <see cref="T:System.Object"/> have a
            useful <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.ToString"/> override.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.AsyncContextTracker.AddStackTrace">
            <summary>
            Chains a new context off of an existing one, with the current
            call stack as the memento.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.BlpAssert">
            <summary>
            Provides a suite of methods that are intended to be used to validate
            conditions.
            </summary>
            <remarks>
            <para>
            These methods should be used instead of calling framework assert
            methods directly, because this makes sure that failures are logged.
            </para>
            <para>
            The methods provided in this class are marked with varying
            [Conditional("...")] arrangements corresponding to the supported build
            configurations. This affects both the method call itself and the
            evaluation of any expressions passed as parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.BlpAssert.Release(System.Boolean,System.String)">
            <summary>
            Ensures that the specified condition is true.
            <para>
            The condition is validated in all builds, including optimized.
            </para>
            <para>
            Use this method when the runtime performance cost of validating a
            condition is not particularly high and/or the impact of
            unexpected function behavior is unacceptably negative.
            </para>
            <para>
            If you are dynamically creating the message string, use the
            overload that accepts a message function instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.BlpAssert.Release(System.Boolean,System.Func{System.String})">
            <summary>
            Ensures that the specified condition is true.
            <para>
            The condition is validated in all builds, including optimized.
            </para>
            <para>
            Use this method when the runtime performance cost of validating a
            condition is not particularly high and/or the impact of
            unexpected function behavior is unacceptably negative.
            </para>
            <para>
            If you are not dynamically creating the message string, use the
            overload that accepts a string message instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.BlpAssert.Release(System.Boolean)">
            <summary>
            Ensures that the specified condition is true.
            <para>
            The condition is validated in all builds, including optimized.
            </para>
            <para>
            Use this method when the runtime performance cost of validating a
            condition is not particularly high and/or the impact of
            unexpected function behavior is unacceptably negative.
            </para>
            <para>
            If you are dynamically creating the message string, use the
            overload that accepts a message function instead of this one.
            </para>
            <para>
            Please avoid using this overload for new code, it is better to use
            an overload that takes a message.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.BlpAssert.Debug(System.Boolean,System.String)">
            <summary>
            Ensures that the specified condition is true.
            <para>
            The condition is validated only in debug builds.
            </para>
            <para>
            Use this method when the runtime performance cost of validating
            a condition is too high to assume it is always okay to perform
            in a release build. This is expected to be the most common case.
            </para>
            <para>
            If you are dynamically creating the message string, use the
            overload that accepts a message function instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.BlpAssert.Debug(System.Boolean,System.Func{System.String})">
            <summary>
            Ensures that the specified condition is true.
            </summary>
            <remarks>
            <para>
            The condition is validated only in debug builds.
            </para>
            <para>
            Use this method when the runtime performance cost of validating
            a condition is too high to assume it is always okay to perform
            in a release build. This is expected to be the most common case.
            </para>
            <para>
            If you are not dynamically creating the message string, use the
            overload that accepts a string message instead of this one.
            </para>
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.BlpAssert.Debug(System.Boolean)">
            <summary>
            Ensures that the specified condition is true.
            <para>
            The condition is validated only in debug builds.
            </para>
            <para>
            Use this method when the runtime performance cost of validating
            a condition is too high to assume it is always okay to perform
            in a release build. This is expected to be the most common case.
            </para>
            <para>
            If you are dynamically creating the message string, use the
            overload that accepts a message function instead of this one.
            </para>
            <para>
            Please avoid using this overload for new code, it is better to use
            an overload that takes a message.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.StringCharacterIterator">
            <author>  Siva Somu (ssomu) Converted by Chao Yao (cyao3)</author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP">
            <summary>
            Utility class to get remote Display IP address.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WTS_CLIENT_ADDRESS">
            <summary>Structure for Client IP Address
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WTS_CLIENT_ADDRESS.iAddressFamily">
            <summary>
            This member can be AF_INET, AF_IPX, AF_NETBIOS, or AF_UNSPEC.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WTS_CLIENT_ADDRESS.bAddress">
            <summary>
            Client network address
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_CLIENT_ADDRESS">
            <summary>
            Structure which will hold the client IP address.
            WF_CLIENT_ADDRESS Declaration from WFAPI.h
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_CLIENT_ADDRESS.AddressFamily">
            <summary>
            This member can be AF_INET, AF_IPX, AF_NETBIOS, or AF_UNSPEC.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_CLIENT_ADDRESS.Address">
            <summary>
            Client network address
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS">
            <summary>
            WF_INFO_CLASS Enumerator.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFVersion">
            <summary>
            WFVersion OSVERSIONINFO
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFInitialProgram">
            <summary>
            WFInitialProgram NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFWorkingDirectory">
            <summary>
            WFWorkingDirectory NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFOEMId">
            <summary>
            WFOEMId NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFSessionId">
            <summary>
            WFSessionId ULONG = unsigned long
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFUserName">
            <summary>
            WFUserName NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFWinStationName">
            <summary>
            WFWinStationName NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFDomainName">
            <summary>
            WFDomainName NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFConnectState">
            <summary>
            WFConnectState INT
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientBuildNumber">
            <summary>
            WFClientBuildNumber USHORT
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientName">
            <summary>
            WFClientName NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientDirectory">
            <summary>
            WFClientDirectory NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientProductId">
            <summary>
            WFClientProductId USHORT
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientAddress">
            <summary>
            WFClientAddress WF_CLIENT_ADDRESS
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientDisplay">
            <summary>
            WFClientDisplay WF_CLIENT_DISPLAY
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientCache">
            <summary>
            WFClientCache WF_CLIENT_CACHE
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientDrives">
            <summary>
            WFClientDrives WF_CLIENT_DRIVES
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFICABufferLength">
            <summary>
            WFICABufferLength ULONG
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFApplicationName">
            <summary>
            WFApplicationName NULL-terminated string
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientInfo">
            <summary>
            WFClientInfo WF_CLIENT_INFO
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFUserInfo">
            <summary>
            WFUserInfo WF_USER_INFO
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFAppInfo">
            <summary>
            WFAppInfo WF_APP_INFO
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFClientLatency">
            <summary>
            WFClientLatency WF_CLIENT_LATENCY
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS.WFSessionTime">
            <summary>
            WFSessionTime WF_SESSION_TIME
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_CURRENT_SERVER">
            <summary>
            This is a pointer to the current server. A NULL pointer will always point
            to the current server.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_CURRENT_SESSION">
            <summary>
            This is the ID of the current session. -1 will always poin to the
            current session.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WFFreeMemory32(System.IntPtr)">
            <summary>
            This function frees memory that was allocated using WFAPI
            functions.
            </summary>
            <param name="pMemory">A pointer to the memory that will be
            freed.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WFFreeMemory64(System.IntPtr)">
            <summary>
            This function frees memory that was allocated using WFAPI
            functions.
            </summary>
            <param name="pMemory">A pointer to the memory that will be
            freed.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WFQuerySessionInformation32(System.IntPtr,System.Int32,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS,System.IntPtr@,System.Int32@)">
            <summary>
            Function gathers information about an specific session on an
            specific server.
            </summary>
            <param name="hServer">Open Handle to the server which contains
            the session to query the current server use NULL or
            WF_CURRENT_SERVER</param>
            <param name="iSessionId">Session ID of the session which you
            are trying to acquire information from, use -1 or
            WF_CURRENT_SESION to gather information
            about the current session.</param>
            <param name="Info">WF_INFO_CLASS parameter which determines the
            type of data to gather.</param>
            <param name="ppBuffer">A pointer to the address of a variable
            that will receive information about the specified session. The
            format and contents of the data depend on the specified
            information class being queried. The buffer is allocated within
            this function and is deallocated by using the WFFreeMemory()
            function.</param>
            <param name="pBytesReturned">A pointer to a variable that will
            receive the number of returned bytes. If this value is NULL,
            the byte count is not returned.</param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WFQuerySessionInformation64(System.IntPtr,System.Int32,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.WF_INFO_CLASS,System.IntPtr@,System.Int32@)">
            <summary>
            Function gathers information about an specific session on an
            specific server.
            </summary>
            <param name="hServer">Open Handle to the server which contains
            the session to query the current server use NULL or
            WF_CURRENT_SERVER</param>
            <param name="iSessionId">Session ID of the session which you
            are trying to acquire information from, use -1 or
            WF_CURRENT_SESION to gather information
            about the current session.</param>
            <param name="Info">WF_INFO_CLASS parameter which determines the
            type of data to gather.</param>
            <param name="ppBuffer">A pointer to the address of a variable
            that will receive information about the specified session. The
            format and contents of the data depend on the specified
            information class being queried. The buffer is allocated within
            this function and is deallocated by using the WFFreeMemory()
            function.</param>
            <param name="pBytesReturned">A pointer to a variable that will
            receive the number of returned bytes. If this value is NULL,
            the byte count is not returned.</param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.GetCitrixAddress">
            <summary>
            Returns display IP address by calling Citrix DLL, or 'null'
            if call failed or no Citrix display found.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.GetRDPProtocolType">
            <summary>
            Returns remote display type from RDP (WTS) API, or -1 if the call
            failed or no RDP display found.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.GetRDPAddress">
            <summary>
            Returns remote display address from RDP (WTS) API, or 'null' if
            the call failed or no RDP display found.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.GetDisplayIP">
            <summary>
            Returns display IP address by calling Citrix DLL or Windows RDP
            DLL.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.GetDisplayIP(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.DisplayIP.IpAddressType)">
            <summary>
            Determine the IP address of the active remote display of the
            specified <paramref name="type"/> or return <c>null</c> if no
            remote display can be detected.  The supported display types are
            <c>ADDR_WF_QUERYSESSIONINFORMATION</c> for Citrix (WFAPI) remote
            protocol or <c>ADDR_WTS_QUERYSESSIONINFORMATION</c> for RDP.
            </summary>
            <param name="type">Type of the remote display to detect</param>
            <returns>The <c>IPAddress</c> for the remote display, or
            <c>null</c> if no remote display of this type is detected.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Guard">
            <summary>
            A collection of static utility methods to check inputs coming from the
            public interface.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Guard.ParameterNotNull(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the given
            <paramref name="argument"/> is null.
            </summary>
            <param name="argument">The argument to check.</param>
            <param name="parameterName">
            The name of the parameter being checked.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Guard.CastToInternal``1(System.Object,System.String)">
            <summary>
            Casts the <paramref name="argument"/> of a public-facing type to
            the given <typeparamref name="TExpected"/> type.
            <para>
            Use this overload for cases where the thrown exception isn't
            <see cref="T:System.InvalidCastException"/>.
            </para>
            </summary>
            <typeparam name="TExpected">The expected target cast.</typeparam>
            <param name="argument">The argument to check.</param>
            <param name="message">The message for the exception.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="argument"/> is not of type
            <typeparamref name="TExpected"/>.
            </exception>
            <returns>
            The <paramref name="argument"/> cast to <typeparamref name="TExpected"/>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Guard.GetName(System.String,System.String)">
            <summary>
            Checks that the given string already exists and returns it. If not
            a <see cref="T:Bloomberglp.Blpapi.NotFoundException"/> is thrown.
            </summary>
            <param name="nameAsString">
            The <see cref="T:Bloomberglp.Blpapi.Name"/> as a string.
            </param>
            <param name="message">The message for the exception.</param>
            <returns>
            The <see cref="T:Bloomberglp.Blpapi.Name"/> represented by <paramref name="nameAsString"/>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Guard.NameNullCheck(Bloomberglp.Blpapi.Name,System.String)">
            <summary>
            Checks that the given <see cref="T:Bloomberglp.Blpapi.Name"/> is not null or equal to
            <see cref="F:Bloomberglp.Blpapi.Name.NullName"/> otherwise a
            <see cref="T:Bloomberglp.Blpapi.NotFoundException"/> is thrown.
            </summary>
            <param name="name">
            The <see cref="T:Bloomberglp.Blpapi.Name"/> to check.
            </param>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1">
            <summary>
            Provides a standard implementation for <see cref="M:System.Object.GetHashCode"/> overrides.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1.Hash``1(``0)">
            <summary>
            Generates a hash of the specified value.
            </summary>
            <remarks>
            Value types will not be boxed as long as they implement
            <see cref="T:System.IEquatable`1"/>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1.HashEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates a hash of each value in the specified enumerable.
            </summary>
            <remarks>
            Value types will not be boxed as long as they implement
            <see cref="T:System.IEquatable`1"/>.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1.Code">
            <summary>
            Provides a fluent interface to chain hashing of all relevant fields
            of a class together for a final implicitly usable result.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1.Code.#ctor(System.Int32)">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1.Code"/> instance from an existing hash code value.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1.Code.op_Implicit(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode{`0}.Code)~System.Int32">
            <summary>
            Provides an implicit cast to <see cref="T:System.Int32"/> so that it is
            not necessary to perform a cast to return the final hash value.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1.Code.Hash``1(``0)">
            <summary>
            Generates a hash from the existing hash and the specified value.
            </summary>
            <remarks>
            Value types will not be boxed as long as they implement
            <see cref="T:System.IEquatable`1"/>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashCode`1.Code.HashEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates a hash from the existing hash and each value in the
            specified enumerable.
            </summary>
            <remarks>
            Value types will not be boxed as long as they implement
            <see cref="T:System.IEquatable`1"/>.
            </remarks>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.DEFAULT_INITIAL_CAPACITY">
            The default initial capacity - MUST be a power of two.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.MAXIMUM_CAPACITY">
            The maximum capacity, used if a higher value is implicitly specified
            by either of the constructors with arguments.
            MUST be a power of two .
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.DEFAULT_LOAD_FACTOR">
             The load factor used when none specified in constructor.
            
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.table">
            The table, resized as necessary. Length MUST Always be a power of two.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.size">
            The number of key-value mappings contained in this identity hash map.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.threshold">
            The next size value at which to resize (capacity * load factor).
            @serial
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.loadFactor">
             The load factor for the hash table.
            
             @serial
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.modCount">
            The number of times this HashMap has been structurally modified
            Structural modifications are those that change the number of mappings in
            the HashMap or otherwise modify its internal structure (e.g.,
            rehash).  This field is used to make iterators on Collection-views of
            the HashMap fail-fast.  (See ConcurrentModificationException).
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.#ctor(System.Int32,System.Single)">
             Constructs an empty <tt>HashMap</tt> with the specified initial
             capacity and load factor.
            
             @param  initialCapacity The initial capacity.
             @param  loadFactor      The load factor.
             @throws IllegalArgumentException if the initial capacity is negative
                     or the load factor is nonpositive.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.#ctor(System.Int32)">
             Constructs an empty <tt>HashMap</tt> with the specified initial
             capacity and the default load factor (0.75).
            
             @param  initialCapacity the initial capacity.
             @throws IllegalArgumentException if the initial capacity is negative.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.#ctor">
            Constructs an empty <tt>HashMap</tt> with the default initial capacity
            (16) and the default load factor (0.75).
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.indexFor(System.Int32,System.Int32)">
            Returns index for hash code h.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.Count">
             Returns the number of key-value mappings in this map.
            
             @return the number of key-value mappings in this map.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.isEmpty">
             Returns <tt>true</tt> if this map contains no key-value mappings.
            
             @return <tt>true</tt> if this map contains no key-value mappings.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.GetValue(System.Int32)">
             Returns the value to which the specified key is mapped in this identity
             hash map, or <tt>null</tt> if the map contains no mapping for this key.
             A return value of <tt>null</tt> does not <i>necessarily</i> indicate
             that the map contains no mapping for the key; it is also possible that
             the map explicitly maps the key to <tt>null</tt>. The
             <tt>containsKey</tt> method may be used to distinguish these two cases.
            
             @param   key the key whose associated value is to be returned.
             @return  the value to which this map maps the specified key, or
                      <tt>null</tt> if the map contains no mapping for this key.
             @see #put(Object, Object)
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.containsKey(System.Int32)">
             Returns <tt>true</tt> if this map contains a mapping for the
             specified key.
            
             @param   key   The key whose presence in this map is to be tested
             @return <tt>true</tt> if this map contains a mapping for the specified
             key.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.resize(System.Int32)">
             Rehashes the contents of this map into a new array with a
             larger capacity.  This method is called automatically when the
             number of keys in this map reaches its threshold.
            
             If current capacity is MAXIMUM_CAPACITY, this method does not
             resize the map, but sets threshold to Integer.MAX_VALUE.
             This has the effect of preventing future calls.
            
             @param newCapacity the new capacity, MUST be a power of two;
                    must be greater than current capacity unless current
                    capacity is MAXIMUM_CAPACITY (in which case value
                    is irrelevant).
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.transfer(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.Entry[])">
            Transfer all entries from current table to newTable.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.remove(System.Int32)">
             Removes the mapping for this key from this map if present.
            
             @param  key key whose mapping is to be removed from the map.
             @return previous value associated with specified key, or <tt>null</tt>
                     if there was no mapping for key.  A <tt>null</tt> return can
                     also indicate that the map previously associated <tt>null</tt>
                     with the specified key.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.removeEntryForKey(System.Int32)">
            Removes and returns the entry associated with the specified key
            in the HashMap.  Returns null if the HashMap contains no mapping
            for this key.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.clear">
            Removes all mappings from this map.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.Entry.#ctor(System.Int32,System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.Entry)">
            Create new entry.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.addEntry(System.Int32,System.Int32,System.Int32,System.Int32)">
             Add a new entry with the specified key, value and hash code to
             the specified bucket.  It is the responsibility of this
             method to resize the table if appropriate.
            
             Subclass overrides this to alter the behavior of put method.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.HashMapIntKeyIntValue.createEntry(System.Int32,System.Int32,System.Int32,System.Int32)">
             Like addEntry except that this version is used when creating entries
             as part of Map construction or "pseudo-construction" (cloning,
             deserialization).  This version needn't worry about resizing the table.
            
             Subclass overrides this to alter the behavior of HashMap(Map),
             clone, and readObject.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ObjectEx.Equals``1(``0,``0)">
            <summary>
            Provides a standard implementation of a typed Equals comparison
            that handles nullability safely and avoids calling the static
            object.Equals implementation which would ultimately require a
            virtual function call.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ObjectEx.EqualsClass``1(``0,System.Object)">
            <summary>
            Provides a standard implementation of an object.Equals override
            that handles nullability safely, and forwards the comparison effort
            to an <see cref="T:System.IEquatable`1"/> implementation.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ObjectEx.EqualsStruct``1(``0,System.Object)">
            <summary>
            Provides a standard implementation of an object.Equals override
            that handles nullability safely, and forwards the comparison effort
            to an <see cref="T:System.IEquatable`1"/> implementation.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition">
            <summary>
            Provides a suite of methods that are intended to be used to validate
            method preconditions.
            <para>
            The methods provided in this class are marked with varying
            [Conditional("...")] arrangements corresponding to the supported build
            configurations. This affects both the method call itself and the
            evaluation of any expressions passed as parameters.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.Release(System.Boolean,System.String)">
            <summary>
            Ensures that the specified precondition is true.
            <para>
            The precondition is validated in all builds, including optimized.
            </para>
            <para>
            Use this method when the runtime performance cost of validating a
            precondition is not particularly high and/or the impact of
            undefined function behavior is unacceptably negative.
            </para>
            <para>
            If you are dynamically creating the message string, use the
            overload that accepts a message function instead of this one.
            </para>
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.PreconditionException">
            Thrown when the specified precondition is violated.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.Release(System.Boolean,System.Func{System.String})">
            <summary>
            Ensures that the specified precondition is true.
            <para>
            The precondition is validated in all builds, including optimized.
            </para>
            <para>
            Use this method when the runtime performance cost of validating a
            precondition is not particularly high and/or the impact of
            undefined function behavior is unacceptably negative.
            </para>
            <para>
            If you are not dynamically creating the message string, use the
            overload that accepts a string message instead of this one.
            </para>
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.PreconditionException">
            Thrown when the specified precondition is violated.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.ReleaseLogAndContinue(System.Boolean,System.String)">
            <summary>
            Checks that the specified precondition is true.
            <para>
            The precondition is checked in all builds, including release.
            However, a violation will not stop execution; it will only log the
            error.
            </para>
            <para>
            Use this method when you are concerned that throwing an exception
            would result in an unacceptable catastrophic failure, but the
            precondition validation has a runtime performance cost that is
            otherwise acceptable for a release build.
            </para>
            <para>
            If you are dynamically creating the message string, use the
            overload that accepts a message function instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.ReleaseLogAndContinue(System.Boolean,System.Func{System.String})">
            <summary>
            Checks that the specified precondition is true.
            <para>
            The precondition is checked in all builds, including release.
            However, a violation will not stop execution; it will only log the
            error.
            </para>
            <para>
            Use this method when you are concerned that throwing an exception
            would result in an unacceptable catastrophic failure, but the
            precondition validation has a runtime performance cost that is
            otherwise acceptable for a release build.
            </para>
            <para>
            If you are not dynamically creating the message string, use the
            overload that accepts a string message instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.Debug(System.Boolean,System.String)">
            <summary>
            Ensures that the specified precondition is true.
            <para>
            The precondition is validated only in debug and audit builds.
            </para>
            <para>
            Use this method when the runtime performance cost of validating
            a precondition is too high to assume it is always okay to perform
            in a release build. This is expected to be the most common case.
            </para>
            <para>
            If you are dynamically creating the message string, use the
            overload that accepts a message function instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.Debug(System.Boolean,System.Func{System.String})">
            <summary>
            Ensures that the specified precondition is true.
            <para>
            The precondition is validated only in debug and audit builds.
            </para>
            <para>
            Use this method when the runtime performance cost of validating
            a precondition is too high to assume it is always okay to perform
            in a release build. This is expected to be the most common case.
            </para>
            <para>
            If you are not dynamically creating the message string, use the
            overload that accepts a string message instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.Audit(System.Boolean,System.String)">
            <summary>
            Ensures that the specified precondition is true.
            <para>
            The precondition is validated only in audit builds.
            </para>
            <para>
            Use this method when the runtime performance cost of validating a
            precondition is particularly high or requires something other than
            constant-time to perform such as O(n) with an unknown or large 'n'.
            </para>
            <para>
            If you are dynamically creating the message string, use the
            overload that accepts a message function instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.Audit(System.Boolean,System.Func{System.String})">
            <summary>
            Ensures that the specified precondition is true.
            <para>
            The precondition is validated only in audit builds.
            </para>
            <para>
            Use this method when the runtime performance cost of validating a
            precondition is particularly high or requires something other than
            constant-time to perform such as O(n) with an unknown or large 'n'.
            </para>
            <para>
            If you are not dynamically creating the message string, use the
            overload that accepts a string message instead of this one.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.ParameterNotNull``1(``0,System.String)">
            <summary>
            Ensures that the specified <paramref name="parameter"/> value is
            not null.
            <para>
            The precondition is validated in all builds, including optimized.
            However, it will only log and assert violations.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.ParameterNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that the specified string <paramref name="parameter"/>
            value is not null or whitespace.
            <para>
            The precondition is validated in debug builds.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Precondition.Fail(System.String)">
            <summary>
            Expresses an explicit violation of a precondition.
            <para>
            This method is useful when your code already does the work of
            checking the precondition and you already know the precondition
            was violated.
            </para>
            <para>
            An example of this is a switch statement where the default case is
            always a violation of a precondition. You could check that the
            value is not going to hit the default case before entering the
            switch statement, but that would be redundant and less
            clear.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.PrintUtil">
            <summary>
            Summary description for PrintUtil.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ResourceLoader`1">
            <summary>
            Provides an easy way to load embedded resources.
            </summary>
            <typeparam name="TOwner">
            The owner must be a class that contains a set of resource properties.
            <para>
            The owner type is used to determine what assembly contains the relevant
            embedded resources and the namespace of the owner type is used to
            determine the fully qualified name of the relevant resources when the
            default constructor of this class is used.
            </para>
            </typeparam>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ResourceLoader`1.#ctor">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ResourceLoader`1"/> using the namespace
            of <typeparamref name="TOwner"/> as the resource base path.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ResourceLoader`1.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ResourceLoader`1"/>.
            <para>
            Use this constructor overload when you want to override the default
            behavior of the base path being the same as the namespace of the
            <typeparamref name="TOwner"/>.
            </para>
            </summary>
            <param name="resourceBasePath">
            Specifies a resource path that should be prepended to all resource
            paths specified to the various load methods.
            <para>
            The point of this notion of a "base path" is that there are usually
            multiple related resources in a folder with a class that provides
            strongly typed properties to access each of the resources, and each
            of the related resources have the same path other than the actual
            embedded filename. Having a base path allows the individual
            accessors to only specify what differs in the path, i.e. the actual
            filename.
            </para>
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ResourceLoader`1.LoadString(System.String)">
            <summary>
            Loads the specified resource as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ResourceLoader`1.LoadBytes(System.String)">
            <summary>
            Loads the specified resource as a <see cref="T:byte[]"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender">
             <summary>
             Provides functions to append data to the specified file and rollover it
             if its size exceeds the configuration limit, both of which are
             synchronized across processes.
             </summary>
             <remarks>
             Calls the <see cref="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.Append(System.Byte[])">Append</see> to append data into
             the specified file. Before appending data, the method checks whether
             the file size exceeds the limit. If so, rolls over the files, which
             moves [NAME].[n-1].log to [NAME].[n].log, ..., [NAME].1.log to
             [NAME].2.log and [NAME].log to [NAME].1.log, and clears [NAME].log.
             
             The appending and rollover is in the synchronization between processes.
             The process synchronization is achieved by locking the opened file
             [NAME].log.lck. This design is based on the following facts. File
             appending may not be atomic for all platforms. The performance of
             locking file is acceptable and opening file is expensive. Our test
             shows locking and unlocking opened file without contention can be
             executed one million times in a few seconds. Directly locking the log
             file makes file copying in rollover fail.
            
             It is possible that the log file path may be in a location where file
             locking is not possible (e.g. an NFS drive). In this case, we fallback
             to inserting a guid into the log filename instead of using a lock
             file. This ensures that there can be no contention with another process
             writing to the same log file.
             
             Log file is not opened as "FileMode.Append" because in this mode
             "FileStream" still needs to seek to the end of file before calling
             "Write" and it does not allow seek backward which is needed after
             log file is cleared. The low level file IO is much better than this.
             But it needs dllimport msvcrt.dll. The normal "FileMode.Write" is used.
             "Seek()" to end is called before writing and "Flush()" is called
             after writing.
             </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.FileLockGuard">
             <summary>
             Provides a proctor for non-exclusive lock on an opened FileStream
             </summary>
             <remarks>
             <para>
             Since the .Net runtime uses a garbage collector to manage object
             lifetimes, we need to use the "using" statement in
             conjunction with the <see cref="T:System.IDisposable"/> interface to
             provide for syntactically-scoped locking (i.e. locks that are
             acquired when a block is entered and released when it is exited).
             </para>
             <para>
             Usage of this class is expected to take the following basic form:
             <example>
             class Foo
             {
                 private FileStream d_lockFile;
            
                 public void Func()
                 {
                     // ...
                     using (new FileLockGuard(d_lockFile))
                     {
                         // ...
                     }
                 }
             }
             </example>
             </para>
             </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.FileLockGuard.#ctor(System.IO.FileStream,System.TimeSpan)">
            <summary>
            Constructs a new <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.FileLockGuard"/> object with the
            specified <paramref name="lockFile"/> and acquires lock
            on the specified <paramref name="lockFile"/>.
            </summary>
            <param name="lockFile">a <see cref="T:System.IO.FileStream"/> object;
            cannot be null</param>
            <param name="timespan">
            The maximum amount of time permitted to retry acquiring the file lock.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.FileLockGuard.Lock(System.TimeSpan)">
            <summary>
            Acquires the exclusive lock of the opened lock file. Blocks
            until acquires it.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.FileLockGuard.Unlock">
            <summary>
            Releases the exclusive lock of the opened lock file.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a RollingOverFileAppender object.
            </summary>
            <param name="logFileName">the name part before file extension that
            can be a service name
            </param>
            <param name="logFileFolder">the folder log files locate
            </param>
            <param name="maxFileSize">the limit of file size
            </param>
            <param name="maxBackupIndex">maximum log file backup index
            (e.g. 2 means name.log, name.1.log and name.2.log)
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.Guid">
            <summary>
            Used for a unique filename when file locking is not possible.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.OpenLogFile">
            <summary>
            Opens the log file and the lock file.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.Append(System.Byte[])">
            <summary>
            Appends the specified 'text' into the log file. Before appending,
            if the file size is greater than the limit, rolls over log files.
            It is synchronized across processes by locking the file
            [NAME].log.lck when possible, with a fallback mechanism of the log
            file having a guid inserted in the name so that there can be no
            contention for writing to the same log file across processes.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.GetLogFileName(System.Int32)">
            <summary>
            Gets the file path of the log file at the specified 'backupIndex'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.NeedRollOver">
            <summary>
            Returns whether log files need to be rolled over. This also makes
            log file stream point to the end of the file since other processes
            could append or clear the log file.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.RollingOverFileAppender.RollOver">
            <summary>
            Rolls over log files.  which moves [NAME].[n-1].log to
            [NAME].[n].log, ..., [NAME].1.log to [NAME].2.log and
            [NAME].log to [NAME].1.log, and clears [NAME].log. Returns true
            on success and false otherwise.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ThreadingUtil">
            <summary>
            This class augments the <see cref="N:System.Threading"/> namespace by
            adding missing components like lock guards.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ThreadingUtil.ReaderLockGuard">
             <summary>
             Provide a proctor for non-exclusive access to a resource protected
             by a <see cref="T:System.Threading.ReaderWriterLock"/>.
             </summary>
             <remarks>
             <para>
             Since the .Net runtime uses a garbage collector to manage object
             lifetimes, we need to use the <see langword="using"/> statement in
             conjunction with the <see cref="T:System.IDisposable"/> interface to
             provide for syntactically-scoped locking (i.e. locks that are
             acquired when a block is entered and released when it is exited).
             </para>
             <para>
             Usage of this class is expected to take the following basic form:
             <example>
             class Foo
             {
                 private ReaderWriterLock d_lock;
            
                 public void Func()
                 {
                     // ...
                     using (new ThreadingUtil.ReaderLockGuard(d_lock))
                     {
                         // operations which read but do not modify shared resources...
                     }
                 }
             }
             </example>
             </para>
             </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ThreadingUtil.ReaderLockGuard.#ctor(System.Threading.ReaderWriterLock)">
            <summary>
            Construct a new <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ThreadingUtil.ReaderLockGuard"/> object with the
            specified <paramref name="rwlock"/> and acquire a reader lock
            on the specified <paramref name="rwlock"/>.
            </summary>
            <param name="rwlock">a <see cref="T:System.Threading.ReaderWriterLock"/> object; cannot be
            null</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ThreadingUtil.WriterLockGuard">
             <summary>
             Provide a proctor for exclusive access to a shared resource
             protected by a <see cref="T:System.Threading.ReaderWriterLock"/>.
             </summary>
             <remarks>
             <para>
             Since the .Net runtime uses a garbage collector to manage the
             lifetime of object, we need to use the <see langword="using"/>
             statement in conjunction with the <see cref="T:System.IDisposable"/>
             interface to provide for syntactically-scoped locking (i.e. locks
             that are acquired when a block is entered and released when it is
             exited).
             </para>
             <para>
             Usage of this class is expected to take the following basic form:
             <example>
             class Foo
             {
                 private ReaderWriterLock d_lock;
            
                 public void Func()
                 {
                     // ...
                     using (new ThreadingUtil.WriterLockGuard(d_lock))
                     {
                         // operations which modify shared resources...
                     }
                 }
             }
             </example>
             </para>
             </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ThreadingUtil.WriterLockGuard.#ctor(System.Threading.ReaderWriterLock)">
            <summary>
            Construct a new <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ThreadingUtil.WriterLockGuard"/> object with the
            specified <paramref name="rwlock"/> and acquire a writer lock
            on the specified <paramref name="rwlock"/>.
            </summary>
            <param name="rwlock">a <see cref="T:System.Threading.ReaderWriterLock"/> object; cannot be
            null</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.TlsOptionsUtil.GetPublicKeySha1Hash(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            This hash is being used as a unique identifier for the certificate
            by apias. We will use this method to generate the same hash so that
            it will be easier to troubleshoot negotiation failures.
            </summary>
            <param name="cert">
            The certificate to extract the public key from.
            </param>
            <returns>
            Hash of the public key, or null if there were any errors.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Infrastructure.Xml.XmlDeserializer.Deserialize``1(System.String)">
            <summary>
            Deserializes XML from the given <paramref name="xml"/> string
            and loads the data into an object of type
            <typeparamref name="T"/>.
            <para>
            This class is intended to be used only to deserialize into classes
            automatically generated from XSD files. The deserializer will try
            to populate public properties from the content of the given XML.
            An object of type <typeparamref name="T"/> will always be returned
            except when an exception is thrown.
            </para>
            </summary>
            <typeparam name="T">
            The type of the object represented in the top node of the given
            XML.
            </typeparam>
            <param name="xml">
            A string containing an XML representation of an object of type
            <typeparamref name="T"/>.
            </param>
            <returns>
            The object represented by the <paramref name="xml"/> string.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Xml.XmlIgnoreProperty">
            <summary>
            Tags a Property which should be ignored by
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Xml.XmlDeserializer"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Infrastructure.Xml.XmlName">
            <summary>
            Sets the name of the XML element that is recognized by
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Xml.XmlDeserializer"/> during deserialization.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Infrastructure.Xml.XmlName.Name">
            <summary>
            The XML name of the element.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback">
            <summary>
            A delegate type for callbacks in an <c>EventImpl</c> object called when it
            is popped up from the event queue.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.EventImpl">
            <summary>
            This is abstract implementation of public interface <c>Event</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.EventImpl.InvokeAccessCallbacks">
            <summary>
            Call the callbacks in this event. The default is doing nothing.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.EventImpl.IsInternal">
            <summary>
            Gets whether it is an internal event that is not exposed to blpapi users.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher.StopOption">
             <summary> Enumerations for controlled shutdown of the EventDispatcher
            
             </summary>
             <author>  Siva Somu (ssomu)
             </author>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher.StopOption.SYNC">
            <summary> Stops the {@link EventDispatcher} and doesn't return until no more
            events are being processed
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher.StopOption.ASYNC">
            <summary> Stops the EventDispatcher and return immediately</summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher.NumThreads">
            <summary>
            The total number of threads.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView">
            <summary>
            This component provides an interface to get a connection
            for a specific service code.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView.UpdateConnection(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Update the specified best connection 'ctx' for the specified
            'serviceCode'.
            </summary>
            <param name="ctx"></param>
            <param name="serviceCode"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView.UpdateSubConnection(Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Update the specified best connection 'ctx' for the specified
            'service' for subscriptions.
            </summary>
            <param name="ctx"></param>
            <param name="service"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView.GetConnection(System.UInt32)">
            <summary>
            Return the connection which is the best route to send a request for
            the specified 'serviceCode'. If a connection could not be found
            return 'null'.
            </summary>
            <param name="serviceCode"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView.GetSubConnection(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Return the connection which is the best route to establish a
            subscription for the specified 'service'. If a connection could not
            be found return 'null'.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView.GetMostUsedConnection">
            <summary>
            Return the connection which is used by the most number of service
            codes. If a connection could not be found return 'null'.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView.GetAllSubServiceCodes(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Return all the service codes associated with the specified
            connection 'ctx' w.r.t to requests.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView.GetAllServiceCodes(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Return all the services associated with the specified connection
            'ctx' w.r.t to subscriptions.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionFailover">
            <summary>
            This is the protocol for a class that replaces "probing" for
            subscriptions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionFailover.Check(System.UInt32)">
            <summary>
            Check and trigger failover for the service with the specified
            'svcCode'.
            </summary>
            <param name="svcCode">The service code to check</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionFailover.CheckPending(System.UInt32)">
            <summary>
            Check and trigger failover for the service with the specified
            'svcCode' *only* *if* there's a pending failover for that service.
            </summary>
            <param name="svcCode">The service code to check</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionFailover.CheckAllPending">
            <summary>
            Check and trigger failover for all services that are currently
            pending.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionFailover.RemoveConnection(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notify this object that the specified connection is no longer
            available.  The implementation of this function should trigger
            failover for legacy subscriptions.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.SubscriptionProbeSendContext">
            <summary>
            The context for sending a subscription based probe
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionProbeInterface.GetSubscriptionServiceCodes(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Return the list of service codes needed to establish a subscription
            on the specified 'service'. TODO: find a better place to put this
            method. TODO: this should be made static, but is not to make
            testing easier.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionProbeInterface.Failover(System.UInt32)">
            <summary>
            Failover all the subscriptions for the specified 'serviceCode'. All
            the subscriptions that have not be established along with the ones
            that have been established will be re-established a new connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionProbeInterface.DoesSubscriptionExist(System.UInt32,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Return 'true' if there is an outstanding subscription for the
            specified 'serviceCode' on the specified 'service', otherwise
            return false. If the 'serviceCode' is not important (no data is
            received) for an established 'service', only the subscription
            requests that have not been established are considered.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionProbeInterface.GetSubscriptionForProbe(Bloomberglp.Blpapi.Internal.Interfaces.SubscriptionProbeSendContext,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Populate the specified 'probeContext' with the specified 'service'
            and the specified 'allocator' if a subscription (established or
            not) exists. Return 0 on success and a non zero value otherwise,
            which implies that their is no subscription for the 'service'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ISubscriptionProbeInterface.CreateUnsubscriptionRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,System.Int64)">
            <summary>
            Create an unsubscription request and populate the specified
            'prolog' and the specified 'blob' for the specified
            'subscriptionHandle'. Return 0 on success and a non zero value
            otherwise.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy">
            <summary>
            An interface defining a probe strategy. The strategy will be used to
            determine how to decide if a connection supports the particular service
            code or not.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.AddConnection(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Add the specified connection 'ctx' to the active connection list
            and update the specified 'state' with actions to be performed.
            </summary>
            <param name="state">The state that will be populated</param>
            <param name="activeConnections"></param>
            <param name="ctx">The ConnectionContext</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.RemoveConnection(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Remove the specified connection 'ctx' from probe management. This
            connection will *not* be used for any service codes.
            </summary>
            <param name="state"></param>
            <param name="activeConnections"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.AddServiceCodeOnConnection(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Add the specified 'serviceCode' for the specified 'ctx' and update
            the specified 'state' with the actions to be performed.
            </summary>
            <param name="state"></param>
            <param name="ctx"></param>
            <param name="serviceCode"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.RemoveServiceCodeOnConnection(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext},Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Removes the specified 'serviceCode' on the specified 'ctx' and
            update the specified 'state', with actions to be performed.
            </summary>
            <param name="state"></param>
            <param name="activeConnections"></param>
            <param name="ctx"></param>
            <param name="serviceCode"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.AddServiceCodeNoActiveConnection(System.UInt32)">
            <summary>
            Add the specified 'serviceCode' to management when there are no
            active connections. When a new connection comes up, the probe will
            continue and send the probe request on that connection.
            </summary>
            <param name="serviceCode"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ContinueFailoverIfNeeded(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext},System.UInt32)">
            <summary>
            Continue failover if needed for the specified 'serviceCode' and
            update the specified 'state' with actions to be performed. The
            specified 'activeConnectionList' will be used to determine the next
            connection for failover. This method is invoked whenever a new
            request on the specified 'serviceCode' is made.
            </summary>
            <param name="state"></param>
            <param name="activeConnections"></param>
            <param name="serviceCode"></param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.CancelContext">
            <summary>
            The context that is needed to cancel the request.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.CancelContext.Ctx">
            <summary>
            The connection context to send the cancel on
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.CancelContext.ProbeRequestId">
            <summary>
            The requestId for cancellation
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.NotificationContext">
            <summary>
            Context for service availability notification.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.NotificationContext.NotificationState">
            <summary>
            The service availability state.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.NotificationContext.ServiceCode">
            <summary>
            The service code
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.NotificationContext.Connection">
            <summary>
            The connection context
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.NotificationContext.#ctor(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.NotificationStates,System.UInt32,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Create an instance with the specified arguments.
            </summary>
            <param name="state"></param>
            <param name="serviceCode"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.NotificationStates">
            <summary>
            States for service availability notifications.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState">
            <summary>
            The state that determine what actions to perform.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState.ToNotify">
            <summary>
            List of NotificationContext
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState.ToCancel">
            <summary>
            List of CancelContext
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState.ToSend">
            <summary>
            List of SendContext
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState.ToRegisterTimer">
            <summary>
            List of TimerContext
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState.ToFailover">
            <summary>
            List of service codes to failover
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState.#ctor">
            <summary>
            Create an instance with all the properties empty.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ResponseCallback">
            <summary>
            The response callback that will be invoked when a response to probe
            request is received with the specified 'prolog', the specifed
            'payload', the specified 'probeRequestId', the specified 'ctx', the
            specified 'state', and the specified 'requestGuid'.
            </summary>
            <param name="state"></param>
            <param name="prolog"></param>
            <param name="payload"></param>
            <param name="probeRequestId"></param>
            <param name="ctx"></param>
            <param name="requestGuid"></param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.SendContext">
            <summary>
            The context for sending a probe request
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.SendContext.Ctx">
            <summary>
            The ConnectionContext
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.SendContext.Prolog">
            <summary>
            The prolog
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.SendContext.Payload">
            <summary>
            The payload
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.SendContext.UserHandle">
            <summary>
            The identity
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.SendContext.Callback">
            <summary>
            The ResponseCallback to be invoked when a response is received.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerCb">
            <summary>
            Callback, which is invoked when a scheduled timer expires.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerContext">
            <summary>
            The context for scheduling a timer.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerContext.TimeoutSecs">
            <summary>
            The timeout value
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerContext.Callback">
            <summary>
            The callback to be invoked when the timer expires.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerContext.TimerHandle">
            <summary>
            The timer associated with an active timer
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.IRequestSplitter.IsEntryValidLength``1(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified <paramref name="entryLength"/> can
            fit within the maximum message size, accounting for per-request
            overhead and per-entry overhead.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.IRequestSplitter.ShouldSplit``1(System.Int32,System.Int32)">
            <summary>
            Determines whether the request of type
            <typeparamref name="TRequest"/> needs to be split
            into multiple parts.
            </summary>
            <param name="requestOverhead">
            The size (in bytes) of an empty request.
            </param>
            <param name="numEntries">
            Number of entries currently in the request.
            </param>
            <returns>
            True if this request should be split prior to adding another
            entry, false otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.IRequestSplitter.ShouldSplit``1(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the request of type
            <typeparamref name="TRequest"/> needs to be split
            into multiple parts.
            </summary>
            <param name="requestOverhead">
            The size (in bytes) of an empty request.
            </param>
            <param name="numEntries">
            Number of entries currently in the request.
            </param>
            <param name="totalEntryLengthSoFar">
            The sum of the length of all the entries currently in the request.
            </param>
            <param name="nextEntryLength">
            The length in bytes of the entry for the next item to be added to
            the request. This length must be valid.
            </param>
            <returns>
            True if this request should be split prior to adding another
            entry, false otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ITopicManager.Resolve(Bloomberglp.Blpapi.Internal.TopicListImpl,System.Boolean,System.Boolean,System.Boolean,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.TopicResolvedCallback)">
            <summary>
            Resolves topics in <paramref name="resolutionList"/>. If
            <paramref name="autoRegisterServices"/> is true, first register
            all services of topics if they are not registered. If
            <paramref name="createTopics"/> is true the topics will be created
            after a successful resolution. If <paramref name="isCompat33X"/>
            is true then do not generate topic creation message after topic
            creation. <paramref name="identity"/> provides permissions of all
            sent requests. <paramref name="topicResolvedCb"/> will be called
            for each completed topic resolution.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ITopicManager.RemoveTopics(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Removes all pending topic resolution on
            <paramref name="service"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ITopicManager.DeleteTopics(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.TopicImpl})">
            <summary>
            Deletes all created topics in <paramref name="topics"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ITopicManager.GetTopic(System.Int64)">
            <summary>
            Gets the TopicImpl object from <see cref="T:Bloomberglp.Blpapi.Internal.TopicImplRegistry"/>
            based on the specified <paramref name="topicId"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.MessageImpl">
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.MessageImpl.TopicName">
            <summary>
            This method has now been deprecated
            </summary>
            <para>
            Deprecated because message's payload can
            be associated with different correlation ids/subscriptions, and
            each of these correlation ids may map to different topic strings.
            In such scenarios, it will be incorrect to return one out of
            the topics (for the various correlation ids in the message) as
            the topic name for the message. Applications should use
            correlation ids to map to the subscriptions.
            </para>
            <returns>returns topic name</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.MessageImpl.GetTopicName">
            <summary>
            This is a work around to internally get TopicName without having to use the obsolete TopicName function
            </summary>
            <returns>topic name</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.OngoingUpdate">
            <summary>
            Represents an on-going <see cref="T:Bloomberglp.Blpapi.Internal.OperationType"/> and the
            <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> involved with it.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.OngoingUpdate.ShouldReplaceOngoingUpdate(Bloomberglp.Blpapi.Internal.OperationType,Bloomberglp.Blpapi.Internal.OperationType)">
            <summary>
            Returns true if, <paramref name="newOperation"/> has higher
            precedence than <paramref name="oldOperation"/>, false otherwise.
            Precedence between operations are:
            <para>
            <paramref name="newOperation"/> &lt; <paramref name="oldOperation"/>
            when both operations are of type <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Reroute"/>.
            </para>
            <para>
            <paramref name="oldOperation"/> &lt; <paramref name="newOperation"/>
            when both operations are of type <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.ReresolveWithUts"/>.
            </para>
            <para>
            <paramref name="oldOperation"/> &lt; <paramref name="newOperation"/>
            when both operations are of type <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Reresolve"/>.
            </para>
            <para>
            <paramref name="oldOperation"/> &lt; <paramref name="newOperation"/>
            when both operations are of type <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Resubscribe"/>.
            </para>
            <para>
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.None"/> &lt;
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Reroute"/> &lt;
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.ReresolveWithUts"/> &lt;
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Reresolve"/> &lt;
            <see cref="F:Bloomberglp.Blpapi.Internal.OperationType.Resubscribe"/> when
            <paramref name="newOperation"/> and <paramref name="oldOperation"/>
            are different.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.OperationImpl">
            <summary>
            Summary description for OperationImpl.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.OperationImpl.RequestType">
            <summary>
            Gets the TypeDefinition of request for this Operation.
            <see cref="P:Bloomberglp.Blpapi.Internal.OperationImpl.RequestDefinition"/>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.OperationImpl.ResponseType">
            <summary>
            Gets the TypeDefinitions of the possible
            responses for this Operation.
            <see cref="P:Bloomberglp.Blpapi.Internal.OperationImpl.RequestDefinition"/>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.OperationType">
            <summary>
            Represents and in-progress operation.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.PendingRequestQueue">
            <summary>
            Summary description for PendingRequestQueue.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.Implementation.PlatformConnectionEventType">
            <summary>
            Used by <see cref="T:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection"/> to notify
            <see cref="T:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.ConnectionEventHandler"/> about
            connection events.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.Implementation.SessionState">
            <summary>
            The state of a <see cref="T:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions">
            <summary>
            Enum describing whether the request should be registered to receive
            a response or not
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions">
            <summary>
            Enum describing if the request needs to be put on the pending queue
            irrespective of the fact that the maximum queue size has been
            reached.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.CancelRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId)">
            <summary>
              Cancel the request specified by 'requestId'. If the request is
              still pending for a response a cancel message will be sent on the
              network. Its a no operation if the response has already arrived
              for the the specified 'requestId'. Once this function returns,
              the 'responseCallback' passed during 'sendRequest' will not be
              invoked. Note that if the request specified by 'requestId' is
              outstanding on the network, another request that is deferred due
              to 'maxOutStandingRequests', will be sent. TODO: FIX and document
              that this method will not call 'responseCallback'
            </summary>
            <param name="requestId">The request id.</param>
            <exception cref="T:System.IO.IOException">
              if the cancel request could not be sent on the network
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.ConnectionContext">
            <summary>
            </summary>
            <returns>
              The ConnectionContext associated with this instance of
              PlatformConnection. Note that the ConnectionContext returned can
              be a different one, every time the connection is stopped and
              started.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.CurrentServer">
            <summary>
              The current server.
            </summary>
            <returns>The 'IPEndPoint' associated with the current server
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.GetServerAddress">
            <summary>
              Gets the server address.
            </summary>
            <returns>
              The 'ServerAddress' that this instance of 'PlatformConnection' is
              connected to
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.GetLocalAddress">
            <summary>
              Gets the local address.
            </summary>
            <returns>
              The 'InetSocketAddress' at the local end of the connection
              established with the server.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.GetSessionInfo">
            <summary>
              Gets the session info.
            </summary>
            <returns>
              The information associated with the underlying session.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.GetPointofPresenceId">
            <summary>
            Gets the point of presence id.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.IsConnected">
            <summary>
              Determines whether this instance is connected.
            </summary>
            <returns>
              <c>true</c> if this instance is connected; otherwise,
              <c>false</c>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.PlatformId">
            <summary>
              The Platform id.
            </summary>
            <returns>
              'PlatformId' associated with this instance of
              'PlatformConnection'
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.SendMessage(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[])">
            <summary>
              Send message specified by 'prolog' and 'payload' to the connected
              peer.
            </summary>
            <param name="prolog">The prolog</param>
            <param name="payload">The payload</param>
            <exception cref="T:System.IO.IOException">
              if the peer is not connected.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.SendRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions)">
            <summary>
              Send a request specified by 'prolog' and 'payload'. Once the
              request succeeds (a response is received) or fails, the
              'responseCallback' will be invoked if the specified
              'registerRequest' is true otherwise the 'responseCallback' will
              not be invoked. If the 'forceBuffering' flag is set, the request
              is queued even after reaching the 'maxPendingRequests'.
            </summary>
            <param name="prolog">The prolog.</param>
            <param name="payload">The payload.</param>
            <param name="responseCallback">The response callback.</param>
            <param name="requestId">The request id.</param>
            <param name="registerRequest">
                if set to <c>true</c> [register request].
            </param>
            <param name="forceBuffering">
                if set to <c>true</c> [force buffering].
            </param>
            <exception cref=
              "T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.QueueOverflowException">
               if the outstanding requests exceed  the 'maxPendingRequests'
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.SetProviderEventHandler(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.OutOfBandMsgCallback)">
            <summary>
              Set the provider out of band message handler to the specified
              'providerOutofBandEventHandler'. The
              'providerOutofBandEventHandler' is responsible for handling those
              out of band messages (not responses to requests) that could not
              be handled by 'outOfBandMsgCallback' provided during the
              construction of the PlatformConnecion. TODO: This method should
              not exist.
            </summary>
            <param name="providerOutofBandEventHandler">
                The provider outof band event handler.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.Start(Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.ConnectionEventHandler,System.Int32)">
            <summary>
              Initiate connection to the peer passed during construction. All
              the event notifications are announced thru 'eventHandler'. Once
              this method returns, the 'eventHandler' will be called at least
              once within the specified 'connectionTimeout'
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="connectionTimeoutMS">The connection timeout.</param>
            <returns>0 on success and a non zero value otherwise.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformConnection.Stop">
            <summary>
              Stop this instance of 'PlatformConnecion'. Once Stop returns, the
              'ConnectionEventHandler' passed in Start(), will be not be
              invoked again.
            </summary>
            <returns>0 on success and a non zero value otherwise</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformControllerStatus">
            <summary>
            Enumeration used to notify clients of state changes in the underlying connections.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformControllerStatus.CONNECTION_UP">
            <summary>
            A single connection came up
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformControllerStatus.CONNECTION_DOWN">
            <summary>
            A single connection came down
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformControllerStatus.CONNECTION_PRIMARY_CHANGED">
            <summary>
            The underlying primary connection changed
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformControllerStatus.CONNECTION_TERMINATED">
            <summary>
            The controller has tried all the connections and is terminating
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.InitialSetupCallback">
            <summary>
            A callback of this type will be invoked by this class in one of the
            two different circumstances:
            1. When the established connections have reached a state where a
               session can be started. In this case, the callback is invoked with
               ConnectionResult.SUCCESS for the specified 'result'.
            2. When all connection attempts failed.
            <br/>
            In either case, the callback will be invoked serially and never
            simultaneously by multiple threads. Once return, the callback will
            never be invoked again.
            <br/>
            The callback can perform blocking operations including sending
            messages on the networks.
            </summary>
            <param name="result">result of the PlatformController startup</param>
            <param name="errorInfo">The detailed failure error.</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.ConnectionStatusCallback">
            <summary>
            A callback of this type is invoked when there is a state change
            specified by 'status' on the connection specified by
            'ctx'. This callback will not be invoked once
            'Status.CONNECTION_TERMINATED' is delivered. Note that the callback will be
            called serially with respect to 'ConnectionContext' i.e. two threads
            will never invoke the callback with the same 'ConnectionContext'
            simultaneously.
            Note that this callback *can not* perform blocking operations.
            </summary>
            <param name="ctx">The connection context.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformController.Start(Bloomberglp.Blpapi.Internal.Platform.Interfaces.InitialSetupCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.ConnectionStatusCallback)">
            <summary>
            Start the PlatformController with the specified
            'initialSetupCallback' which will be invoked once a connection is
            established. Also supply the 'connectionStatucCallback' for connection state notifications
            Note that it is undefined to call start multiple times.
            </summary>
            <param name="callback">The callback.</param>
            <param name="connectionStatusCallback">The connection status callback.</param>
            <returns>0 on success and a non zero value otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.IPlatformController.Stop">
            <summary>
            Stop the PlatformController and all the connections that are managed by it. Once the
            controller is stopped, it can not be started again.
            </summary>
            <returns>
            0 on success and a non zero value if the underlying connections were already stopped.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.sendRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends a request on the given connection.
            </summary>
            <param name="requestId">The ID of the request.</param>
            <param name="prolog">The prolog of the request.</param>
            <param name="payload">The payload of the request.</param>
            <param name="identity">
            The identity to be used when sending the request.
            </param>
            <param name="responseCallback">
            The callback function where the response will be received.
            </param>
            <param name="registerRequest">
            Indicates whether a request should be registered to receive
            a response or not.
            </param>
            <param name="forceBuffering">
            Indicates if the request needs to be put on the pending queue
            irrespective of the fact that the maximum queue size has been
            reached.
            </param>
            <param name="ctx">
            The connection context where the request will be sent.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.IoErrorException">
            Thrown when the connection is down and it fails to acquire a
            PlatformConnection.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.QueueOverflowException">
            Thrown when the outstanding requests exceed the max pending
            requests.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.sendRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions)">
            <summary>
            Sends a request on the primary connection.
            </summary>
            <param name="requestId">The ID of the request.</param>
            <param name="prolog">The prolog of the request.</param>
            <param name="payload">The payload of the request.</param>
            <param name="identity">
            The identity to be used when sending the request.
            </param>
            <param name="responseCallback">
            The callback function where the response will be received.
            </param>
            <param name="registerRequest">
            Indicates whether a request should be registered to receive
            a response or not.
            </param>
            <param name="forceBuffering">
            Indicates if the request needs to be put on the pending queue
            irrespective of the fact that the maximum queue size has been
            reached.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.IoErrorException">
            Thrown when the connection is down and it fails to acquire a
            PlatformConnection.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.QueueOverflowException">
            Thrown when the outstanding requests exceed the max pending
            requests.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.sendForceRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends a request on the given connection with Force Buffering
            enabled.
            </summary>
            <param name="requestId">The ID of the request.</param>
            <param name="prolog">The prolog of the request.</param>
            <param name="payload">The payload of the request.</param>
            <param name="identity">
            The identity to be used when sending the request.
            </param>
            <param name="responseCallback">
            The callback function where the response will be received.
            </param>
            <param name="registerRequest">
            Indicates whether a request should be registered to receive
            a response or not.
            </param>
            <param name="ctx">
            The connection context where the request will be sent.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.IoErrorException">
            Thrown when the connection is down and it fails to acquire a
            PlatformConnection.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.sendForceRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions)">
            <summary>
            Sends a request on the given connection with Force Buffering
            enabled.
            </summary>
            <param name="requestId">The ID of the request.</param>
            <param name="prolog">The prolog of the request.</param>
            <param name="payload">The payload of the request.</param>
            <param name="identity">
            The identity to be used when sending the request.
            </param>
            <param name="responseCallback">
            The callback function where the response will be received.
            </param>
            <param name="registerRequest">
            Indicates whether a request should be registered to receive
            a response or not.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.IoErrorException">
            Thrown when the connection is down and it fails to acquire a
            PlatformConnection.
            </exception>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.DefaultLogTimeoutMillis">
            <summary>
            An arbitrarily chosen amount of time to wait before logging.
            <para>
            Used 10000 milliseconds more so we give enough time to backend
            to return with a response.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.#ctor(Bloomberglp.Blpapi.Internal.Interfaces.ConnectionConfig,Bloomberglp.Blpapi.Internal.ConnectionContext.PlatformId,Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher,Bloomberglp.Blpapi.Internal.Interfaces.ITlsInitialHandshaker,Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncDispatcher,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ProductType,System.String,Bloomberglp.Blpapi.SessionOptions.ClientModeType,System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.OutOfBandMsgCallback,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory,System.Int32)">
            <summary>
            Construct a new PlatformConnection identified by 'PlatformId' to
            connect to a particular peer specified by 'connectionConfig',
            'clientMode', 'productType' and 'feature' string. The
            'outOfBandMsgCallback' is the callback that will be invoked, when
            a new message that is not a response is received.
            The 'maxPendingRequests' is the total number of requests that can
            be outstanding while 'maxOutStandingRequests' is the total number
            of requests outstanding on the network. All connection setup is
            performed in a different thread using the specified
            'eventDispatcher'. Note that: the only supported values for
            'ProductType' are ProductType.CONSUMER and ProductType.PUBLISHER.
            </summary>
            <param name="connectionConfig">The connection config.</param>
            <param name="platformId">The platform id.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
            <param name="tlsInitialHandshaker"> component doing TLS handshake</param>
            <param name="asyncDispatcher">
            Facilitates invoking callbacks asynchronously to avoid deadlock.
            </param>
            <param name="productType">Type of the product.</param>
            <param name="feature">The feature string passed to backend</param>
            <param name="clientMode">The client mode.</param>
            <param name="maxPendingRequests">The max pending requests.</param>
            <param name="maxOutstandingRequests">The max outstanding requests.
            </param>
            <param name="outOfBandMsgCallback">The out of band MSG callback.
            </param>
            <param name="timerEventManagerFactory">
            The factory that creates timers.
            </param>
            <param name="sessionId">The session id.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.#ctor(Bloomberglp.Blpapi.Internal.Interfaces.ConnectionConfig,Bloomberglp.Blpapi.Internal.ConnectionContext.PlatformId,Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ProductType,System.String,Bloomberglp.Blpapi.SessionOptions.ClientModeType,System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.OutOfBandMsgCallback,Bloomberglp.Blpapi.Internal.PluginSessionFactory,Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionFactory,Bloomberglp.Blpapi.Internal.Infrastructure.Network.Interfaces.CbChannelConnectorFactory,Bloomberglp.Blpapi.Internal.Interfaces.ITlsInitialHandshaker,Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncDispatcher,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory,System.Int32)">
            <summary>
            Construct a new PlatformConnection identified by 'PlatformId' to
            connect to a particular peer specified by 'connectionConfig',
            'clientMode', 'productType' and 'feature' string. The
            'outOfBandMsgCallback' is the callback that will be invoked, when
            a new message that is not a response is received.
            The 'maxPendingRequests' is the total number of requests that can
            be outstanding while 'maxOutStandingRequests' is the total number
            of requests outstanding on the network. All connection setup is
            performed in a different thread using the specified
            'eventDispatcher'.
            Note that: the only supported values for 'ProductType' are
            ProductType.CONSUMER and ProductType.PUBLISHER.
            Optionally also provide 'sessionFactory' to create a session over
            a connected connection, 'cbSessionFactory' to make the created
            session callback based and 'cbChannelConnectorFactory' to make a
            connection (connected) callback based.
            </summary>
            <param name="connectionConfig">The connection config.</param>
            <param name="platformId">The platform id.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
            <param name="productType">Type of the product.</param>
            <param name="feature">The feature.</param>
            <param name="clientMode">The client mode.</param>
            <param name="maxPendingRequests">The max pending requests.</param>
            <param name="maxOutstandingRequests">The max outstanding requests.
            </param>
            <param name="outOfBandMsgCallback">The out of band MSG callback.
            </param>
            <param name="cbSessionFactory">The cb session factory.</param>
            <param name="sessionFactory">The session factory.</param>
            <param name="cbChannelConnectorFactory">The cb channel connector
            factory.</param>
            <param name="tlsInitialHandshaker">component doing TLS handshake</param>
            <param name="asyncDispatcher">
            Facilitates invoking callbacks asynchronously to avoid deadlock.
            </param>
            <param name="timerEventManagerFactory">
            The factory that creates timers.
            </param>
            <param name="sessionId">The session id.</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.ConnectionEventHandler">
            <summary>
            An instance of this delegate is invoked when there is a connect
            change has to be notified. This method is called serially and
            never simultaneously by multiple threads.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="reason">The reason.</param>
            <param name="errorInfo">The detailed failure error.</param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.NumOutstandingRequestsOnNetwork">
            <summary>
            Return the number of requests that are currently outstanding on
            the network.
            </summary>
            <returns>
            The number of outstanding requests on the network
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.Start(Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.ConnectionEventHandler,System.Int32)">
            <summary>
            Initiate connection to the peer passed during construction. All
            the event notifications are announced thru 'eventHandler'. Once
            this method returns, the 'eventHandler' will be called at least
            once within the specified 'connectionTimeout'
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="connectionTimeoutMs">The connection timeout.</param>
            <returns>
            0 on success and a non zero value otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.Stop">
            <summary>
            Stop this instance of 'PlatformConnecion'. Once Stop returns, the
            'ConnectionEventHandler' passed in Start(), will be not be invoked
            again.
            </summary>
            <returns>0 on success and a non zero value otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.GetSessionInfo">
            <summary>
            Gets the session info.
            </summary>
            <returns>
            The information associated with the underlying session.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.ConnectionContext">
            <summary>
            </summary>
            <returns>
            The ConnectionContext associated with this instance of
            PlatformConnection.
            Note that the ConnectionContext returned can be a different one,
            every time the connection is stopped and started.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.GetServerAddress">
            <summary>
            Gets the server address.
            </summary>
            <returns>
            The 'ServerAddress' that this instance of 'PlatformConnection' is
            connected to
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.GetLocalAddress">
            <summary>
            Gets the local address.
            </summary>
            <returns>
            The 'InetSocketAddress' at the local end of the connection
            established with the server.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.GetPointofPresenceId">
            <summary>
            Gets the point of presence id.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.CurrentServer">
            <summary>
            The current server.
            </summary>
            <returns>
            The 'IPEndPoint' associated with the current server
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.IsConnected">
            <summary>
            Determines whether this instance is connected.
            </summary>
            <returns>
            <c>true</c> if this instance is connected;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.SetProviderEventHandler(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.OutOfBandMsgCallback)">
            <summary>
            Set the provider out of band message handler to the specified
            'providerOutofBandEventHandler'. The
            'providerOutofBandEventHandler' is responsible for handling those
            out of band messages (not responses to requests) that could not be
            handled by 'outOfBandMsgCallback' provided during the construction
            of the PlatformConnecion.
            TODO: This method should not exist.
            </summary>
            <param name="providerOutofBandEventHandler">The event handler.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.SendMessage(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[])">
            <summary>
            Send message specified by 'prolog' and 'payload' to the connected
            peer.
            </summary>
            <param name="prolog">The prolog</param>
            <param name="payload">The payload</param>
            <exception cref="T:System.IO.IOException">Invalid session or sending
            a message that is off limit.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.PlatformId">
            <summary>
            The Platform id.
            </summary>
            <returns>
            'PlatformId' associated with this instance of 'PlatformConnection'
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.SendRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions)">
            <summary>
            Sends a request specified by <paramref name="prolog"/> and
            <paramref name="payload"/>. If the <paramref name="prolog"/>
            does not already have a Guid option, a new random Guid option is
            added to the prolog.
            <para>
            Once the request succeeds (a response is received) or fails, the
            <paramref name="responseCallback"/> will be invoked if the specified
            <paramref name="registerRequest"/> is true, otherwise the
            <paramref name="responseCallback"/> will not be invoked.
            </para>
            <para>
            If the <paramref name="forceBuffering"/> flag is set, the request
            is queued even after reaching the <see cref="F:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.maxOutstandingRequests"/>.
            </para>
            </summary>
            <param name="prolog">The prolog.</param>
            <param name="payload">The payload.</param>
            <param name="responseCallback">The response callback.</param>
            <param name="requestId">The request id.</param>
            <param name="registerRequest">if set to <c>true</c>
                [register request].</param>
            <param name="forceBuffering">if set to <c>true</c>
                [force buffering].</param>
            <exception cref
             ="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.QueueOverflowException">
            if the outstanding requests exceed  the 'maxPendingRequests'
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.CancelRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId)">
            <summary>
            Cancel the request specified by 'requestId'. If the request is
            still pending for a response a cancel message will be sent on the
            network.
            Its a no operation if the response has already arrived for the the
            specified 'requestId'. Once this function returns, the
            'responseCallback' passed during 'sendRequest' will not be
            invoked.
            Note that if the request specified by 'requestId' is outstanding
            on the network, another request that is deferred due to
            'maxOutStandingRequests', will be sent.
            TODO: FIX and document that this method will not call
            'responseCallback'
            </summary>
            <param name="requestId">The request id.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.ComputeLogTimeout(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog)">
            <summary>
            Returns the due time in milliseconds for the log timer. We chose
            <see cref="F:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.DefaultLogTimeoutMillis"/> as the default value.
            If <paramref name="prolog"/> has <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionTimeout"/>,
            the value from the option is used.
            <para>
            Use 10000 milliseconds more so we give enough time to backend
            to return with a response.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.OnSendRequestFailure(Bloomberglp.Blpapi.Internal.Requests.RequestId)">
            <summary>
            Try to remove a request from <see cref="F:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.requestRegistry"/> and if
            found, notify the optional response callback with result code
            <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult.IO_ERROR"/>.
            </summary>
            <param name="requestId">the request id for which send failed
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformConnection.GenerateFailureOnAllPendingRequests">
            <summary>
            Removes all pending requests on this connection and notify the
            response callback if specified during send about request
            completion with result code
            <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult.IO_ERROR"/>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Platform.PlatformController">
            <summary>
            This component controls how to connect all hosts specified in session
            options.
            </summary>
            <remarks>
            1) Start connections to all hosts simultaneously and retry them on
            failure or disconnected if autoRestartOnDisconnection is true and
            continuous failure times is less than the specified maximum attempts.
            2) If one host is connected, reset all continuous failure times. And if
            at least one host keeps connection, all other hosts will be kept trying
            connection on failure infinitely ignoring maximum attempts.
            3) If all hosts are down and reach maximum attempts, notify the caller
            connection terminated.
            4) For each newly established connection, SessionStartedStrategy
            decides whether to start the session by delivering SessionStarted to
            client.
            5) There is the list of all active connections by the order of success
            connection time. The first one is the primary connection.
            </remarks>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_platformProxy">
            <summary> underlying layer having all connections </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_platformList">
            <summary> list of all platforms </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_activeConnections">
            <summary> list of all connected platforms by the order of
            connection the first of which is primary </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_primaryPlatform">
            <summary>having this to make checking whether we should generate
            primary changed event easier (usually be the front item of
            'd_activeConnections' but it is hard to know whether we should
            generate primary changed event in race condition)</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_sessionStarted">
            <summary> indicating whether the session has started</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_stopped">
            <summary> indicating whether it is stopped </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_isMaximumReconnectionAttemptsReached">
            <summary> true when all connections have reached maximum number of
            attempts to reconnect </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_connectionTimeout">
            <summary>timeout of connection action</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_reconnectionInterval">
            <summary>the retrying interval of connection</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_maxAttempts">
            <summary>maximum continuous attempts in beginning or after success
            connection</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_autoRestartOnDisconnect">
            <summary>indicating whether we should retry after connection
            failure or disconnected</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_initialSetupCallback">
            <summary>Initial setup callback invoked when SessionStartedStrategy
            decides to start the session or when all connections have failed to
            be connected</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_listener">
            <summary>listener for connection up, down and terminated (all down
            and stop trying) </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_timerEventManagerFactory">
            <summary>used to delay scheduling platform starting job</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_eventDispatcher">
            <summary>job scheduler for invoking initial setup callback
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_sessionStartedStrategy">
            <summary>
            Responsible for deciding when sufficient connectivity is present
            for the session to be permitted to start.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.Platform.PlatformController.d_staticConnectionCount">
            <summary>
            counts the number of connections specified in session option
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.#ctor(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory,Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher,Bloomberglp.Blpapi.Internal.PointOfPresenceIdList,Bloomberglp.Blpapi.Internal.PointOfPresenceIdMap,System.Int32,System.Int32,System.Int64,System.Boolean,Bloomberglp.Blpapi.Internal.PluginCbSessionFactory.KeepAliveInfo,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bloomberglp.Blpapi.Internal.Platform.PlatformController" />
            class to manage set up, tear down and state changes for a set of
            connections owned by the specified 'platformProxy' using the
            specified 'eventManager', the specified 'reconnectionInterval',
            the specified 'autoRestartOnDisconnect', the specified
            'maxAttempts', the specified 'sessionId' and the specified
            'allocator'. The specified 'eventDispatcher' will be used to
            dispatch 'InitialSetupCallback'. A 'eventDispatcher' will be
            created if the specified one is null.
            </summary>
            <param name="platformProxy">The platform proxy.</param>
            <param name="timerEventManagerFactory">
            The time event manager factory.
            </param>
            <param name="eventDispatcher">The event dispatcher.</param>
            <param name="activePopList"></param>
            <param name="activePopMap"></param>
            <param name="staticConnectionCount">The connection count.</param>
            <param name="connectionTimeout">The connection timeout.</param>
            <param name="reconnectionInterval">The reconnection interval.
            </param>
            <param name="autoRestartOnDisconnect">if set to <c>true</c>
            [auto restart on disconnect].</param>
            <param name="defaultKeepAliveInfo">Keep alive</param>
            <param name="maxAttempts">The max attempts.</param>
            <param name="sessionId">The session id.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.Start(Bloomberglp.Blpapi.Internal.Platform.Interfaces.InitialSetupCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.ConnectionStatusCallback)">
            <summary>
            Starts the PlatformController with the specified
            'initialSetupCallback' which will be invoked once a connection is
            established.
            Note that it is undefined to call start multiple times.
            </summary>
            <returns>0 on success and a non-zero value otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.Stop">
            <summary>Stops the PlatformController and all the connections that
            are managed by it. Once the controller is stopped, it can not be
            started again.</summary>
            <returns>0 on success and a non zero value if the underlying
            connections were already stopped</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.OnConnectionUp(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the listener of the specified 'ctx' is up.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.LogConnectedConnections(System.Boolean,System.Boolean)">
            <summary>
                Logs if last connection goes down or connectivity is restored
            </summary>
            <param name="isStopped">
                Indicates that the connection is stopped
            </param>
            <param name="isUp">
                Indicates that the connection is up
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.OnConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the listener of the specified 'ctx' is up.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.continueSessionStart(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            If it is the first successful connection, schedule calling
            'InvokeInitialSetupCallback' with the first active connection. It
            does nothing if the list of active connections is empty.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.OnConnectionTerminated(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ConnectionResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ErrorInfo)">
            <summary>
            Notifies the listener all connections are down and stop trying.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.IsConnectionActive(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns true if the specified 'ctx' is active (connected) and false
            otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.InvokeInitialSetupCallback(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ConnectionResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ErrorInfo,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Invokes initial setup callback, that is to generate SessionStarted
            or SessionStartupFailure, with the specified 'result'. Also marks
            ever connected, reset all failure attempts and starts all platforms
            that stopped trying if 'result' is 0 indicating success.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.StartPlatform(Bloomberglp.Blpapi.Internal.Platform.PlatformController.Platform,System.Boolean)">
            <summary>
            Starts the specified 'platform'. The specified
            'calledFromScheduler' indicates whether called form scheduler. If
            'platform' is already starting, started or scheduled starting, does
            nothing.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.DelayedStartPlatform(Bloomberglp.Blpapi.Internal.Platform.PlatformController.Platform,System.Int64)">
            <summary>
            Schedules a job to start the specified 'platform' after the
            specified 'delay'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.StartAllPlatform">
            <summary>
            Starts all platforms.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.getConnectionProtocolMode(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns the protocol mode of the specified 'ctx'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.AreAllPlatformsFailed">
            <summary>
            Returns whether all platforms are down and stop trying.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.AreAllPlatformsIdle">
            <summary>
            Returns whether all platforms are down.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.ClearFailedAttempts">
            <summary>
            Clears failed attempts counts of all platforms.
            <para>
            When all connections are down, the number of failed attempts
            is increased, but as we recover connectivity we want to reset
            the failure count to 0. However, when 'autoRestartOnDisconnect'
            is configured and at least one connection is established we want
            to be able to retry the other connections indefinitely. This way,
            a connection can be down for an extended period of time (e.g.
            during end point maintenance).
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.HandleEventFailed(Bloomberglp.Blpapi.Internal.Platform.PlatformController.Platform,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ConnectionResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ErrorInfo)">
            <summary>
            Handles connection failure event with the specified 'reason' on the
            specified 'platform'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformController.HandleConnectionEvent(Bloomberglp.Blpapi.Internal.Platform.Implementation.PlatformConnectionEventType,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ConnectionResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ErrorInfo,Bloomberglp.Blpapi.Internal.Platform.PlatformController.Platform)">
            <summary>
            Handles connection event with the specified 'eventType' and the
            specified 'result' for failure on the specified 'platform'. Returns
            a non-zero value if the connected platform is V2 and this is
            provider session and 0 otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformProxyImpl.sendForceRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends a request on the given connection with Force Buffering
            enabled.
            </summary>
            <param name="requestId">The ID of the request.</param>
            <param name="prolog">The prolog of the request.</param>
            <param name="payload">The payload of the request.</param>
            <param name="identity">
            The identity to be used when sending the request.
            </param>
            <param name="responseCallback">
            The callback function where the response will be received.
            </param>
            <param name="registerRequest">
            Indicates whether a request should be registered to receive
            a response or not.
            </param>
            <param name="ctx">
            The connection context where the request will be sent.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.IoErrorException">
            Thrown when the connection is down and it fails to acquire a
            PlatformConnection.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformProxyImpl.sendForceRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions)">
            <summary>
            Sends a request on the given connection with Force Buffering
            enabled.
            </summary>
            <param name="requestId">The ID of the request.</param>
            <param name="prolog">The prolog of the request.</param>
            <param name="payload">The payload of the request.</param>
            <param name="identity">
            The identity to be used when sending the request.
            </param>
            <param name="responseCallback">
            The callback function where the response will be received.
            </param>
            <param name="registerRequest">
            Indicates whether a request should be registered to receive
            a response or not.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.IoErrorException">
            Thrown when the connection is down and it fails to acquire a
            PlatformConnection.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformProxyImpl.sendRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions)">
            <summary>
            Sends a request on the primary connection.
            </summary>
            <param name="requestId">The ID of the request.</param>
            <param name="prolog">The prolog of the request.</param>
            <param name="payload">The payload of the request.</param>
            <param name="identity">
            The identity to be used when sending the request.
            </param>
            <param name="responseCallback">
            The callback function where the response will be received.
            </param>
            <param name="registerRequest">
            Indicates whether a request should be registered to receive
            a response or not.
            </param>
            <param name="forceBuffering">
            Indicates if the request needs to be put on the pending queue
            irrespective of the fact that the maximum queue size has been
            reached.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.IoErrorException">
            Thrown when the connection is down and it fails to acquire a
            PlatformConnection.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.QueueOverflowException">
            Thrown when the outstanding requests exceed the max pending
            requests.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformProxyImpl.sendRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends a request on the given connection.
            </summary>
            <param name="requestId">The ID of the request.</param>
            <param name="prolog">The prolog of the request.</param>
            <param name="payload">The payload of the request.</param>
            <param name="identity">
            The identity to be used when sending the request.
            </param>
            <param name="responseCallback">
            The callback function where the response will be received.
            </param>
            <param name="registerRequest">
            Indicates whether a request should be registered to receive
            a response or not.
            </param>
            <param name="forceBuffering">
            Indicates if the request needs to be put on the pending queue
            irrespective of the fact that the maximum queue size has been
            reached.
            </param>
            <param name="ctx">
            The connection context where the request will be sent.
            </param>
            <exception cref="T:Bloomberglp.Blpapi.Internal.IoErrorException">
            Thrown when the connection is down and it fails to acquire a
            PlatformConnection.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.QueueOverflowException">
            Thrown when the outstanding requests exceed the max pending
            requests.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Platform.PlatformProxyImpl.GetConnectedConnectionCount">
            <summary>
                Used to get number of connected connections
            </summary>
            <returns>
                Returns a tuple containing number of connected connections
                and total available connections on this proxy
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.CachedTimeSource">
            <summary>
            This class provides a efficient way to get the current time by updating
            a cached copy periodically in a separate thread (more specifically,
            every 200ms). This avoids directly calling 'DateTime.UtcNow' (which can
            be expensive) for any component using 'LocalTimeSource' (this is done
            similarly in C++ with 'apimu::TimeCache' class to avoid calling
            'gettimeofday'). In this particular case, the time returned is used by
            the keep alive mechanism to decide when the most recent tick is
            received and then decide how much longer to wait until an inactitvity
            period expires. In this case, the precision of the timestamp is not as
            important as performance.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.ResolveMode.DONT_REGISTER_SERVICES">
            <summary>
            Fail to resolve a topic if the service has not already been
            registered.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.ResolveMode.AUTO_REGISTER_SERVICES">
            <summary>
            Try to register services found in ResolutionList if necessary.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.activateSubServiceCodeRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Activates sub-service code range of the specified
            ['begin', 'end'] and the specified 'priority' to an already
            registered service. The behavior is undefined unless 'begin', 'end'
            and 'priority' are between 0 and 2^24 (2 to the power of 24) and
            the service has already been registered.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.deactivateSubServiceCodeRange(System.String,System.Int32,System.Int32)">
            <summary>
            De-activates sub-service code range specified by ['begin', 'end']
            from an already registered service. The behavior is
            undefined unless 'begin' and 'end' are between 0 and 2^24 (2 to
            the power of 24) and the service has already been registered.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.deregisterService(System.String)">
            <summary>
            Deregisters the service.
            </summary>
            <param name="serviceName">the service name</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.clearRequestsOnService(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Clears all subscription requests, static requests and topics on the
            service pointed by the specified 'service'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.resolve(Bloomberglp.Blpapi.Internal.TopicListImpl,Bloomberglp.Blpapi.Internal.ProviderSessionImpl.ResolveMode,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Resolves the topics in the specified 'resolutionList'. The
            specified 'resolveMode' tells whether registering service before
            resolution. The specified 'providerIdentity" provides permissions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.resolve(Bloomberglp.Blpapi.Internal.TopicListImpl,Bloomberglp.Blpapi.Internal.ProviderSessionImpl.ResolveMode,System.Boolean,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Resolves the topics in the specified 'resolutionList'. The
            specified 'resolveMode' tells whether registering service before
            resolution. The specified 'createTopics' tells whether creating
            topics after resolution. The specified 'providerIdentity" provides
            permissions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.createTopics(Bloomberglp.Blpapi.Internal.TopicListImpl,Bloomberglp.Blpapi.Internal.ProviderSessionImpl.ResolveMode,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Creates the topics in the specified 'resolutionList' sync. Topic
            resolution is issued before creating topics if necessary. The
            specified 'resolveMode' tells whether registering service before
            resolution. The specified 'providerIdentity" provides permissions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.createTopicsAsync(Bloomberglp.Blpapi.Internal.TopicListImpl,Bloomberglp.Blpapi.Internal.ProviderSessionImpl.ResolveMode,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Creates the topics in the specified 'resolutionList' async. Topic
            resolution is issued before creating topics if necessary. The
            specified 'resolveMode' tells whether registering service before
            resolution. The specified 'providerIdentity" provides permissions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.resolveAsync(Bloomberglp.Blpapi.Internal.TopicListImpl,Bloomberglp.Blpapi.Internal.ProviderSessionImpl.ResolveMode,System.Boolean,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Resolves the topics in the specified 'resolutionList' async. The
            specified 'resolveMode' tells whether registering service before
            resolution. The specified 'createTopics' tells whether creating
            topics after resolution. The specified 'providerIdentity" provides
            permissions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.resolveAsync(Bloomberglp.Blpapi.Internal.TopicListImpl,Bloomberglp.Blpapi.Internal.ProviderSessionImpl.ResolveMode,System.Boolean,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.TopicResolvedCallback)">
            <summary>
            Resolves the topics in the specified 'resolutionList' async. The
            specified 'resolveMode' tells whether registering service before
            resolution. The specified 'createTopics' tells whether creating
            topics after resolution. The specified 'providerIdentity" provides
            permissions. The specified 'callback' is called for each topic
            resolution result.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ProviderSessionImpl.DeleteTopics(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Topic})">
            <summary>
            Deletes topics in the specified 'topics'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestImpl.CreateRequestWithGuid(Bloomberglp.Blpapi.Service,Bloomberglp.Blpapi.Internal.OperationImpl)">
            <summary>
            Returns a <see cref="T:Bloomberglp.Blpapi.Internal.RequestImpl"/> object with a new
            <see cref="P:Bloomberglp.Blpapi.Internal.RequestImpl.RequestGuid"/>.  This method should only be
            used for creating <see cref="T:Bloomberglp.Blpapi.Internal.RequestImpl"/> for non-authorization
            requests.
            For authorization requests use <see cref="M:Bloomberglp.Blpapi.Internal.RequestImpl.CreateRequestWithoutGuid(Bloomberglp.Blpapi.Service,Bloomberglp.Blpapi.Internal.OperationImpl)"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestImpl.CreateRequestWithoutGuid(Bloomberglp.Blpapi.Service,Bloomberglp.Blpapi.Internal.OperationImpl)">
            <summary>
            Returns a <see cref="T:Bloomberglp.Blpapi.Internal.RequestImpl"/> object with a <c>null</c>
            <see cref="P:Bloomberglp.Blpapi.Internal.RequestImpl.RequestGuid"/>. This method should only be used for
            creating <see cref="T:Bloomberglp.Blpapi.Internal.RequestImpl"/> for authorization requests.
            For non-authorization requests use <see cref="M:Bloomberglp.Blpapi.Internal.RequestImpl.CreateRequestWithGuid(Bloomberglp.Blpapi.Service,Bloomberglp.Blpapi.Internal.OperationImpl)"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.RequestProbeStrategy">
             <summary>
             This component provides a concrete implementation of a 'ProbeStrategy'
             for requests. The algorithm that we are going to follow is to send an
             Echo Request on the connection with the correct service code. If a Echo
             Response comes back, we consider the connection good and probe success
             and all the requests will fail-over to that connection. If RouteDown or
             a failed Echo Response is delivered the probe is canceled and a new
             connection is probed.
            
             The probing is implemented by maintaining two sets, tried connections
             and not tried connections. Each attempt removes a connection from the
             tried set and puts it in the not tried set. Once the not tried set gets
             exhausted, a timer is scheduled after which all the connections in the
             tried set are moved to the not tried set. Note that the connection due
             to which the probe started is never included in probing (since there is
             already a request outstanding).
            
             This class is intentionally *not* thread safe to ease the design and
             testing. Moreover this class does not interact with external world, but
             notifies the changes that it needs to be done by populating a
             'ProbeStrategyState'. This has been done so that the methods on an
             instance of this class can be called with some form of lock held
             without any fear of methods calling other components which could lead
             to deadlocks.
             </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.ProbeContext">
            <summary>
            Context maintained for a probe in progress
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.ProbeContext.CurrentConnection">
            <summary>
            The current connection on which probe is going on. Can be null.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.ProbeContext.TriedConnections">
            <summary>
            All the connection that have been tried. The value is a dummy
            object
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.ProbeContext.NotTriedConnections">
            <summary>
            All the connection that have not been tried. The value is a
            dummy object.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.ProbeContext.ActivityOccured">
            <summary>
            Has any activity occurred on other connection.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.ProbeContext.ServiceCode">
            <summary>
            The service code that is being probed
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.ProbeContext.#ctor">
            <summary>
            Creates an instance of ProbeContext with Triedconnections and
            NotTriedConnections empty. The CurrentConnection is set to null
            and ActivityOccured to false
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.#ctor(Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView,Bloomberglp.Blpapi.Internal.Requests.IRequestProvider,System.Int32)">
            <summary>
            Creates an instance with the following arguments
            </summary>
            <param name="view">
            The ServiceConnectionView that will be updated, once a new
             connection is found for failing over.
            </param>
            <param name="requestProvider"></param>
            <param name="sessionId"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.AddConnection(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Add the specified connection 'ctx' to the active connection list
            and update the specified 'state' with actions to be performed. For
            all the existing probes add the 'ctx' to the not tried set.
            Initiate a probe on all the existing probes which do not have a
            probe request sent.
            </summary>
            <param name="state">The state that will be populated.</param>
            <param name="activeConnections">
            </param>
            <param name="ctx">The new ConnectionContext that will be added
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.RemoveConnection(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Remove the specified connection 'ctx' from probe management. This
            connection will *not* be used for any other service codes. For all
            outstanding probes, the 'ctx' is removed from both tried and not
            tried sets. If there was an active request on 'ctx', the probe
            request is sent again on another connection or a timer is schedule
            if no such connection exists.
            </summary>
            <param name="state">The state that will be populated</param>
            <param name="activeConnections">The active connections set
            </param>
            <param name="ctx">The connection context</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.AddServiceCodeOnConnection(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Add the specified 'serviceCode' for the specified 'ctx' and update
            the specified 'state' with the actions to be performed. If the
            'ServiceConnectionView' has 'ctx' as the mapping for 'serviceCode',
            cancel any probe request for 'serviceCode', if the mapping is not
            'ctx', then the 'ctx' is considered to a successful probe
            connection, the 'ServiceConnectionView' is updated with 'ctx' and
            fail-over is is notified for the 'serviceCode' using 'state'.
            </summary>
            <param name="state">The state that will be populated</param>
            <param name="ctx">The ConnectionContext</param>
            <param name="serviceCode">The service code</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.RemoveServiceCodeOnConnection(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext},Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Removes the specified 'serviceCode' on the specified 'ctx' and
            update the specified 'state', with actions to be performed. If
            there is an existing probe request for the 'serviceCode', the
            connection is removed from both the tried set and the not tried set
            and a new probe is sent on another connection or a timer is
            scheduled if a request can not be sent at this point of time. If
            there is no probe outstanding for the specified 'serviceCode', a
            new probe context is added and a probe request is sent or a timer
            is scheduled if the probe request could not be sent.
            </summary>
            <param name="state">The state that will be populated</param>
            <param name="activeConnections">
            The set of ConnectionContext
            </param>
            <param name="ctx">The ConnectionContext</param>
            <param name="serviceCode">The service code</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.AddServiceCodeNoActiveConnection(System.UInt32)">
            <summary>
            Add the specified 'serviceCode' to management when there are no
            active connections. When a new connection comes up, the probe will
            continue and send the probe request on that connection.
            </summary>
            <param name="serviceCode">The service code</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestProbeStrategy.ContinueFailoverIfNeeded(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext},System.UInt32)">
            <summary>
            Continue failover if needed for the specified 'serviceCode' and
            update the specified 'state' with actions to be performed. The
            specified 'activeConnectionList' will be used to determine the next
            connection for failover.
            </summary>
            <param name="state">The state that will be populated</param>
            <param name="activeConnections">The ConnectionContext</param>
            <param name="serviceCode">The service code</param>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.RequestSplitter.MaximumEncodedMessageBytes">
            <summary>
            Represents the usable maximum size of the encoded payload.
            <para>
            This value is 90% of <see cref="F:Bloomberglp.Blpapi.Internal.RequestSplitter.MaximumMessageSizeInBytes"/>, which
            is the true maximum.
            </para>
            <para>
            The overhead costs are estimations, so you should use this value
            instead of the true maximum to allow room for overhead inaccuracy.
            </para>
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.RequestSplitter.MaximumMessageSizeInBytes">
            <summary>
            The maximum message size that the SDK supports.
            <para>
            This value is equal to 12 megabytes.
            </para>
            <para>
            Do not use this value directly because the overhead costs are
            estimations, so you would run the risk of overflow. We use 90% of
            this value for the usable maximum,
            <see cref="F:Bloomberglp.Blpapi.Internal.RequestSplitter.MaximumEncodedMessageBytes"/>, which gives us enough
            room for overhead inaccuracy.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestSplitter.IsEntryValidLength``1(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified <paramref name="entryLength"/> can
            fit within the maximum message size, accounting for per-request
            overhead and per-entry overhead.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestSplitter.ShouldSplit``1(System.Int32,System.Int32)">
            <summary>
            Determines whether the request of type
            <typeparamref name="TRequest"/> needs to be split
            into multiple parts.
            </summary>
            <param name="requestOverhead">
            The size (in bytes) of an empty request.
            </param>
            <param name="numEntries">
            Number of entries currently in the request.
            </param>
            <returns>
            True if this request should be split prior to adding another
            entry, false otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestSplitter.ShouldSplit``1(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the request of type
            <typeparamref name="TRequest"/> needs to be split
            into multiple parts.
            </summary>
            <param name="requestOverhead">
            The size (in bytes) of an empty request.
            </param>
            <param name="numEntries">
            Number of entries currently in the request.
            </param>
            <param name="totalEntryLengthSoFar">
            The sum of the length of all the entries currently in the request.
            </param>
            <param name="nextEntryLength">
            The length in bytes of the entry for the next item to be added to
            the request. This length must be valid.
            </param>
            <returns>
            True if this request should be split prior to adding another
            entry, false otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.IEncodableCodec.EncodeRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable)">
            <summary>
            Encodes the specified request into a new buffer.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when there is a design problem in either the specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable"/> or the encoder that causes the encoding
            process to fail.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.IEncodableCodec.EncodeResponse(Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable)">
            <summary>
            Encodes the specified response into a new buffer.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when there is a design problem in either the specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable"/> or the encoder that causes the encoding
            process to fail.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.IEncodableCodec.DecodeRequest``1(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer)">
            <summary>
            Decodes the specified buffer into a new instance of the request.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when there is a design problem in either the specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable"/> or the encoder that causes the encoding
            process to fail.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.IEncodableCodec.DecodeResponse``1(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer)">
            <summary>
            Decodes the specified buffer into a new instance of the response.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when there is a design problem in either the specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable"/> or the encoder that causes the encoding
            process to fail.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest">
            <summary>
            This class stores all the information need to cancel, failover of
            process a response for an outstanding request. This class is *not*
            thread safe.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.#ctor(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[],Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions,Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions)">
            <param name="requestId">
            The <see cref="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.RequestId"/> (the prolog contextId) on which the request was
            sent.
            </param>
            <param name="prolog">The message prolog that was sent.</param>
            <param name="payload">The payload that was sent.</param>
            <param name="needFailover">
            The failover option when the request was made.
            </param>
            <param name="handle">
            The RequestHandle to determine which group of request does this
            request belong to.
            </param>
            <param name="registerRequest">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions"/> when the request was made.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.RequestId">
            <summary>
            The RequestId (the prolog conextId) on which the request was
            sent.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.Prolog">
            <summary>
            The message prolog that was sent.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.Payload">
            <summary>
            The payload that was sent.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.NeedFailover">
            <summary>
            The failover option when the request was made
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.Handle">
            <summary>
            The RequestHandle to determine which group of request does this
            request belong to.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.RegisterRequest">
            <summary>
            The RequestRegistrationOptions when the request was made
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.Connection">
            <summary>
            The connection on which the request is outstanding.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequestList">
            <summary>
            This class provides a container for all the pending requests keyed
            on the requestId (contextId passed in prolog) and the service code
            that the request was sent on.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequestList.#ctor">
            <summary>
            Creates an empty container with no requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequestList.Add(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest)">
            <summary>
            Add the request specified by 'request' to the container.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequestList.Remove(Bloomberglp.Blpapi.Internal.Requests.RequestId)">
            <summary>
            Remove and return the request specified by 'requestId' from
            this container. If no request exists, return null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequestList.RemoveRequests(System.UInt32)">
            <summary>
            Remove and return all the requests for the specified
            'serviceCode'. Return null if there are no
            requests outstanding for the serviceCode.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequestList.Get(Bloomberglp.Blpapi.Internal.Requests.RequestId)">
            <summary>
            Return the request specified by 'requestId'. If no such request
            exist return null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequestList.Contains(System.UInt32)">
            <summary>
            Return 'true' if there are any requests for the specified
            'serviceCode', otherwise return 'false'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequestList.Get(System.UInt32)">
            <summary>
            Return one of the the requests for the specified
            'serviceCode'. Return null if there are no
            requests outstanding for the serviceCode.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle">
            <summary>
            This class stores the information associated with a group of
            requests associated together. Requests initiated individually are
            simple stored as degenerate group.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.#ctor">
            <summary>
            Creates an initialized object with connection pointing to
            Primary Connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.CompleteRequest">
            <summary>
            Complete the request and return all the requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.AddRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId)">
            <summary>
            Add a new request to the group with the specified
            <paramref name="requestId"/>. If the request group has been marked
            complete then this method  has no effect.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.RemoveRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId)">
            <summary>
            Remove the request specified by <paramref name="requestId"/> from
            this group of requests.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.RequestCount">
            <summary>
            Return the number of outstanding requests for this group of
            requests. If the request group is marked as complete, then 0
            will be returned.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.SetTimer(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManager)">
            <summary>
            Set the timer handler to the specfied 'timer'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.GetAndSetTimer(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManager)">
            <summary>
            Return the currently set TimerHandle and set it to the new
            value specified by <paramref name="newValue"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.ResetTimer">
            <summary>
            Reset the TimerHandler to null
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle.ResponseHandler">
            <summary>
            Return the responsehandler associated by this request group.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.TimeoutHandlerData">
            <summary>
            The context that is passed to the timer.
            TODO: change this to a delegate.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.EncodableCodec.EncodeRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable)">
            <summary>
            Encodes the specified request into a new buffer.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when there is a design problem in either the specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable"/> or the encoder that causes the encoding
            process to fail.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.EncodableCodec.EncodeResponse(Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable)">
            <summary>
            Encodes the specified response into a new buffer.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when there is a design problem in either the specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable"/> or the encoder that causes the encoding
            process to fail.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.EncodableCodec.DecodeRequest``1(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer)">
            <summary>
            Decodes the specified buffer into a new instance of the request.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when there is a design problem in either the specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable"/> or the decoder that causes the decoding
            process to fail.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.EncodableCodec.DecodeResponse``1(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer)">
            <summary>
            Decodes the specified buffer into a new instance of the response.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Exceptions.EncodingErrorException">
            Thrown when there is a design problem in either the specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable"/> or the decoder that causes the decoding
            process to fail.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.#ctor(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView,Bloomberglp.Blpapi.Internal.Requests.IEncodableCodec,Bloomberglp.Blpapi.Internal.Infrastructure.Threading.IAsyncDispatcher,System.Int32,Bloomberglp.Blpapi.Internal.Requests.IRequestGuidFactory,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.ITimerEventManagerFactory)">
            <summary>
            Creates an instance of 'RequestProviderImpl' with the specified
            args.
            </summary>
            <param name="platformProxy">The platform proxy. </param>
            <param name="serviceConnectionView">
            The service connection view.
            </param>
            <param name="encodableCodec">Used to encode requests.</param>
            <param name="asyncDispatcher">
            Used to asynchronously invoke callbacks.
            </param>
            <param name="sessionId">Identifier for the session. </param>
            <param name="guidFactory">Guid generator. Testing only</param>
            <param name="timerEventManagerFactory">
            Timer factory. Testing only
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SendForceRequest(Bloomberglp.Blpapi.Internal.Requests.IResponseHandler,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType,System.UInt32,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressStack,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressStack,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption},Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions,System.Int64)">
            <summary>
            Send a request that is forced. The request will be sent even if the
            outstanding request limit is hit.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SendForceRequest(Bloomberglp.Blpapi.Internal.Requests.IResponseHandler,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType,System.UInt32,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressStack,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressStack,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption},Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions,System.Int64)">
            <summary>
            Send a request that is forced. The request will be sent even if the
            outstanding request limit is hit.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.RequestHasOutstandingResponses(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult)">
            <summary>
            If result type is <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult.PARTIAL_RESPONSE"/>
            then not all components of the original request got responses.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.CancelTimeoutTimer(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest)">
            <summary>
            Cancels timeout processing by resetting the timer. Usually done
            after a request got final response (response other that
            <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult.PARTIAL_RESPONSE"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.IsSuccessResponse(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult)">
            <summary>
            If the result is <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult.FINAL_RESPONSE"/>,
            there are no incomplete requests and no processing for incomplete request
            is required.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SendRequest(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle,Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType,System.UInt32,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressStack,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressStack,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions,Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions,System.Int64,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            This is the main Encodable-based SendRequest that all other
            Encodable-based SendRequest and SendForceRequest calls ultimately
            invoke.
            <para>
            If <paramref name="requestGuid"/> is null, a new <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>
            is generated and set into prolog so that when the timer created by
            <see cref="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SetupTimeoutTimer(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle,System.Int64,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)"/> is fired, the guid of the request
            that has timed out can be logged and passed to request callback.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SendRequest(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType,System.UInt32,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressStack,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOptionAddressStack,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions,Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions,System.Int64,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            This is the main pre-encoded SendRequest that all other pre-encoded
            SendRequest and SendForceRequest calls ultimately invoke.
            <para>
            If <paramref name="requestGuid"/> is null, a new <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>
            is generated and set into prolog so that when the timer created by
            <see cref="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SetupTimeoutTimer(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle,System.Int64,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)"/> is fired, the guid of the request
            that has timed out can be logged and passed to request callback.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SendRequestSinglePartWithProlog(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions,Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions,Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Sends a request with the provided contents.
            </summary>
            <param name="prolog">
            The prolog of the message to be sent.
            </param>
            <param name="handle">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle"/> where the response will be
            delivered.
            </param>
            <param name="bbos">
            Contains the payload of the message to be sent.
            </param>
            <param name="registerRequest">
            Indicates the <see cref="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions"/>.
            </param>
            <param name="forceBuffering">
            Indicates the <see cref="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestBufferingOptions"/>.
            </param>
            <param name="needFailover">
            Indicates the <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions"/>.
            </param>
            <param name="guid">
            The associated <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SendForceRequestGroup(Bloomberglp.Blpapi.Internal.Requests.IResponseHandler,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Collections.Generic.IReadOnlyList{Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable},Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType,System.UInt32)">
            <summary>
            Send a group of related requests as one group.
            The requests will be sent even if the outstanding request
            limit is hit. Each generated request will have a different GUID associated with it.
            If sending one of the request fails, the entire group of requests
            will be failed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.GetPendingRequest(Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog)">
            <summary>
            Returns request for the corresponding <paramref name="requestId"/>
            if the request is pending, null otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.ShouldFailover(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest)">
            <summary>
            Returns true if the <paramref name="result"/> is IO_ERROR and
            <paramref name="request"/> needs failover
            (<see cref="P:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest.NeedFailover"/> is true).  When failover
            is required internal data structures of
            <see cref="T:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider"/> are not cleaned.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.RemovePendingRequest(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult@)">
            <summary>
            Removes the request from pending requests, handle and correlation
            registry. Request is not removed from correlation registry if there
            are outstanding requests.
            <para>
            If there are outstanding requests and the result is final, the
            function changes the result type to partial to keep the cid alive
            for the rest of the requests.
            This function should be called only after acquiring
            <see cref="F:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.lock"/>
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.CancelIncompleteRequests(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest)">
            <summary>
            Cancel the pending requests, for error responses
            (not <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult.PARTIAL_RESPONSE"/> or
            <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult.FINAL_RESPONSE"/>).
            <para>
            This function should be called after acquiring
            <see cref="F:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.lock"/>.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.RemoveRequest(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.PendingRequest)">
            <summary>
            Removes the pending request from <see cref="F:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.pendingRequests"/>
            and <see cref="F:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.cidRequestMap"/> when failover is not required.
            Also, cancels outstanding/incomplete requests with
            <see cref="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.CancelRequest(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID})">
            <summary>
            Cancels all requests indexed by correlation IDs in the specified
            'correlators'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.CancelRequestLocked(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle)">
            <summary>
            Cancels the request pointed by the specified 'handle' assuming
            the lock is held.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.CancelRequest(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle)">
            <summary>
            Cancels the request pointed by the specified 'handle'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.CorrelationCanceler">
            <summary>
            Returns the functor used to cancel subscription by CorrelationID.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.CancelRequestsByIdentity(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Cancels all pending requests that use the specified 'identity'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.Failover(System.UInt32)">
            <summary>
            Failover all the requests that are outstanding for the specified
            'servicCode'. If a request was initiated with
            RequestFailoverOptions.NO_FAILOVER_NEEDED, the request will *not*
            be failed over.
            TODO: Callback for NO_FAILOVER_NEEDED requests are not invoked.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.Stop">
            <summary>
            Stop this instance. For any outstanding requests, the associated
            callback (if any) will be invoked.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.IsRequestPending(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl@,System.UInt32)">
            <summary>
            Return 'true' if there are any outstanding request for the
            specified 'serviceCode', otherwise return false.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SendForceRequest(Bloomberglp.Blpapi.Internal.Requests.IResponseHandler,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream,Bloomberglp.Blpapi.CorrelationID,System.Int64)">
            <summary>
            Forcefully sends a request specified by <paramref name="prolog"/>
            and <paramref name="payload"/>. It uses the options
            <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions.REGISTER_REQUEST"/> and
            <see cref="F:Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions.FailoverRequest"/> to register
            it and does failover by default.
            <para>
            We ensure prolog has a guid so that when the timer created by
            <see cref="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SetupTimeoutTimer(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle,System.Int64,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)"/> is fired, the guid of the request
            that has timed out can be logged and passed to request callback.
            </para>
            </summary>
            <param name="responseHandler">
            The handler where the response for this request will be received.
            </param>
            <param name="prolog">
            The prolog for the request to be sent.
            </param>
            <param name="payload">
            The main payload for the request to be sent.
            </param>
            <param name="cid">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> pertaining to the request.
            </param>
            <param name="timeoutInMilliseconds">
            The timeout to use for the request in milliseconds.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.Implementation.RequestProvider.SetupTimeoutTimer(Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle,System.Int64,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Sets a timeout timer on the provided <paramref name="handle"/>
            specified by the amount in <paramref name="timeoutInMilliseconds"/>.
            </summary>
            <param name="handle">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.Implementation.Components.RequestHandle"/> where the timeout will be set.
            </param>
            <param name="timeoutInMilliseconds">
            The desired timeout in milliseconds.
            </param>
            <param name="guid">
            The associated <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.IncomingRequestID">
            <summary>
            Combines a connection and a context ID to make an ID for each
            incoming request.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.IncomingRequestID.#ctor(Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int64)">
            <summary>
            Creates a IncomingRequestID object combining the specified
            'connection' and the specified 'contextId'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.IRequestGuidFactory">
            <summary>
            A factory that generates a new <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>. This is
            testing only.
            <para>
            RequestProvider.SendForceRequest generates the prolog internally and
            ensures the prolog to always have a GUID generated by this factory.
            When testing RequestProvider.SendForceRequest, we can mock this
            factory to return a known GUID, thus match the prolog with the same
            GUID. Otherwise, GUID needs to be ignored when matching the prolog.
            </para>
            <para>
            This can be replaced with a delegate once we upgrade RequestProvider
            tests to use moq.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.IRequestProvider.SendForceRequest(Bloomberglp.Blpapi.Internal.Requests.IResponseHandler,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream,Bloomberglp.Blpapi.CorrelationID,System.Int64)">
            <summary>
            Forcefully sends a request specified by <paramref name="prolog"/>
            and <paramref name="payload"/>. It uses the options
            <see cref="F:Bloomberglp.Blpapi.Internal.Platform.Interfaces.RequestRegistrationOptions.REGISTER_REQUEST"/> and
            <see cref="F:Bloomberglp.Blpapi.Internal.Requests.RequestFailoverOptions.FailoverRequest"/> to register
            it and does failover by default.
            </summary>
            <param name="responseHandler">
            The handler where the response for this request will be received.
            </param>
            <param name="prolog">
            The prolog for the request to be sent.
            </param>
            <param name="payload">
            The main payload for the request to be sent.
            </param>
            <param name="cid">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> pertaining to the request.
            </param>
            <param name="timeoutInMilliseconds">
            The timeout to use for the request in milliseconds.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.PermissionRequestContext.#ctor(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicString.FromUser},Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates a PermissionRequestContext object.
            </summary>
            <param name="cid">
            The CorrelationID object associated with the request.
            </param>
            <param name="requestProlog">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/> of the incoming request.
            </param>
            <param name="connection">
            The connection the request comes from.
            </param>
            <param name="topicStrings">
            The list of resolution topics in the request.
            </param>
            <param name="service">The service of the request</param>
            <param name="requestGuid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> associated with the incoming request.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.PermissionRequestContext.SubscribedTopics">
            <summary>
            Multimap. Integer is the number of occurrence of each string.
            </summary>
            <returns>resolution topics in the request</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.RequestContext">
            <summary>
            This interface defines the context of an incoming request for
            publishers.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestContext.#ctor(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates a RequestContext object.
            </summary>
            <param name="cid">
            The CorrelationID object associated with the request
            </param>
            <param name="requestProlog">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/> of the incoming request.
            </param>
            <param name="connection">
            The connection the request comes from
            </param>
            <param name="service">
            ServiceImpl object this request is on
            </param>
            <param name="requestGuid">
            The <see cref="P:Bloomberglp.Blpapi.Internal.Requests.RequestContext.RequestGuid"/> associated with the incoming request.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.RequestContext.RequestProlog">
            <summary>
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/> of the incoming request.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.RequestContext.RequestGuid">
            <summary>
            The <see cref="P:Bloomberglp.Blpapi.Internal.Requests.RequestContext.RequestGuid"/> associated with the incoming request.
            If the incoming request had none, a new one is generated.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.RequestContext.Cid">
            <summary>
            Gets the CorrelationID object associated with the request.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.RequestContext.Connection">
            <summary>Gets the connection the request comes from. </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.RequestContext.ContextId">
            <summary>
            Gets the context ID of the request identifying it at the backend.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.RequestContext.Service">
            <summary> Gets the service of the request. </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid">
            <summary>
            A global unique identifier (GUID) that uniquely identifies a request.
            It wraps a <see cref="T:System.Guid"/> and exposes only the bytes.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestGuid.#ctor(System.Byte[])">
            <summary>
            Creates an instance with a byte array that represents a GUID.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestGuid.#ctor(System.Guid)">
            <summary>
            Creates an instance with a specific <see cref="T:System.Guid"/> value.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestGuid.op_Equality(Bloomberglp.Blpapi.Internal.Requests.RequestGuid,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Indicates whether the values of two specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> objects are equal.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare</param>
            <returns>
            true if <paramref name="a"/> and <paramref name="b"/>
            are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestGuid.op_Inequality(Bloomberglp.Blpapi.Internal.Requests.RequestGuid,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Indicates whether the values of two specified
            <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> objects are not equal.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare</param>
            <returns>
            true if <paramref name="a"/> and <paramref name="b"/>
            are not equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestGuid.NewRequestGuid">
            <summary>
            Creates a new instance of <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestGuid.ToBytes">
            <summary>
            Returns a byte array that represents this <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestGuid.ToString">
            <summary>
            Returns the string representation of this <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/>,
            formatted by using the format specifier as follows:
            <para>
            xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
            </para>
            where it is represented as a series of lowercase hexadecimal digits
            in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens.
            <para>
            An example is 382c74c3-721d-4f34-80e5-57657b6cbc27.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.RequestGuid.ReverseBytes(System.Byte[])">
            <summary>
            Reverse the first 3 group of bytes in a byte array.
            <para>
            The order of bytes in <see cref="M:System.Guid.ToByteArray"/> is
            different from the string representation of a <see cref="T:System.Guid"/>
            value. The order of the beginning four-byte group and the next two
            two-byte groups is reversed, whereas the order of the last two-byte
            group and the closing six-byte group is the same.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.RequestInfo">
            <summary>
            A data structure pertaining to a request that is either outstanding
            (waiting for a response) or pending (not sent yet due to limit).
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Requests.ServiceRequestContext">
            <summary>
            This class defines the context of an incoming service request for
            publishers.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Requests.ServiceRequestContext.#ctor(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.OperationImpl,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates a ServiceRequestContext object.
            </summary>
            <param name="cid">
            the CorrelationID object associated with the request
            </param>
            <param name="requestProlog">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/> of the incoming request.
            </param>
            <param name="connection">
            the connection the request comes from
            </param>
            <param name="operation">the operation the request is on</param>
            <param name="service">the service of the request</param>
            <param name="requestGuid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> associated with the incoming request.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Requests.ServiceRequestContext.Operation">
            <summary>Gets the operation the request is on</summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.RequestTemplateImpl">
            <summary>
            This class implements the request template handle for a snapshot
            request templates. It can be created by the
            <see cref="M:Bloomberglp.Blpapi.Session.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Identity)"/>
            or
            <see cref="M:Bloomberglp.Blpapi.Session.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID)"/>
            methods.
            <para>
            This handle should be closed by user before releasing it but we will
            try to release resources and log a warning in finalizer even if user
            forgets to do it.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestTemplateImpl.#ctor(Bloomberglp.Blpapi.Internal.ISnapshotContext,Bloomberglp.Blpapi.Internal.Interfaces.IRequestCanceller)">
            <summary>
            Construct a 'RequestTemplateImpl' object with an underlying
            snapshot context specified by 'context' and a closing callback
            specified by 'canceller'. The 'canceller' should not throw
            exceptions. It is the caller's responsibility to ensure that it is
            safe to call the provided callback in finalizer.
            </summary>
            <param name="context">The snapshot context </param>
            <param name="canceler">
            The callback that may be called when this handle is closed or
            destroyed
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestTemplateImpl.close">
            <summary>
            Implementation of the 'RequestTemplate.close()'
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.RequestTypeTraits.MaximumHandlesPerMessage">
            <summary>
            The maximum number of handles we put in an outgoing message.
            This value exists so the SDK behavior is consistent with older
            versions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestTypeTraits.PerEntryOverhead``1">
            <summary>
            Calculate the encoding overhead (in bytes) for each entry in
            the request.
            </summary>
            <returns>Encoding overhead (in bytes).</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RequestTypeTraits.EntryLimit``1">
            <summary>
            Calculate the maximum number of entries that can be inserted
            into a request.
            </summary>
            <returns>The maximum number of entries that can be encoded into a
            single request.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ResolutionInfo">
            <summary>
            This class keeps resolution information for the whole resolution
            list.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ResolutionInfo.ReportCreateTopicResult">
            <summary>
            Whether reporting topic creation result by topic status
            events.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ResolutionInfo.PendingLists">
            <summary>
            Lists of pending resolution, each of which has the same
            service.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ResponseManager">
            <summary>
            This interface defines methods to processes incoming requests including
            permission requests and service requests, and methods to send responses
            back and cancel requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManager.HandleResolveRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,System.Collections.Generic.List{System.String},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles a resolution request.
            </summary>
            <param name="prolog">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/> of the incoming request.
            </param>
            <param name="topicStringList">topics in the resolution request
            </param>
            <param name="ctx">the connection the request comes from</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManager.HandleServiceRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.ElementImpl,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.OperationImpl,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles an incoming service request with a <paramref name="prolog"/>
            coming from the connection specified by <paramref name="ctx"/>.
            The request data is in the specified <paramref name="requestField"/>.
            It is for the service specified by <paramref name="service"/> and
            the operation specified by <paramref name="operation"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManager.SendResponse(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl,System.Boolean)">
            <summary>
            Sends back the response specified by 'event'. The specified
            'isPartialResponse' indicates whether this response is partial.
            Throws an IOException if sending response fails.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManager.HandleRequestCancelled(System.Int64,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles an incoming message indicating that the backend canceled
            the request specified by 'contextId' on the connection specified by
            'ctx'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManager.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the connection specified by 'ctx' is down.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManager.RemoveRequests(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Removes all pending requests on the specified 'service'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ResponseManagerFactory">
            <summary>
            Interface to create a ResponseManager object.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ResponseManagerImpl">
            <summary>
            This class processes incoming requests including permission
            requests and service requests, which delivers events to publishers and
            keeps requests as they are pending. Then it accepts responses from
            publishers, which removes requests and send responses, or processes
            request cancellation.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.#ctor(Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Internal.DeferredRequestManager,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,System.Int32)">
            <summary>
            Creates a ResponseManagerImpl object.
            </summary>
            <param name="serviceManager">used to get ServiceImpl objects
            </param>
            <param name="eventPublisher">used to publish incoming request or
            request cancellation</param>
            <param name="adminSchema">used to create events</param>
            <param name="deferredRequestManager">used to cache resolve request
            for partially registered service</param>
            <param name="platform">used to send out responses</param>
            <param name="sessionId">for logging</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.HandleResolveRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,System.Collections.Generic.List{System.String},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles a resolution request. The request is converted into a
            permission request. An event is published to notify publisher of
            this request.
            </summary>
            <param name="prolog">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/> of the incoming request.
            </param>
            <param name="topicStringList">
            The topics in the resolution request.
            </param>
            <param name="ctx">the connection the request comes from</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.HandleServiceRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.ElementImpl,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.OperationImpl,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles an incoming service request.
            </summary>
            <param name="prolog">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/> of the incoming request.
            </param>
            <param name="requestField">The content of the request.</param>
            <param name="service">
            The service of the request, e.g. //blp/refdata
            </param>
            <param name="operation">
            The operation of the request, e.g. ReferenceDataRequest
            </param>
            <param name="ctx">
            The connection where the request is received.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.SendResponse(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl,System.Boolean)">
            <summary>
            Sends back the response specified by 'event'. The specified
            'isPartialResponse' indicates whether this response is partial.
            Throws an IOException if sending response fails.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.HandleRequestCancelled(System.Int64,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles an incoming message indicating that the backend canceled
            the request specified by 'contextId' on the connection specified by
            'ctx'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the connection specified by 'ctx' is down. Removes all
            requests on the connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.RemoveRequests(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Removes all pending requests on the specified 'service' and
            generates a cancelled event for all requests that were removed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.HandleResolveRequestImpl(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,System.Collections.Generic.List{System.String},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Implementation of HandleResolveRequest
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.ExtractUserIdentification(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Extracts user identification, uuid, application Id etc from
            <paramref name="prolog"/>, either from
            <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption.PROTOCOL_OPTION_AUTH_USER_INFO"/>
            or <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption.TAIL_OPTION_API_IDENT"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.SendServiceResponse(Bloomberglp.Blpapi.Internal.Events.OutResponseEventImpl,System.Boolean)">
            <remarks>
            Sends back the response specified by 'event'. The specified
            'isPartialResponse' indicates whether this response is partial.
            Throws an IOException if sending response fails.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.RollbackPreviouslyRemovedTopics(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResolveResponse,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Rolls back removed topics when sending the specified 'response'
            to the topic resolution on the specified 'subscribedTopics' failed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.SendResolveResponse(Bloomberglp.Blpapi.Internal.MessageImpl,System.Boolean)">
            <summary>
            Sends back the service response specified by 'event'. The specified
            'isPartialResponse' indicates whether this response is
            partial. Throws an IOException if sending response fails.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.SendResolveResponse(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResolveResponse,Bloomberglp.Blpapi.Internal.Requests.PermissionRequestContext,System.Boolean)">
            <summary>
            Sends back the service response specified by 'event'. The specified
            'isPartialResponse' indicates whether this response is
            partial. Throws an IOException if sending response fails.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.PublishRequestCancelledEvent(Bloomberglp.Blpapi.Internal.Requests.RequestContext,System.String)">
            <remarks>
            Publishes a request failure event indicating the request associated
            with <paramref name="requestContext"/> is cancelled by the backend.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ResponseManagerImpl.AppendRequestInfoOption(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Requests.RequestContext)">
            <summary>
            Appends the <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption.PROTOCOL_OPTION_REQUESTINFO"/>
            option from the request prolog, if present, to the response prolog.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.RoutingDomainManagement.Implementation.RoutingDomain">
            <summary>
            A collection of points of presence acting together as a routing
            domain: a request to route need only ever be sent to a single
            member of a routing domain, since all are assumed to route
            identically.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.RoutingDomainManagement.Implementation.RoutingDomain.DomainId">
            <summary>
            Uniquely identifies a domain. Currently only used in logging to
            differentiate multiple instances of domains.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.RoutingDomainManagement.Implementation.RoutingDomain.NextNode">
            <summary>
            This counter is used to implement a simplified round-robin
            algorithm. When generating the list of members for the current
            domain, it will start with the element at position
            'd_nextNode % d_members.size()'.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.RoutingDomainManagement.Implementation.RoutingDomainManager.StartNode">
            <summary>
            [Testing] retrieve the position to start the load spreading
            round-robin-ish algorithm.
            </summary>
            <returns>
            The position to start the load spreading round-robin-ish algorithm.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RoutingDomainManagement.Implementation.RoutingDomainManager.UsePointOfPresence(Bloomberglp.Blpapi.Internal.PointOfPresenceId)">
            <summary>
            Notify the routing domain manager that the specified 'popId' has
            been selected for a requests.This notification is needed for the
            simplified round-robin algorithm.
            </summary>
            <param name="popId">selected point of presence for a requests.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RoutingDomainManagement.Implementation.RoutingDomainManager.GetMembers">
            <summary>
            [Testing] retrieve the members dictionary for validation
            </summary>
            <returns>
            Read only wrapped members dictionary.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.RoutingDomainManagement.IRoutingDomainManager.UsePointOfPresence(Bloomberglp.Blpapi.Internal.PointOfPresenceId)">
            <summary>
            Notify the routing domain manager that the specified 'popId' has
            been selected for a requests. This notification is needed for the
            simplified round-robin algorithm.
            </summary>
            <param name="popId">selected point of presence for a request.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Routing.EndpointSelectorHandles">
            <summary>
            Contains a pair of EndpointSelector handles for choosing the
            route to send a message and filling the connectivity.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.EndpointSelectorHandles.#ctor(Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle,Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle)">
            <summary>
            Create the object using two different
            <see cref="T:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle"/> for the Send and
            Connectivity handles.
            </summary>
            <param name="resolveHandle">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle"/> used to determine where
            to send a request.
            </param>
            <param name="connectivityHandle">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle"/> used to fill the
            connectivity when sending requests.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.EndpointSelectorHandles.#ctor(Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle)">
            <summary>
            Create the object using the same
            <see cref="T:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle"/> for both Send and
            Connectivity handles.
            </summary>
            <param name="handle">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle"/> used to determine where
            to send a request and to fill the connectivity.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.EndpointSelectorHandles.ReleaseHandles">
            <summary>
            Calls dispose on the handles.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector">
            <summary>
            Defines a component which provides a strategy for repeatedly selecting
            among a collection of endpoints in order to perform an action that
            might fail on some or all of the endpoints.
            </summary>
        </member>
        <member name="E:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector.WakeupEvent">
            <summary>
            An event that is raised when any handles are woken up.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector.HandleCount">
            <summary>
            Gets the number of outstanding handles.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector.CreateHandle(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.UInt32)">
            <summary>
            Creates a new handle to obtain connections authorized by the
            specified <paramref name="identity"/> that can be used for requests
            to the specified <paramref name="serviceCode"/>.
            </summary>
            <remarks>
            The handle that is returned must be disposed after use.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector.ConnectionUp">
            <summary>
            Registers that all existing identities are authorized on a new
            connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies all waiting handles of the down
            <paramref name="connectionContext"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector.ServiceAvailabilityUpdate(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32,System.Boolean)">
            <summary>
            Update service availability for the specified <paramref name="serviceCode"/>
            on the specified <paramref name="connectionContext"/> to the specified
            value of <paramref name="available"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector.GetHandlesPerService(System.UInt32)">
            <summary>
            Gets the number of handles that are associated with the specified
            <paramref name="serviceCode"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector.GetHandlesPerIdentity(Bloomberglp.Blpapi.Identity)">
            <summary>
            Gets the number of handles that are associated with the specified
            <paramref name="identity"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector">
            <summary>
            Provides an endpoint selection strategy which obtains a sequence of
            connected endpoints grouped by domain, filtering out those hosts not
            authorized for the given 'identity' and the hosts for which we know
            that the service is not available.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.CreateHandle(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.UInt32)">
            <summary>
            Creates a new handle to obtain connections authorized by the
            specified <paramref name="identity"/> that can be used for requests
            to the specified <paramref name="serviceCode"/>.
            </summary>
            <remarks>
            The handle that is returned must be disposed after use.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.ConnectionUp">
            <summary>
            Registers that all existing identities are authorized on a new
            connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies all waiting handles of the down
            <paramref name="connectionContext"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.ServiceAvailabilityUpdate(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32,System.Boolean)">
            <summary>
            Update service availability for the specified <paramref name="serviceCode"/>
            on the specified <paramref name="connectionContext"/> to the specified
            value of <paramref name="available"/>.
            </summary>
            <remarks>
            If there are any handles waiting for the <paramref name="serviceCode"/>,
            the <see cref="E:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.WakeupEvent"/> will be raised with those handles.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.GetHandlesPerService(System.UInt32)">
            <summary>
            Gets the number of handles that are associated with the specified
            <paramref name="serviceCode"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.GetHandlesPerIdentity(Bloomberglp.Blpapi.Identity)">
            <summary>
            Gets the number of handles that are associated with the specified
            <paramref name="identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.DestroyHandle(Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle)">
            <summary>
            Destroys the specified <paramref name="handle"/> and releases all
            associated resources.
            </summary>
            <remarks>
            After this call completes, the component will not provide the
            <paramref name="handle"/> in any wakeup call. Calls to this method
            with an invalid or previously destroyed <see cref="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle"/> have
            no effect.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.CloneHandle(Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle)">
            <summary>
            Creates a deep copy of the specified handle. If the handle does not
            exist, return the same handle.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.GetEndpoint(Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle,Bloomberglp.Blpapi.Internal.ConnectionContext@)">
            <summary>
            Obtains the "best" endpoint to use for a request to the identity
            and service code associated with the specified <paramref name="handle"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.GetConnectivity(Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle,Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySetList{System.String}@)">
            <summary>
            Gets the available endpoints for the identity and service code
            associated with the specified <paramref name="handle"/>, after
            removing eliminated endpoints.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.EliminateEndpoint(Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Eliminates the endpoint associated with the specified
            <paramref name="connectionContext"/> on the specified
            <paramref name="handle"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.EliminateRoutingDomain(Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Mark all endpoints in the routing domain to which
            <paramref name="connectionContext"/> is a connection as eliminated
            for the specified <paramref name="handle"/>.
            </summary>
            <remarks>
            <para>
            This means that these endpoints will not be suggested by calls to
            <see cref="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.GetEndpoint(Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle,Bloomberglp.Blpapi.Internal.ConnectionContext@)"/>.
            </para>
            <para>
            There are cases where eliminations may be reset.
            </para>
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.IsWaiting(Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle)">
            <summary>
            Gets whether the specified <paramref name="handle"/> is in a
            waiting state.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle">
            <summary>
            Provides connections authorized by the associated <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl"/>
            that can be used for requests to the associated service.
            </summary>
            <remarks>
            This class must be disposed after use.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle.IsWaiting">
            <summary>
            Gets whether this <see cref="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle"/> is in a waiting state.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle.GetEndpoint(Bloomberglp.Blpapi.Internal.ConnectionContext@)">
            <summary>
            Obtains the "best" endpoint to use for a request to the identity
            and service code associated with this <see cref="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle.GetConnectivity(Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySetList{System.String}@)">
            <summary>
            Gets the available endpoints for the identity and service code
            associated with this <see cref="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle"/>, after removing
            eliminated endpoints.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle.EliminateEndpoint(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Eliminates the endpoint associated with the specified
            <paramref name="connectionContext"/> on this
            <see cref="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle.EliminateRoutingDomain(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Mark all endpoints in the routing domain to which
            <paramref name="connectionContext"/> is a connection as
            eliminated for this <see cref="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle"/>.
            </summary>
            <remarks>
            <para>
            This means that these endpoints will not be suggested by calls to
            <see cref="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle.GetEndpoint(Bloomberglp.Blpapi.Internal.ConnectionContext@)"/>.
            </para>
            <para>
            There are cases where eliminations may be reset.
            </para>
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.Handle"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.GetEndpoint(Bloomberglp.Blpapi.Internal.ConnectionContext@)">
            <summary>
            Retrieves the next best candidate.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.GetConnectivity(Bloomberglp.Blpapi.Internal.Infrastructure.Collections.HashSetList{System.String}@)">
            <summary>
            Provides all endpoints available to the handle.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.EliminateEndpoint(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Eliminates the specified <paramref name="ctx"/> in this handle.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.EliminateRoutingDomain(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Eliminates all endpoints in the same routing domain as the
            specified <paramref name="ctx"/> from this handle.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.Reset">
            <summary>
            Resets all eliminations on the endpoint selector handle and
            reset the available endpoints so that the next call to
            <see cref="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.GetEndpoint(Bloomberglp.Blpapi.Internal.ConnectionContext@)"/> or <see cref="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.GetConnectivity(Bloomberglp.Blpapi.Internal.Infrastructure.Collections.HashSetList{System.String}@)"/>
            will retrieve a new list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.ResetDomains">
            <summary>
            Resets the available endpoints so that the next call to
            <see cref="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.GetEndpoint(Bloomberglp.Blpapi.Internal.ConnectionContext@)"/> or <see cref="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.GetConnectivity(Bloomberglp.Blpapi.Internal.Infrastructure.Collections.HashSetList{System.String}@)"/> will
            retrieve a new list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.WakeUp">
            <summary>
            Resets the <see cref="P:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.IsWaiting"/> flag.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Routing.Implementation.EndpointSelector.HandleData.FindConnectionContext(Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.Domain},Bloomberglp.Blpapi.Internal.Domain@,Bloomberglp.Blpapi.Internal.DomainEndpoint@)">
            <summary>
            Locates the specified <paramref name="ctx"/> in the specified
            <paramref name="domains"/>.
            </summary>
            <returns>
            Whether the operation was successful.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SchemaBasedTickParser.resetSchemaBasedTickData">
             It will always return the same ByteBufferInputStream, which is rewinded
             to the beginning of the encoded bytes
            
             @return
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SchemaElementDefinitionImpl">
             <summary> The definition of an item in a SchemaTypeDefinition. The implementation class for
             SchemaElementDefinition.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SchemaImpl">
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SchemaTypeDefinitionImpl">
             <summary> The definition of a type in the data schema. The implementation class for
             SchemaTypeDefinition.
            
             </summary>
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SecureLoggingHelper">
            <summary>
            This class provide a set of utility functions for secure logging messages.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SecureLoggingHelper.#ctor">
            <summary>
            Intializes a <c>SecureLoggingHelper</c> object.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SecureLoggingHelper.logSubscriptionEvent(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            Decodes and logs all messages in the specified <c>eventObj</c> that need
            secure logging. Messages that do not need secure logging are skipped.
            This is done by another thread. If such a thread does not exist, creates it.
            </summary>
            <param name="eventObj">The <c>EventImpl</c> object that is secure logged</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SecureLoggingHelper.logMessage(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.SecureLogger,Bloomberglp.Blpapi.Internal.MessageImpl)">
            <summary>
            Uses the specified <c>logger</c> to log the specified <c>msg</c>.
            </summary>
            <param name="logger">The secure logger</param>
            <param name="msg">The message logged</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SecureLoggingHelper.logCorrelationID(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.SecureLogger,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            Uses the specified <c>logger</c> to log the specified <c>correlationId</c>
            with the specified <c>text</c>.
            </summary>
            <param name="logger"></param>
            <param name="correlationId"></param>
            <param name="text"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SecureLoggingHelper.logEvent(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.SecureLogger,Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            Iterates all messages in the specified <c>eventObj</c> and uses the
            specified <c>logger</c> to log them.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SecureLoggingHelper.logSubscription(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.SecureLogger,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo})">
            <summary>
            Uses the specified <c>logger</c> to log all subscriptions in the
            specified <c>subscriptionList</c>.
            </summary>
            <param name="logger"></param>
            <param name="subscriptionList"></param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SequenceNumberState">
            <summary>
            Indicates if a sequence number on a <see cref="T:Bloomberglp.Blpapi.Internal.TopicImpl"/> follows
            the global sequence number count or a local count.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.IServiceAvailabilityMap.IsServiceDownOnConnection(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Returns true if a service with the specified <paramref name="svcCode"/>
            on <paramref name="connection"/> went down and false otherwise.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.serviceConnectionView">
            <summary>
            Connection view to update the serviceCode to Connection mapping.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.activeConnectionList">
            <summary>
            The list of connections that are UP. The value is a dummy object.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.requestProvider">
            <summary>
            Request provider for quering if a request is pending.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.subscriptionManager">
            <summary>
            SubscriptionManager for getting a subscription request.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.platformProxy">
            <summary>
            PlatformProxy for sending a request.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.serviceManager">
            <summary>
            ServiceManager to access service name for a particular service
            code.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.eventPublisher">
            <summary>
            Used to publish service status events.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.adminSchema">
            <summary>
            Used to create Service Status events.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.requestProbeHandler">
            <summary>
            ProbeStrategy to handle connection and service notifications.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.serviceAvailabilityMap">
            <summary>
            Keeps track of service availability updates.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.CreateServiceNotificationMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.String,System.Collections.Generic.IEnumerable{System.UInt32},System.Boolean)">
            <summary>
            Creates a ServiceNotification message for service up/down.
            </summary>
            <param name="schema"> The schema for the message.</param>
            <param name="service">
            The message whose status has been updated.
            </param>
            <param name="endpoint">
            The endpoint where the service has been updated. If not empty
            it is added to the message's 'serviceName' field.
            </param>
            <param name="serviceCodes">
            The codes for the services which have changed status.
            </param>
            <param name="isDown">True if the service has gone down.</param>
            <returns>
            True if the service's publisher's state has changed.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.AddServiceCodesForRequest(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Adds the given service codes to the underlying structure.
            These serviceCode will be mapped to connections on which requests
            for any of the service codes can be sent.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.Failover(System.UInt32)">
            <summary>
            Fail-over all the outstanding requests on the specified
            <paramref name="serviceCode"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.ReactToStateChanges(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState)">
            <summary>
            Reacts to the specified changes specified in
            <paramref name="state"/>. It will send all the requests, cancel any
            outstanding request, register timers and fail-over service codes
            specified in the <paramref name="state"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.AddServiceCodes(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Adds the service codes for the specified
            <paramref name="service"/>. The serviceCode will be mapped to
            connections on which requests for any of the service codes can
            be sent.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.AddConnection(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Adds the specified <paramref name="ctx"/> to the active connection
            list. This connection may be used to service some service codes in
            future.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.RemoveConnection(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Removes the specified <paramref name="ctx"/> from active connection
            list. This connection will *not* be used for any other service
            codes.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.AddServiceCodeOnConnection(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Adds the specified <paramref name="serviceCode"/> to the specified
            <paramref name="ctx"/> to be active. Any requests meant for
            <paramref name="serviceCode"/> can be sent on
            <paramref name="ctx"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.RemoveServiceCodeOnConnection(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Removes the specified connection <paramref name="ctx"/> for the
            specified <paramref name="serviceCode"/>. Any requests meant for
            <paramref name="serviceCode"/> will *not* be sent on
            <paramref name="ctx"/> until 'addServiceCodeOnConnection' is
            called.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.AddServiceCodeToHandlers(System.UInt32)">
            <summary>
            Adds the specified <paramref name="serviceCode"/> to the request
            probe handler.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.ResponseCb(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ResponseCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Handles the response on probe request on the specified
            <paramref name="ctx"/>.
            <para>
            If the 'result' is a PARTIAL_RESPONSE, FINAL_RESPONSE or a FAILED,
            invoke the <paramref name="callback"/> along with a new
            <see cref="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState"/>, otherwise do
            nothing.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.SendContext(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.SendContext})">
            <summary>
            Sends the list of <see cref="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.SendContext(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.SendContext})"/> specified by
            <paramref name="toSend"/>. Note that we are passing the vector by
            address because the prolog inside <paramref name="toSend"/> needs
            to changed, since identity is applied by underlying component.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.TimerCb(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerContext)">
            <summary>
            Callback bound when a timer is registered. On invocation call the
            specified <see cref="P:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerContext.Callback"/> with a
            new instance of <see cref="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState"/> and
            then react to the state by calling
            <see cref="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.ReactToStateChanges(Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.ProbeStrategyState)"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnections.Implementation.ServiceConnectionController.RegisterTimers(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerContext})">
            <summary>
            Register the list of <see cref="T:Bloomberglp.Blpapi.Internal.Interfaces.ProbeStrategy.TimerContext"/>
            specified by <paramref name="timerCtx"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceConnectionView">
            <summary>
            Implementation of 'IServiceConnectionView'. This component is fully
            thread safe.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnectionView.#ctor(System.Int32)">
            <summary>
            Creates an instance of 'ServiceConnectionView' with no mappings
            between service codes and connections
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnectionView.UpdateConnection(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Update the specified best connection 'ctx' for the specified
            'serviceCode'.
            </summary>
            <param name="ctx">
            </param>
            <param name="serviceCode">
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnectionView.UpdateSubConnection(Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Update the specified best connection 'ctx' for the specified
            'service' for subscriptions.
            </summary>
            <param name="ctx">
            </param>
            <param name="service">
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnectionView.GetConnection(System.UInt32)">
            <summary>
            Return the connection which is the best route to send a request for
            the specified 'serviceCode'. If a connection could not be found
            return 'null'.
            </summary>
            <param name="serviceCode">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnectionView.GetSubConnection(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Return the connection which is the best route to establish a
            subscription for the specified 'service'. If a connection could not
            be found return 'null'.
            </summary>
            <param name="service">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnectionView.GetMostUsedConnection">
            <summary>
            Return the connection which is used by the most number of service
            codes. If a connection could not be found return 'null'.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnectionView.GetAllSubServiceCodes(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Return all the service codes associated with the specified
            connection 'ctx' w.r.t to requests.
            </summary>
            <param name="ctx">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceConnectionView.GetAllServiceCodes(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Return all the services associated with the specified connection
            'ctx' w.r.t to subscriptions.
            </summary>
            <param name="ctx">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinition.SetSubscriberResolutionServiceId(Bloomberglp.Blpapi.Internal.ServiceName,System.UInt32)">
            <summary>
            Sets the subscriber resolution service Id of the specified
            'serviceName' to te the specified 'id'. Subscriber resolution
            service Id is used for topic resolution for subscribers.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinition.SubscriberResolutionServiceId(Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Gets the subscriber resolution service Id of the specified
            'serviceName'. Subscriber resolution service Id is used for topic
            resolution for subscribers.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinition.SetIsPubSubContributor(Bloomberglp.Blpapi.Internal.ServiceName,System.Boolean)">
            <summary>
            Sets the service with the specified 'serviceName' is pub-sub
            contributor.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinition.IsPubSubContributor(Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Returns whether the service with the specified 'serviceName' is
            out-of-band (pub-sub) contributor.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinition.SetPublisherResolutionServiceId(Bloomberglp.Blpapi.Internal.ServiceName,System.UInt32)">
            <summary>
            Sets the publisher resolution service ID of the service with
            the specified 'serviceName' to be the specified
            'publisherResolutionServiceId'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinition.PublisherResolutionServiceId(Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Returns the publisher resolution service ID of the service with
            the specified 'serviceName' or null if not defined.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceDefinitionDownloadSvcHelper">
             <summary>
             </summary>
             <author>  ssomu
             *
            
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinitionDownloadSvcHelper.createResolveServiceRequest(System.String)">
             <summary>
             </summary>
             <param name="serviceName">serviceName
             </param>
             <returns>
            
             </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinitionDownloadSvcHelper.parseResponse(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer)">
            <summary> Parses a response message from the schema download service and returns
            a decoded message
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinitionDownloadSvcHelper.processDownloadResponse(System.Int64,Bloomberglp.Blpapi.Internal.ElementImpl)">
             <summary> Processes a schema download response. If this is the last response for
             a schema download request, then it also returns a parsed SchemaImpl. If
             this is not the last response this method returns null.
             </summary>
             <param name="contextId">contextId
             </param>
             <param name="downloadResponse">schemaDownloadResponse
             </param>
             <returns>
            
             </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceDefinitionId.compareVersion(Bloomberglp.Blpapi.Internal.ServiceDefinitionId)">
            <summary>
            Compare version of the current service definition id against that
            of 'other'. A version is a string of form
            "n_(0).n_(1) ... n_(m-2).n_(m-1)", where "n_(i)" is an arbitarty
            natrual number and m is the length. Two versions V1 and V2 are
            equal if they are of same length L and for each i in [0...L-1] such
            that V1[i] == V2[i]. If V1 and V2 have different lengths, the newer
            version is defined as following (assuming the common prefix length
            is L'):
            * If there is an i in [0...L'-1] such that V1[i] > V2[i], then V1
              is newer (vice versa);
            * If the two prefixes are equal, the two versions are considered
              equal if all the extra numbers in the longer version are zero;
            * In all other cases, the longer version is newer.
            </summary>
            <param name="other">
            The service definition id whose version is to be compared
            </param>
            <returns>
            Positive number if version of the current service definition id is
            newer, zero if they are equal and negative number if version of
            'other' is newer
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceDefinitionResourceLoader">
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl">
            <summary>
            Implements a Service object that defines the schema of a service and
            other attributes. It contains subscription data schema and/or
            request-response schema.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.#ctor(System.String,Bloomberglp.Blpapi.Internal.ServiceDefinition)">
            <summary>
            Creates a instance of 'ServiceImpl' with the specified arguments
            </summary>
            <param name="serviceName">The name of the service (as specified by
            the user) </param>
            <param name="svcDefinition">The service definition containing the
            events and operations if present and the schema.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.#ctor(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.String,System.UInt32)">
            <summary>
            Copy constructor which creates a copy of 'ServiceImpl' instance
            with the same contents as the <paramref name="original"/> but a
            different <paramref name="serviceName"/> and
            <paramref name="defaultServiceId"/>.
            Applicable only to the actual subscriptions.
            </summary>
            <para>
            This constructor should never be called by publisher as its goal
            is to create the clone of an existing service if a lookup for a
            service fails during the subscription.
            </para>
            <param name="original">The original instance to copy.</param>
            <param name="serviceName">
            Service name to be used in a new instance.
            </param>
            <param name="defaultServiceId">
            Default service Id to be used in a new instance.
            </param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.IsRegistered">
            <summary>
            'true' if service has been successfully registered,
            'false' if service is either not registered or has been
            deregistered.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.ServiceCatalogId">
            <summary>
            The service catalog id belonging to the service.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.Name">
            <summary>
            Gets the name of the service as a string
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.ServiceName">
            <summary>
            Gets The name of the service as a ServiceName object
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.AuthorizationServiceName">
            <summary>
            Gets the authorization service for this service if specified in the
            schema or null Specified in the scheme as an attribute of
            <see cref="F:Bloomberglp.Blpapi.Internal.ServiceDefinitionParser.SERVICE"/> named
            <see cref="F:Bloomberglp.Blpapi.Internal.ServiceDefinitionParser.AUTHORIZATION_SERVICE"/>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.ServiceVersion">
            <summary>
            Gets the version of the service if specified in the schema or null
            Specified in the scheme as an attribute of
            <see cref="F:Bloomberglp.Blpapi.Internal.ServiceDefinitionParser.SERVICE"/> named
            <see cref="F:Bloomberglp.Blpapi.Internal.ServiceDefinitionParser.VERSION"/>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.NumOperations">
            <summary>
            Gets the number of operation defined in this service. Returns 0 if
            no operations found.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.NumEventDefinitions">
            <summary>
            Gets the number of event definitions.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.SecureLogger">
            <summary>
            Gets the SecureLogger object if secure logging is requested in the
            service definition and null otherwise.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.SubscriberResolutionServiceId">
            <summary>
            Gets subscriber resolution service ID or null if not defined.
            Publishers register subscriber resolution service ID and
            subscribers send resolution requests that are routed to it.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.PublisherResolutionServiceId">
            <summary>
            Returns publisher resolution service ID or null if not defined.
            Publishers sends resolution request for published topics to
            this service ID if defined.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.ContributionPricingSource">
            <summary>
            Gets the pricing source for contribution that is put into Object ID
            resolution request from publishers.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.PublisherType">
            <summary>
            Gets publisher type.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.AuthOperationImpl">
            <summary>
            Gets authorization operation.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.ProviderIdentity">
            <summary>
            Gets or sets the identity of publisher on this service used in
            service registration and deregistration.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.RegistrationOptions">
            <summary>
            Gets or sets the registration options used in service registration.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.SolicitedRecapEventName">
            <summary>
            Gets solicited recap event name. "Solicited" means it is
            requested by the backend.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.RecapEventId">
            <summary>
            Gets the recap event ID defined in this service and -1 if not
            defined.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.PublisherSupportsRecap">
            <summary>
            Gets whether publishers on this service supports recap.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.ResolutionServiceName">
            <summary>
            Gets resolution service name (Object ID resolution from
            publishers).
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.UnSolicitedRecapEventName">
            <summary>
            Gets unsolicited recap event name. "Unsolicited" means it
            not requested by the backend.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.IsTest">
            <summary>
            Indicates whether this service is for testing purposes only.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.SubscriptionServiceCodes">
            <summary>
            Gets the service codes needed to establish a subscription
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.CreateRequestImpl(Bloomberglp.Blpapi.Name)">
            <summary> Returns an empty Request object for the specified
            operation.
            </summary>
            <param name="operationName">The name of the operation</param>
            <returns>
            a Request instance
            </returns>
            <throws>NotFoundException if operation named operationName could
            not be found</throws>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.CreateRequest(System.String)">
            <summary> Returns an empty Request object for the specified
            operation.
            </summary>
            <param name="operationName">The name of the operation</param>
            <returns>
            a Request instance
            </returns>
            <throws>NotFoundException if operation named operationName could
            not be found</throws>
            <throws>ArgumentException if the operationName is null</throws>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.CreateAuthorizationRequest">
            <summary>
            Creates an empty authorization Request. The authorization request
            is like any other request except that its operation name is already
            predefined ("AuthorizationRequest").
            </summary>
            <returns>An authorization request instance as defined by this
            service</returns>
            <throws>NotFoundException if the service does not have an operation
            named <see cref="F:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.AuthorizationRequest"/></throws>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetOperation(System.Int32)">
            <summary>
            Returns the Operation object at the specified 'index'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetOperation(System.String)">
            <summary>
            Returns the Operation object with the specified 'name'.
            </summary>
            <throws> NotFoundException</throws>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.OperationImpl(System.String)">
            <summary>
            Returns the OperationImpl object with the specified 'name'.
            </summary>
            <throws> NotFoundException</throws>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.OperationImpl(System.Int32)">
            <summary>
            Return the operatonImpl at the index specified by 'i'.
            </summary>
            <param name="i">index</param>
            <returns>The operation at the given position.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetOperation(Bloomberglp.Blpapi.Name)">
            <summary>
            Returns the Operation object with the specified 'name'.
            </summary>
            <throws>NotFoundException</throws>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetEventDefinition(System.Int32)">
            <summary>
            Returns the event definition at the specified 'index'. Used
            together with NumEventDefinitions to iterate all event definitions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetEventDefinitionImpl(System.String)">
            <summary>
            Returns the event definition with the specified 'name'. The name of
            an event is unique.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetEventDefinitionImpl(Bloomberglp.Blpapi.Name)">
            <summary>
            Returns the event definition with the specified 'name'. The name of
            an event is unique.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetEventDefinition(System.String)">
            <summary>
            Returns the event definition with the specified 'name'. The name of
            an event is unique.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetEventDefinition(Bloomberglp.Blpapi.Name)">
            <summary>
            Returns the event definition with the specified 'name'. The name of
            an event is unique.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.OperationImpl(Bloomberglp.Blpapi.Name)">
            <summary>
            Returns the OperationImpl object with the specified 'name'.
            </summary>
            <throws> NotFoundException</throws>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetServiceId">
            <summary>
            Returns the service ID (service code). Returns the default service
            ID if defined in the service definition; otherwise, returns the
            service ID of the first operation if there are operations or 0 if
            there are no operations.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.HasServiceId">
            <summary>
            Returns whether this service has service ID (the default service ID
            or the service ID of the first operation).
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.CreateAdminEvent">
            <summary>
            Creates and returns an admin event on the admin service stored in
            this service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.NeedSecureLogging">
            <summary>
            Returns whether this service need secure logging.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.CreatePublishEvent">
            <summary>
            Creates and returns an publish event on this service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.Print(System.IO.Stream)">
            <summary>
            Print the service schema to the specified 'output'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.Print(System.IO.TextWriter)">
            <summary>
            Print the service schema to the specified 'writer'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.ToString">
            <summary>
            Returns the service schema as a string.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.IsSubscriptionServiceCode(System.UInt32)">
            <summary>
            Gets whether the specified <paramref name="serviceCode"/> is a
            subscription related service code.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.CreateResponseEvent(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Creates  and retruns an response event for the request indexed by
            the specified 'correlationId' to publisher.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.HasResolutionService">
            <summary>
            Returns whether the service has resolution service (the resolution
            service name is null or empty).
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.GetOperationServiceIds">
            <summary>
            Get all the service codes associated with operations.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.EventDef(System.Int32)">
            <summary>
            Return the event definition of the event identified by 'eventId'
            </summary>
            <param name="eventId">The eventId of the event</param>
            <returns>The event definition if found or null if eventId is
            unknown</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl.PrintProxy(Bloomberglp.Blpapi.Internal.Infrastructure.Io.ProxyWriter)">
            <summary>
            Implements printing into the specified 'writer'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ClearCallback">
            <summary>
            Interface of callback called in deregistering service to clear
            all subscriptions, requests and topics on the
            <paramref name="service"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ConnectionCompletionCallback">
            <summary>
            Type of service registration completion callback on a connection.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.JobStartFunction">
            <summary>
            Job start function interface.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceCodeUpdateFn">
            <summary>
            Functor to update service codes for the specified services.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback">
            <summary>
            Defines a callback that is invoked when one step of a service operation
            has completed.
            <para>
            A service operation may include multiple steps. For example, service
            registration can include service open, resolution service open, service
            registration, resolver service registration, etc. This callback is invoked
            after each step is completed to either fail the whole operation if the
            current step fails or to start the next step.
            </para>
            <para>
            This callback is different from <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback"/>
            in that they are invoked internally only by <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager"/>
            components whereas the completion callbacks are used to notify
            <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager"/> callers that the service operation
            they requested is completed.
            </para>
            </summary>
            <param name="result">
            Contains information about the result of the operation.
            </param>
            <param name="service">
            The relevant service that was involved in the operation.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> from the response.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback">
            <summary>
            A callback that is invoked when a service operation, e.g.
            <see cref="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.OpenService(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback)"/> or
            <see cref="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.RegisterService(System.String,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback)"/>, has completed.
            <para>
            This callback is used by components to perform tasks after the service
            operation is completed. For example, <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager"/>
            makes subscriptions after the service is opened.
            </para>
            <para>
            Note that a service operation might include multiple steps, for example,
            service registration can include service open, resolution service open,
            service registration, resolver service registration, etc. This callback
            is invoked when all the steps are completed.
            </para>
            </summary>
            <param name="result">
            The result of the operation.
            </param>
            <param name="service">
            The <see cref="T:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl"/> that's been opened or registered.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair">
            <summary>
            A pair of service name and registration parts(see also registration
            parts in ServiceRegistrationOptionImpl).
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.ServicePartRegistry">
            <summary>
            A storage of all the registered connections of a service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.ServicePartRegistry.Contains(Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair)">
            <summary>
            Checks if the registry contains any connections for a received
            <paramref name="nameOptionPair"/>.
            </summary>
            <param name="nameOptionPair">
            <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair"/> to look the connections for.
            </param>
            <returns>
            True if <paramref name="nameOptionPair"/> was found, false otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.ServicePartRegistry.AddConnectionContext(Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.HashSet{Bloomberglp.Blpapi.Internal.ConnectionContext}@)">
            <summary>
            Adds a new connection for a received <paramref name="nameOptionPair"/>.
            Yields the set <paramref name="registeredConnections"/> containing all the
            registered connections for <paramref name="nameOptionPair"/>.
            </summary>
            <param name="nameOptionPair">
            <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair"/> to add the connection to.
            </param>
            <param name="context">The connection to add.</param>
            <param name="registeredConnections">
             When this method returns, contains the set of all the connections registered for
            <paramref name="nameOptionPair"/>.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.ServicePartRegistry.TryGetConnections(Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair,System.Collections.Generic.HashSet{Bloomberglp.Blpapi.Internal.ConnectionContext}@)">
            <summary>
            Gets the connections registered for <paramref name="nameOptionPair"/>
            </summary>
            <param name="nameOptionPair">
            <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair"/> to look the connection for.
            </param>
            <param name="registeredConnections">
             When this method returns, contains the set of all the connections registered for
            <paramref name="nameOptionPair"/>, if the connections are found. Otherwise,
            the default value for the HashSet of ConnectionContexts.
            </param>
            <returns>
            True if connections were found, false otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.ServicePartRegistry.Remove(Bloomberglp.Blpapi.Internal.ServiceName,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.HashSet{Bloomberglp.Blpapi.Internal.ConnectionContext}}@)">
            <summary>
            Removes all the entries for <paramref name="serviceName"/>.
            Yields the dictionary <paramref name="serviceConnections"/> containing all the
            removed service parts and connections.
            </summary>
            <param name="serviceName">Name of a service to remove the data for.</param>
            <param name="serviceConnections">
            When this method returns, contains the dictionary where the keys are the removed
            registered parts and values are the sets of their connections if the
            <paramref name="serviceName"/> was found and removed. Otherwise, the default
            value for the dictionary of ints and HashSets of ConnectionContexts.
            </param>
            <returns>
            True if any data was found and successfully removed, false otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.ServicePartRegistry.GetAllServiceConnections(Bloomberglp.Blpapi.Internal.ServiceName,System.Int32,System.Collections.Generic.HashSet{Bloomberglp.Blpapi.Internal.ConnectionContext}@)">
            <summary>
            Gets the connections registered for service parts <paramref name="serviceRegisteredParts"/>
            of a service <paramref name="serviceName"/>.
            Service parts and <paramref name="serviceRegisteredParts"/> may both contain several
            registered parts. In this case they act as masks of the flags, so, all the connections
            registered for service parts which overlap with <paramref name="serviceRegisteredParts"/>
            will be returned.
            </summary>
            <param name="serviceName">Service name.</param>
            <param name="serviceRegisteredParts">Registered parts received as mask.</param>
            <param name="foundConnections">
             When this method returns, contains the set of all the connections registered for
            service parts <paramref name="serviceRegisteredParts"/> of a service
            <paramref name="serviceName"/>.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.ServicePartRegistry.GetAllRegisteredParts">
            <summary>
            Returns all the registered parts of all the services.
            </summary>
            <returns>
            List of <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair"/> entries containing all the registered parts
            of all the services.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.ServicePartRegistry.RemoveConnection(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Remove <paramref name="connectionContext"/> for all the registered parts of all the services.
            </summary>
            <param name="connectionContext"><see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> to remove.</param>
            <returns>
            A list of entries containing service name, registration parts and set of connections
            from which <paramref name="connectionContext"/> was removed.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager">
             <summary>
             <para>
             Service Manager which is shared by both the Consumer and Provider
             Session Function split:</para>
            
             <para>
             SessionImpl creates ServiceManager for
             1. managing open services on subscriber connection and
             2. managing registered services on the publisher connection.</para>
            
             <para>
             It creates and uses MetadataManager to resolveService and
             download metadata. The Registration request is sent directly to the
             RequestManager on the consumer connection. On callback ServiceManager
             decodes responses, updates serviceMap and creates and sends events for
             the user to SessionImpl using the EventPublisher interface.</para>
            
             <para>
             On construction, Metadata manager tries to open the admin service and
             and if successful, updates the AdminServiceHolder.</para>
            
             <para>
             If parsing service definition fails, Tries to
             get the previous version of the service.</para>
            
             <para>
             Failover:
             Once AuthorizationManager is failed over by SessionImpl,
             ServiceManager failover can be initialed
             Note : Failover should not send out any events to the user as they may
                    be misleading. E.g if on failover ServiceRegistration fails.
                    use will receive a ServiceRegistrationFailure message in the
                    middle of publishing.</para>
            
             <para>
             1. OpenService :
             - Assuming that the metadata on the platform/AS is in synch.,
               there is no failover required for opened services.
             - For all services that are waiting open completion are a
               responsibility of the metadata manager(i.e RequestManager).</para>
            
             <para>
             2. RegisterService :
             - For all services that are waiting open completion are a
               responsibility of the metadata manager(i.e RequestManager).
             - For all services whose schema is downloaded, but are pending
             Registration such requests will be queued in the RequestManager who
             will be responsible for their fail-over.
             - For existing resolved services, we need not open the services again,
               but We need to send the RegistrationRequest to the platform via
               RequestManager.
                * If service Registration fails on failover, we need to remove the
                  service from the services map and send a
                  ServiceRegistrationTerminated message.</para>
            
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.#ctor(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,Bloomberglp.Blpapi.Internal.Requests.IRequestProvider,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceCodeUpdateFn,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerConfig,System.Int32)">
            <summary>
            Creates a ServiceManagerImpl object.
            </summary>
            <param name="platformProxy">
                Identifies protocol for network communication as well as IP
                addresses associated with
                <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/>
            </param>
            <param name="requestProvider">
                How requests associated with service management, such as the
                schema version information request and schema download request,
                are sent
            </param>
            <param name="serviceCodeUpdateFn">
                Notified of service code updates for underlying services
            </param>
            <param name="eventPublisher">
                Where status events generated by underlying services are
                published
            </param>
            <param name="serviceManagerConfig">
                Configurable parameters for <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager"/>,
                such as metadata manager timeouts
            </param>
            <param name="sessionId">
                session ID for logging
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.#ctor(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,Bloomberglp.Blpapi.Internal.Requests.IRequestProvider,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.SchemaMetadataManager.IMetadataManager,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm,Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManagerMessageFactory,System.Int32)">
            <summary>
            Creates a ServiceManagerImpl object (for testing).
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.JobCancellationCallback">
            <summary>
            Job cancellation callback interface
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.JobContinuationCallback">
            <summary>
            Job continuation callback called when job is done
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.AdminService">
            <summary>
            Gets the admin service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.GetService(System.String)">
            <summary>
            Returns the ServiceImpl object for the previously opened
            or registered service specified by 'name'. If the service
            was not previously opened or registered, then returns null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.GetService(Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Returns the ServiceImpl object for the previously opened
            or registered service specified by 'serviceName'. If the service
            was not previously opened or registered, then returns null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.GetService(System.UInt32)">
            <summary>
            Returns the ServiceImpl object for the previously opened
            or registered service has the specified 'serviceCode'. If the
            service was not previously opened or registered, then returns null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.GetServiceOrClone(System.String,System.Boolean@)">
            <summary>
            Returns the ServiceImpl object for the previously opened
            service or for the newly cloned service specified by
            <paramref name="serviceName"/>.
            </summary>
            <param name="serviceName">
            A string containing the service name or 'svc_name#svc_id'
            where 'svc_name' is service name and 'svc_id' is service Id
            encoded as string presentation of unsigned int.
            </param>
            <param name="isClone">Ouput param to indicate a cloning.</param>
            <returns>
            If <paramref name="serviceName"/> is a name of the previously
            opened service, returns ServiceImpl object for it.
            Else if 'svc_id' is present and 'svc_name' is a name of the
            previously opened service, creates and returns a clone of that
            service with name <paramref name="serviceName"/> and new service
            Id 'svc_id'.
            Otherwise, returns null.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.CorrelationCanceler">
            <summary>
            Returns a CorrelationCanceler object to provide the function to
            cancel open/register service operations.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.RegisterService(System.String,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback)">
            <summary>
            Downloads the service definition and register the service with the
            name of the specified 'name'.  The specified 'providerIdentity'
            provides permission for registration. All service registration
            status messages are attached with the specified 'correlationId'.
            The specified 'registrationOptions' has the options such as group
            ID and service priority. Calls the specified 'callback' when
            service registration is completed. It is possible that 'callback'
            is called within the locking context of this manager.
            </summary>
            <param name="name">service name</param>
            <param name="providerIdentity">identity providing permissions
            </param>
            <param name="correlationId">CorrelationId object associated with
            events</param>
            <param name="registrationOptions">registration options such as
            group ID</param>
            <param name="resultCallback">completion callback</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.Failover(Bloomberglp.Blpapi.Internal.Interfaces.CompletionCallback)">
            <summary>
            Starts failover for this component and call 'callback' when
            failover for this component is completed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.GetAllServices(System.UInt32)">
            <summary>
            Get the list of services for the specified service codes, the
            service code be a service code on operation, the default service id
            or any of the resolution service ids.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the connection pointed by the specified 'ctx' is down.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.CancelRequests(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID})">
            <summary>
            Cancels service opening or registration specified in the 'cids'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.Cancel(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Cancels service opening or registration specified by 'cid'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.SetRegistrationAnnouncementCb(Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ConnectionCompletionCallback)">
            <summary>
            Sets registration completion callback called when a service is
            registered on a connection. The callback is used to notify starting
            processing deferred subscription requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.DeregisterService(System.String,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ClearCallback)">
            <summary>
            Deregisters the service identified by the specified 'svcNameStr'.
            The identity in the service registration is reused to verify
            permissions for deregistration. If the service is not
            registered nor in pending registration, returns a true value.
            Returns false otherwise. If the service is in pending registration,
            cancels the pending registration and call the specified
            'clearCb'. If the service is registered, sends a
            deregistration request, calls the specified 'clearCb' and
            creates a ServiceDergistered message. All published events on
            topics created on this service will be ignored after this method
            returns.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.PartialRegistered(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns true if the service registration for the specified
            'seviceName' on the specified 'ctx' is not done but the subscription
            and/or resolution registration in the service on 'ctx' is done;
            return false otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.PartialRegisteredName(System.UInt32,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns service name if the service registration for the specified
            'serviceId' in the service is done but the whole service
            registration is not done; return null otherwise. Resolution
            requests from partially registered service on the connection should
            be deferred until registration is done.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.SendSubServiceCodeStatus(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate)">
            <summary>
            Update the sub-service code availability for the specified
            'serviceName' by advertising/registering and
            dropping/de-registering service for the sub-service codes given in
            the specified 'sscUpdate'. Each item in 'sscUpdate' is a
            sub-service code range which is given as a closed interval and each
            newly-registered range is associated with an integer priority with
            larger integers representing higher priority.  Note that Sub
            service code update will be sent on all connections on which the
            service is currently registered. The update will be cached so that
            it can be re-applied in case of a failover. Return zero on success
            and a non-zero value otherwise. The behavior is undefined unless
            the service is already registered successfully.  Sends the sub
            service code changes for the specified 'serviceName' service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.CreateServiceAvailabilityInfo(Bloomberglp.Blpapi.Internal.ServiceName,System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.ConnectionContext})">
            <summary>
            Creates and returns an event containing a message showing
            connections in the specified 'contexts' are registered for the
            specified 'serviceName'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.SendRegistrationRequestAlreadyRegistered(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Int32,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends a registration request for the specified 'service' on the
            specified 'ctx'. The service is already registered on other
            connections.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.OpenServiceCb(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            This is where we add the service to the map after opening it
            registerService should not have it in the flow.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.SendNextRegistrationRequest(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback)">
            <summary>
            Keeps sending subscription request to the available connections
            until sending to one connection succeeds or reach the last
            connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.HandleRegistrationResponse(Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes,Bloomberglp.Blpapi.Internal.DetailedResult,System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Handles registration response on a connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.SendAllRemainingRegistrationRequest(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback)">
            <summary>
            Sends registration requests to other connections after
            one connection is registered.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.CancelOpenServiceJob(System.Int32)">
            <summary>
            Cancels the opening service job pointed by the specified 'jobId'.
            </summary>
            <param name="jobId">The id of the job to cancel.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.CompleteOpenService(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceDefinition,Bloomberglp.Blpapi.Internal.ServiceDefinitionId,System.Nullable{System.UInt32},System.String,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            This is where the service impl is created.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.OpenServiceImpl(System.Int32,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback)">
            <summary>
            This is implementation of opening service. This call is meant only
            for consumption
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.RegisterServiceImpl(Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback)">
            <summary>
            The entry point of service registration job.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.OpenToResolutionOpenCb(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            The callback that is called to continue service registration after
            the schema is download. Opens the resolution service if it exists
            to provides the resolution service for subscriber, or continue
            sending registration request.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ResolutionServiceOpenedCb(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            The callback that is called after the resolution service is opened
            and continue sending service registration request.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ResolutionServiceOpenToRegisterCb(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Continues registration after the service and the resolution service
            in the service (if existing) is opened. Sends registration
            requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.AddPartialRegisterConnection(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Int32,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Subscription and/or resolution service is registered but the
            service registration is not done (request-response registration is
            not done). We should keep this state so that we could accept
            subscription requests and defer them.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.RemovePartialRegisterConnection(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            The service registration on this connection is done and remove it
            from 'partialRegisteredServices' and
            'partialRegisteredServiceIds'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.RegisterServiceCompleteCb(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Handle registration response on the specified 'ctx' for the
            specified 'service' which is already registered (ever registered on
            a connection). The registration request is indexed by the specified
            'requestId'. The response is in the specified 'commResult' and
            'result'. The specified 'options' is the snapshot of the
            registration option which was sent in the registration request.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.RegisterServiceCompleteAlreadyRegisteredCb(Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes,Bloomberglp.Blpapi.Internal.DetailedResult,System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Int32,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            The callback that is called on the completion of service
            registration on a new connection for the service that is already
            registered.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.AddConnectionContextToDeque(System.Collections.Generic.LinkedList{Bloomberglp.Blpapi.Internal.ConnectionContext},Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Adds a new connection pointed by the specified 'ctx' into the
            specified 'orderedList' by whether it is authorized for the
            specified 'identity'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.GetOrderedConnectionContext(System.Collections.Generic.LinkedList{Bloomberglp.Blpapi.Internal.ConnectionContext},System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int32},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Adds all connection in the specified 'originalSet' into the
            specified 'orderedList' by whether it is authorized for the
            specified 'identity'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.SendRegistrationRequest(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback)">
            <remarks>
            Sends a registration request and put the request into pending map.
            Assumes it is in the locking context of registration. The
            registration request is on the specified 'service', with the
            permission of the specified 'providerIdentity', and with the
            registration options in the specified 'registrationOptions'. The
            specified 'callback' is called when the registration is done.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.SendRegisterationRequestImpl(System.Int32,Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends a registration request on the underlying communication layer
            for both subscription and request-response in the service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.HasPendingRegistrationRequest(Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair,System.Int32)">
            <summary>
            Returns whether there is a pending registration request with the
            specified 'requestId' and on the service of the specified
            'serviceName'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.DeletePendingRegistrationRequest(Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.Components.NameOptionPair,System.Int32)">
            <summary>
            Deletes a pending registration request from the map with the
            specified 'requestId' and on the service of the specified
            'serviceName'. Returns true on success and false otherwise.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.PendingRegistrationRequest">
            <summary>
            The information of a pending registration request sent out but no
            response yet
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerImplMessageFactory">
            <summary>
            Implements ServiceManagerMsgFactory to create an event containing
            a message telling what connections have the service registered.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob">
            <summary>
            An object of this class is a job to open or register a service.
            The job will begin executing after start has been called.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.#ctor(Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Logger,System.Int32,Bloomberglp.Blpapi.Internal.ServiceName,System.String,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.JobStartFunction,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback,Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.JobCancellationCallback,Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.JobContinuationCallback)">
            <summary>
            Creates a ServiceManagerJob object.
            </summary>
            <param name="logger">for logging</param>
            <param name="jobId">the job integer identifier</param>
            <param name="serviceName">service name of opening or
            registering service</param>
            <param name="jobType">a string value of
            JOB_TYPE_REGISTER_SERVICE("registerService") and
            JOB_TYPE_OPEN_SERVICE("openService")</param>
            <param name="startOperation">start function called to start
            this job</param>
            <param name="resultResultCallback">completion callback called to
            notify the result of the operation</param>
            <param name="cancelFunction">cancellation function called to
            cancel job if specified. Note that if the cancellation
            function is specified, then the function should complete the
            job by calling the callback specified during start function
            invocation before returning.
            </param>
            <param name="jobCompletionCallback">callback to notify the
            completion of this job</param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.ServiceName">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.JobType">
            <summary>
            Gets job type that is a string value of
            JOB_TYPE_REGISTER_SERVICE ("registerService") and
            JOB_TYPE_OPEN_SERVICE("openService").
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.JobId">
            <summary>
            Gets the job ID.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.Start">
            <summary>
            Initiate the operation corresponding to this job if the job was
            not already canceled. If the job was already canceled, then
            notify job completion callback.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.OnCompletion(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Complete the job if it was not already completed. Complete the
            job by calling the result callback if it was specified during
            construction and unconditionally calling the job completion
            callback to notify completion of this job.
            </summary>
            <param name="result">the result of the operation</param>
            <param name="service">the service instance if operation
            succeeded</param>
            <param name="guid">The request guid of the result.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.Cancel">
            <summary>
            Cancels the execution of this job if not already canceled or
            completed. If the job could be canceled, then call the result
            callback synchronously to indicate failure. If the job has
            already started then call the job completion callback specified
            during construction. Note that if the cancellation function is
            specified during construction, it will be called and the
            cancellation function will be responsible for completing this
            job. Also note that if the job was not already started then the
            job completion callback will not be called.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.IsTerminated">
            <summary>
            Returns whether this job is cancelled or completed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.OnCompletionImpl(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Complete the job by calling the result callback if it was
            specified during construction. Unconditionally call the job
            completion callback to notify completion of this job.
            </summary>
            <param name="result">the result of the operation</param>
            <param name="service">the service instance if operation
            succeeded</param>
            <param name="guid">The request guid of the response.</param>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.JobStatus.Idle">
            <summary>
            Waiting in the queue
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.JobStatus.Running">
            <summary>
            Running and not finished yet
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.JobStatus.Cancelled">
            <summary>
            Job is cancelled
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob.JobStatus.Completed">
            <summary>
            Job is completed
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceJobManager">
            <summary>
            Queues all jobs in several queues and runs one job for each queue
            at a time.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceJobManager.#ctor(System.Int32,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Logger)">
            <summary>
            Creates a ServiceJobManager object.
            </summary>
            <param name="numQueues">the number of queues, each of which can
            have a job running</param>
            <param name="logger">logging object</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceJobManager.SubmitJob(System.Int32,Bloomberglp.Blpapi.Internal.ServiceName,System.String,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.JobStartFunction,Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.JobCancellationCallback,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback)">
            <summary>
            Creates a new job and inserts into the pending queue. If there
            are no outstanding jobs in that queue, this job will be started
            immediately. Else completion of earlier jobs in the queue will
            eventually start this job.
            If this 'ServiceJobManager' is already stopped, then the
            specified 'callback' will be called synchronously to indicate
            failure.
            </summary>
            <param name="jobId">the job ID</param>
            <param name="serviceName">service name of service job</param>
            <param name="jobType">a string value of
            JOB_TYPE_REGISTER_SERVICE("registerService") and
            JOB_TYPE_OPEN_SERVICE("openService")</param>
            <param name="startOperation">start function called to start
            this job</param>
            <param name="cancelFunction">optional cancellation function to
            cancel the job. Note that if the cancellation function is
            specified, then the function should cancel the job completely
            and trigger the completion callback synchronously</param>
            <param name="resultCallback">completion callback called when job is
            done</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceJobManager.Stop">
            <summary>
            Stops this JobManager object by canceling all jobs and change
            its state to STOPPED. This is a sync stop.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceJobManager.CancelJob(System.Int32,Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Cancels the job identified by the specified 'jobId' and the
            'serviceName' if found.
            </summary>
            <param name="jobId">job identifier of the job to cancel</param>
            <param name="serviceName">service name of the job to cancel
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceJobManager.CancelRegistrationJob(System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceManagerJob},Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary> Cancels all service registration jobs on the service
            with the name of the specified 'serviceName'. Put all canceled
            jobs into the specified 'jobs'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceJobManager.StopImplLocked">
            <summary>
            Removes and cancels all jobs.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.ServiceJobManager.DeleteAndRunNext(System.Int32)">
            <summary>
            Deletes the first job from the queue indexed by the specified
            'queueId' and run the next job.
            </summary>
            <param name="queueId">the queue id to operate on</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.JobHandle">
            <summary>
            This class is used to find job from JobManager.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.PendingRegistrationContext">
            <summary>
            This class keeps the information of pending service registration.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManager.PendingRegistrationContext.#ctor(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.LinkedList{Bloomberglp.Blpapi.Internal.ConnectionContext},Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCallback)">
            <remarks>
            Creates a PendingRegistrationContext object with the specified
            'service', the specified 'connections' the service is
            registered on and the specified 'callback' called when service
            registration is done.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3">
            <summary>
            Provides an implementation on V3 platform to send service registration
            and deregistration requests and get back responses.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.#ctor(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,System.Int32)">
            <summary>
            Creates a ServiceManagerCommV3 with the specified 'platformProxy'
            as underlying communication and the specified 'sessionId' for
            logging.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.sendRequest(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Codec.Encodable.IEncodable,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType,System.UInt32,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.ResponseCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends the request over PlatformProxy. Returns 0 on success and a
            non-zero value otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.registerSubscriptionService(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Sends a service registration request for subscription of the
            specified 'service'. The registration request contains the
            specified 'service', the specified 'identity' and the specified
            'registrationOptions'. The request is sent on the connection
            pointed by 'connectionContext'. When response comes back, the
            specified 'callback' will be called. Returns 0 on success and a
            non-zero value otherwise.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.registerResolveService(System.UInt32,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Sends a resolution service registration request for the specified
            'resolutionServiceId'. The specified 'identity' provides
            permission for the registration. The request is sent on the
            connection pointed by 'connectionContext'. When response comes
            back, the specified 'callback' will be called. Returns 0 on success
            and a non-zero value otherwise.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.handleRegisterSubscriptionResponseCb(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,Bloomberglp.Blpapi.Internal.ConnectionContext,System.String,System.Int32,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback)">
            <summary>
            Handles subscription registration response.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.handleRegisterResolveServiceResponse(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback)">
            <summary>
            Handles resolution service registration response.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.registerRequestService(System.Collections.Generic.IList{System.UInt32},Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Sends a service registration request for request-response operation
            'serviceCodes' in the specified 'service'. The registration request
            contains the specified 'service', the specified 'identity' and the
            specified 'registrationOptionsImpl'. The request is sent on the
            connection pointed by 'connectionContext'. When response comes
            back, the specified 'callback' will be called. Returns 0 on success
            and a non-zero value otherwise.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.handleRegisterRequestServiceCb(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.IList{System.UInt32},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback)">
            <summary>
            Handles request-response operation registration response.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.registerService(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Sends a service registration request for subscription and/or
            request-response operation, depending on the specified 'service'.
            The registration request contains the specified 'service', the
            specified 'identity' and the specified 'registrationOptionsImpl'.
            The request is sent on the connection pointed by
            'connectionContext'. When response comes back, the specified
            'callback' will be called. Returns 0 on success and a non-zero
            value otherwise.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.registerSubscriptionServiceCb(Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes,Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Int32,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Processes subscription registration response.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.toRegisterRequestService(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Int32,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Implementation of sends out request-response operation
            registration.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.handleRequestResultCb(Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes,Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Int32,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Handles the final result of registration.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.deregisterService(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Int32,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Sends a deregistration request for the part of the specified
            'service' using the specified 'identity' for permission. The part
            of the service is identified by the specified 'registrationPart'(
            see also registration parts in ServiceRegistrationOptionImpl). The
            request is sent on the connection pointed by the specified
            'connectionContext'.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.Implementation.ServiceManagerCommV3.deregisterService(System.Collections.Generic.ICollection{System.UInt32},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Sends service deregistration requests for all service codes in the
            specified 'serviceCodes' with the specified 'identity' over the
            connection pointed by the specified 'connectionContext'.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager">
            <summary>
            An interface to open service and register service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.GetService(System.String)">
            <summary>
            Returns the ServiceImpl object for the previously opened
            or registered service specified by 'name'. If the service
            was not previously opened or registered, then returns null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.GetService(Bloomberglp.Blpapi.Internal.ServiceName)">
            <summary>
            Returns the ServiceImpl object for the previously opened
            or registered service specified by 'serviceName'. If the service
            was not previously opened or registered, then returns null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.GetService(System.UInt32)">
            <summary>
            Returns the ServiceImpl object for the previously opened
            or registered service has the specified 'serviceCode'. If the
            service was not previously registered, then returns null.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.GetServiceOrClone(System.String,System.Boolean@)">
            <summary>
            Returns the ServiceImpl object for the previously opened
            service or for the newly cloned service specified by
            <paramref name="serviceName"/>.
            </summary>
            <param name="serviceName">
            A string containing the service name or 'svc_name#svc_id'
            where 'svc_name' is service name and 'svc_id' is service Id
            encoded as string presentation of unsigned int.
            </param>
            <param name="isClone">Ouput param to indicate a cloning.</param>
            <returns>
            If <paramref name="serviceName"/> is a name of the previously
            opened service, returns ServiceImpl object for it.
            Else if 'svc_id' is present and 'svc_name' is a name of the
            previously opened service, creates and returns a clone of that
            service with name <paramref name="serviceName"/> and new service
            Id 'svc_id'.
            Otherwise, returns null.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.OpenService(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback)">
            <summary>
            Downloads service definition for the service with the specified
            'name', and calls 'callback' when opening service completes. If
            opening service fails, callback is called with a DetailedResult
            object containing the error description. On success, the service is
            added to the service map and 'callback' returns a ServiceImpl
            object. Generates an appropriate SERVICE_STATUS event and publishes
            it using the EventPublisher interface. Trying to open an already
            registered service is a failure.
            </summary>
            <param name="name">service name</param>
            <param name="correlationId">CorrelationId object associated with
            events</param>
            <param name="completionCallback">completion callback</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.RegisterService(System.String,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ServiceOperationCompletionCallback)">
            <summary>
            Downloads the service definition and register the service with the
            name of the specified 'name'.  The specified 'providerIdentity'
            provides permission for registration. All service registration
            status messages are attached with the specified 'correlationId'.
            The specified 'registrationOptions' has the options such as group
            ID and service priority. Calls the specified 'callback' when
            service registration is completed. It is possible that 'callback'
            is called within the locking context of this manager.
            </summary>
            <param name="name">service name</param>
            <param name="providerIdentity">identity providing permissions
            </param>
            <param name="correlationId">CorrelationId object associated with
            events</param>
            <param name="registrationOptions">registration options such as
            group ID</param>
            <param name="resultCallback">completion callback</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.SendSubServiceCodeStatus(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate)">
            <summary>
            Sends the sub service code changes for the specified
            'serviceName' service. All applicable activate and deactivate
            sub-service code updates in the specified 'sscUpdate' are cached
            and sent to the backend.
            </summary>
            <param name="serviceName">
            name of the service </param> <param name="sscUpdate">sub-service
            code update to the applied and sent</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.DeregisterService(System.String,Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ClearCallback)">
            <summary>
            Deregisteres the service identified by the specified 'seviceName'.
            The identity in the service registration is reused to verify
            permissions for deregistration. If the service is not
            registered nor in pending registration, returns a non-zero value.
            Returns 0 otherwise. If the service is in pending registration,
            cancels the pending registration and call the specified
            'clearCb'. If the service is registered, sends a
            deregistration request, calls the specified 'clearCb' and
            creates a ServiceDergistered message. All published events on
            topics created on this service will be ignored after this method
            returns.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.SetRegistrationAnnouncementCb(Bloomberglp.Blpapi.Internal.ServiceManagement.Delegates.ConnectionCompletionCallback)">
            <summary>
            Sets the callback called when there is service registration
            completed no matter success or failure on a connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.PartialRegistered(Bloomberglp.Blpapi.Internal.ServiceName,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns true if the service registration for the specified
            'seviceName' on the specified 'ctx' is not done but the subscription
            and/or resolution registration in the service on 'ctx' is done;
            return false otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.PartialRegisteredName(System.UInt32,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns service name if the service registration for the specified
            'serviceId' in the service is done but the whole service
            registration is not done; return null otherwise. Resolution
            requests from partially registered service on the connection should
            be deferred until registration is done.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.Cancel(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Cancels a previously requested open/register service operation
            indexed by the specified 'correlationId'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.CancelRequests(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID})">
            <summary>
            Cancels a set of previously requested open/register service
            operations indexed by the specified 'correlationIds'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.CorrelationCanceler">
            <summary>
            Returns a CorrelationCanceler object to provide the function to
            cancel open/register service operations.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.ConnectionActive(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the connection pointed by the specified
            'connectionContext' is active.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the connection pointed by the specified
            'connectionContext' is down.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.Failover(Bloomberglp.Blpapi.Internal.Interfaces.CompletionCallback)">
            <summary>
            Starts failover for this component and call 'callback' when
            failover for this component is completed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.Stop">
            <summary>
            Stops all operations.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager.GetAllServices(System.UInt32)">
            <summary>
            Get the list of services for the specified service codes, the
            service code be a service code on operation, the default service id
            or any of the resolution service ids.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManagerMessageFactory">
            <summary>
            Provides a factory interface to generate service status messages.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManagerMessageFactory.CreateServiceAvailabilityInfoMessage(Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Internal.ServiceName,System.Collections.Generic.List{System.String})">
            <summary>
            Creates and returns an event containing a service availability
            information message. The message shows that the service with
            the name of the specified 'serviceName' is registered on the
            connections to the specified 'serverAddresses'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback">
            <summary>
            Service registration complete call back.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes">
            <summary>
            ServiceManagerComm result types.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes.SUCCESS">
             <summary>
            service registration success response
             </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes.FAILED_TO_SEND">
            <summary>
            failed to send registration request
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes.REQUEST_FAILED">
            <summary>
            service registration failure response
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes.INVALID_RESPONSE_TYPE">
            <summary>
            invalid registration response type
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes.DECODING_FAILED">
            <summary>
            failed to decode registration response
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm_Type.ResultTypes.PARTIAL_SUCCESS">
            <summary>
            service registration is not done but subscription registration
            is done
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm">
            <summary>
            Provides an interface to send service registration and
            deregistration requests and get back responses.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm.registerService(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl,Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerCommCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Sends a service registration request for subscription and/or
            request-response operation, depending on the specified 'service'.
            The registration request contains the specified 'service', the
            specified 'identity' and the specified 'registrationOptionsImpl'.
            The request is sent on the connection pointed by
            'connectionContext'. When response comes back, the specified
            'callback' will be called. Returns 0 on success and a non-zero
            value otherwise.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm.sendSubServiceCodeStatus(System.UInt32,Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends a sub service code update message on a specific backend
            connection.
            </summary>
            <param name="serviceCode">the service identifier</param>
            <param name="sscUpdate">the sub service code update</param>
            <param name="ctx">
            the connection identifier to be used
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerComm.deregisterService(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Int32,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <remarks>
            Sends a deregistration request for the specified 'service' using
            the specified 'identity' for permission. The request is sent on the
            connection pointed by the specified 'connectionContext'.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerConfig">
            <summary>
            This component maintains the configurable parameters for a
            <see cref="T:Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager"/> instance.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerConfig.#ctor">
            <summary>
            Construct a 'ServiceManagerConfig' with default values for all
            configurable options
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerConfig.ServiceDownloadTimeout">
            <summary>
            Gets or sets 'ServiceDownloadTimeout' value (in milliseconds) used
            by <see cref="T:Bloomberglp.Blpapi.Internal.SchemaMetadataManager.IMetadataManager"/> to determine to the timeout for
            a service schema download request.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceManagement.ServiceManagerConfig.ServiceCheckTimeout">
            <summary>
            Gets or sets 'ServiceCheckTimeout' value (in milliseconds) used by
            <see cref="T:Bloomberglp.Blpapi.Internal.SchemaMetadataManager.IMetadataManager"/> to determine to the timeout for
            a resolve request used to determine the version information for
            the service schema.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl">
            <summary>
            A simply-constrained attribute class to store attributes that
            can be passed during service registration.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.#ctor">
            <summary>
            Constructs a ServiceRegistrationOptionsImpl with well defined
            defaults for various options. Currently the following defaults are
            applied
            <pre>
                groupId                        = null
                priority                       = PRIORITY_HIGH
            </pre>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.#ctor(Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl)">
            <summary>
            Creates a copy of the specified 'other'. Note that all the {@link
            SubServiceCodeEntrySet} are also copied, so changes to the older
            ones will not be noticed to the new ones.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.PartsToRegister">
            <summary>
            Gets or sets he parts of the service to be registered. See
            registration part constants above for additional details.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.GroupId">
            <summary>
            Returns the group ID. At most one of a group of publishers are
            picked for a published topic.
            Sets the group ID for the service to be registered to the
            specified 'groupId'.  If 'groupIdLength > MAX_GROUP_ID_SIZE (=64')
            only the first 'MAX_GROUP_ID_SIZE' chars are considered as Group
            ID.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.ServicePriority">
            <summary>
            Returns the service priority with which service will be (or is)
            registered.
            Set the priority with which a service will be registered to the
            non-negative value specified in priority.  This call is a no-op
            when a negative priority is specified.  Default value is {@link
            PRIORITY_HIGH}.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Register the sub-service code range of the specified ['begin',
            'end'] and the specified 'priority'. The behavior is undefined
            unless 'begin', 'end' and 'priority' are between 0 and 2^24 (2 to
            the power of 24). By default no sub-service code ranges are
            considered to be active.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.activeSubServiceCodeRanges">
            <summary>
            Returns the underlying set that contains all the sub-service code
            ranges.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.removeAllActiveSubServiceCodeRanges">
            <summary>
            Removes all active sub-service code ranges.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.hasActiveSubServiceCodeRanges">
            <summary>
            Returns 'true' if no sub-service code ranges are present otherwise
            'false'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.computeServiceCodeDiff(Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl)">
            <summary>
            Returns the sub service code changes that need to be performed to
            make it the same as the specified 'other'. This method computes the
            difference between the sub service code component of this instance
            and the specified 'other' and return the
            'SubServiceCodeUpdate'. Note that applying the returned
            'SubServiceCodeUpdate' should produce the 'other'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.applyChanges(Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate)">
            <summary>
            Update this object's set of priority-annotated subservice codes by
            adding the new values from the specified
            'sscUpdate.getActiveCodes()', which contains pairs of inclusive
            range endpoints and priorities, and removing all code ranges in the
            specified 'sscUpdate.getInactiveCodes()', which contains inclusive
            code range endpoints.  The behavior of this function is undefined
            unless for each code range '[begin, end]' in either
            'sscUpdate.getActiveCodes()' or 'sscUpdate.getInactiveCodes()', it
            is the case that '0 &lt;= begin &lt;= end &lt; (1 &lt;&lt; 24)',
            and every priority in 'sscUpdate.getActiveCodes()' is non-negative.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.asSubServiceCodeUpdate">
            <summary>
            Return the sub service code entries as updates that can be added.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ServiceRegistrationOptionsImpl.ServiceRegistrationOptionsImplUtil.generateUniqueGroupId">
            <summary>
            Generates an identifer which incorporates information specific
            to the host, the process, and the time this function was
            called. The "uniqueness" of this identifier relies on a number
            of assumptions about host configuration, and there is a low
            probability of random collisions. If this function is called
            simultaneously from different threads in the same process, it
            could return the same value for those multiple calls (i.e. they
            may not be distinguished by timestamp).
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SessionEventManager">
            <summary>
            Manages all events in a session. If an event handler is provided, it maintains
            two async queues, one for subscription events and one for generic events and
            use dispatcher threads to dispatch events to the event handler. If no event
            handler is provided, it maintains a single sync queue and users call the methods
            such as <c>nextEvent</c> to get events one by one.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.EventQueue.add(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>Adds the specified event 'e' at the end of the queue</summary>
            <param name="e">The Event to be added</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.EventQueue.addFirst(Bloomberglp.Blpapi.Internal.SimpleEventImpl)">
            <summary>Adds the specified priority event 'e' at the beginning of the queue</summary>
            <param name="e">the Event to be added</param>
            <returns>0 if merged into the current first event and 1 otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.EventQueue.remove">
            <summary>Removes and get the first pending event from the queue.</summary>
            <returns>An event if it is present and null otherwise.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.EventQueue.appendDataLossEvent(Bloomberglp.Blpapi.Internal.SubscriptionEventImpl)">
            <summary>Appends data loss event</summary>
            <param name="subscriptionEvent">The lost event</param>
            <returns>0 if merged into the previous data loss event and 1 otherwise</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SessionEventManager.DispatcherBasedEventQueue">
            <summary>
            This implements an async event queue using dispatcher thread to dispatch events
            in the queue to the event handler.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DispatcherBasedEventQueue.#ctor(Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher,Bloomberglp.Blpapi.Internal.SessionEventManager.EventProcessor,Bloomberglp.Blpapi.Internal.Infrastructure.Utilities.Logger)">
            <summary>
            Initializes a <c>DispatcherBasedEventQueue</c> object having
            the specified <c>IEventDispatcher</c> for dispatch thread, the
            specified <c>EventProcessor</c> for event handler, and the specified
            <c>logger</c> for logging.
            </summary>
            <param name="dispatcher">The dispatcher to provide thread to get and process event</param>
            <param name="internalHandler">The delegate to process event</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DispatcherBasedEventQueue.add(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            Adds the specified <c>eventObj</c> into the end of the queue.
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DispatcherBasedEventQueue.addFirst(Bloomberglp.Blpapi.Internal.SimpleEventImpl)">
            <summary>
            Adds the specified <c>e</c> into the front of the queue.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DispatcherBasedEventQueue.appendDataLossEvent(Bloomberglp.Blpapi.Internal.SubscriptionEventImpl)">
            <summary>
            Appends the subscription data event as loss into the queue.
            If existing a data loss event at the end of queue, adds the subscription
            data event into the data loss event; otherwise, creats a new
            data loss event and adds into the queue.
            </summary>
            <param name="subscriptionEvent">The subscription data event as loss</param>
            <returns>0 if no new data loss created and a non-zero value otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DispatcherBasedEventQueue.increaseQueueSize">
            <summary>
            Increases queue size by 1.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DispatcherBasedEventQueue.processEventsFromQueue">
            <summary>
            Gets events from the queue and process them until the limit(JOBS_PER_INVOCATION) is
            reached or there are no events anymore.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DispatcherBasedEventQueue.incrementAndCheck(System.Int32)">
            <summary>
            Increases the number of events processed and checks whether reaches the limit.
            </summary>
            <param name="oldValue"></param>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SessionEventManager.DataEventQueue">
            <summary>
            Implements a sync event queue.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DataEventQueue.#ctor">
            <summary>
            Initializes a <c>DataEventQueue</c> object with empty queue.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DataEventQueue.add(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            Adds the specified <c>e</c> into the end of this queue.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DataEventQueue.addFirst(Bloomberglp.Blpapi.Internal.SimpleEventImpl)">
            <summary>
            Adds the specified <c>e</c> into the front of this queue.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DataEventQueue.remove">
            <summary>
            Pops an event from this queue and calls the callbacks in the event.
            The behavior is undefined unless there is at least one event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.DataEventQueue.appendDataLossEvent(Bloomberglp.Blpapi.Internal.SubscriptionEventImpl)">
            <summary>
            Appends the subscription data event as loss into the queue.
            If existing a data loss event at the end of queue, adds the subscription
            data event into the data loss event; otherwise, creats a new
            data loss event and adds into the queue. Assumes this method is called in the single IO thread.
            </summary>
            <param name="subscriptionEvent">The subscription data event as loss</param>
            <returns>0 if no new data loss created and a non-zero value otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.#ctor(Bloomberglp.Blpapi.Internal.SessionImpl.SessionEventHandler,Bloomberglp.Blpapi.Internal.Interfaces.IEventDispatcher,Bloomberglp.Blpapi.Internal.SessionOptionsImpl,Bloomberglp.Blpapi.Internal.SchemaImpl,System.Int32)">
            <summary>
            Initializes a <c>SessionEventManager</c> object. If the specified <c>eventHandler</c>
            is not null, creates an async event queue and uses the specified <c>dispatcher</c>
            to dispatch events; otherwise, creates a sync event queue. The specified <c>options</c>
            provides options about max pending event and watermark. The specified <c>adminSchema</c>
            provides the schema to create slow consuming warning and data loss messages. The specified
            <c>sessionId</c> is for logging.
            </summary>
            <param name="eventHandler"></param>
            <param name="dispatcher"></param>
            <param name="options"></param>
            <param name="adminSchema"></param>
            <param name="sessionId"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.start">
            <summary>
            Starts this event manager. Starts dispatcher if this is an async queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.publishAndStop(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>Publishes the last event and stop accepting any more events.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.stop(Bloomberglp.Blpapi.AbstractSession.StopOption)">
            <summary>
            Stops this event manager. If this is async, stops dispatcher; waits until
            the last event is delivered if the specified <c>stopOption</c> is async.
            </summary>
            <param name="stopOption"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.nextEvent(System.Int64)">
            <summary>
            Gets the next event and call its callbacks. Times out if no events at the interval specified by
            <c>timeoutMillis</c>. If <c>timoutMillis</c> is 0, waits indefinitely.
            Only <c>int.MaxValue</c> timeout is supported. The value greater than
            <c>int.MaxValue</c> is converted into <c>int.MaxValue</c>. Internal events are
            treated as non-exsting events. The behavior is undefined unless this is sync.
            </summary>
            <param name="timeoutMillis"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.tryNextEvent">
            <summary>
            Gets the next event and call its callbacks. If there are no events, returns null.
            Internal events are treated as non-exsting events.
            The behavior is undefined unless this is sync.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.numPendingEvents">
            <summary>
            Returns the number of pending events in this queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.numDroppedEvents">
            <remarks>Returns the number of events dropped between
            SlowConsumerWarning and SlowConsumerWarningCleared.
            This method returns 0 of the Session is not slow.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.numTotalDroppedEvents">
            <summary>
            Returns the total number of dropped events in the life of this session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.genericEventPublisherForced">
            <summary>
            Returns the Force Publisher for generic (non subscription data) events.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.subscriptionEventPublisher">
            <summary>
            Returns Return the Publisher for subscription data events.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.subscriptionEventPublisherForced">
            <summary>
            Returns Return the Force Publisher for subscription status events.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.dispatcher">
            <summar>
            Returns Return the dispatcher used for event delivery.
            Returns null if the Session is running in synchronous mode.
            </summar>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.processEvent(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            The functor called by dispatcher to get and process events.
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.addEventCommon(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            Udpates statistics due to adding event and returns whether the event can
            be added. The event could be dropped if the event queue is full. Adding
            is not done here. Marks slow consumer warning or data loss if applied.
            </summary>
            <param name="eventObj"></param>
            <returns>0 on success and a non-zero value otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.addEventCommonForced(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            Updates statistics due to adding event and returns whether the event can
            be added. The event can be added even if the event queue is full. Adding
            is not done here. Marks slow consumer warning if applied.
            </summary>
            <param name="eventObj"></param>
            <returns>0 on success and a non-zero value otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.enqueueEvent(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            The functor called by sync queue to add events that can be dropped.
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.enqueueEventForced(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            The functor called by sync queue to add events that can not be dropped.
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.dispatchGenericEventForced(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            The functor called by async queue to add events that cannot be dropped.
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.dispatchSubscriptionEvent(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            The functor called by async queue to add subscription events that can be dropped.
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.dispatchSubscriptionEventForced(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            The functor called by async queue to add subscription events that cannot be dropped.
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.markAsSlowConsumerLocked">
            <summary>
            Turns on slow conumer warning and generates an warning event.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.addAdminEvent(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            Forces an admin event, called by slow consumer warning and data loss.
            Assumes lock on "this" is held
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.removeFirstEventFromDefaultQueue">
            <summary>
            Pops an event for synce queue. The hehavior is undefined unless
            there are at least one events and the queue is sync.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.removeEventCommon">
            <summary>
            Updates statistics due to removing an event. Marks slow consumer warning
            cleared if applied.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.invokeEventHandler(Bloomberglp.Blpapi.Internal.Interfaces.EventImpl)">
            <summary>
            Invokes the user-provided event handler.
            </summary>
            <param name="eventObj"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionEventManager.enqueueLastEventLocked">
            <summary>
            Enqueues the last event and updates the flag.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ISessionImpl">
            <author>  Siva Somu (ssomu)
            </author>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SessionImpl.SessionStarted">
            <summary>
            /* usage: dot -Tpdf -O SessionImpl.dot*/
            digraph BLPAPI_SUB {
                rankdir="TB";
                page="8.5,11";
                concentrate=false;
                subgraph cluster_starting {
                     label = "SessionImpl State Diagram";
                     "CLOSED" -> "INPROGRESS" [label="start()"]
                     "INPROGRESS" -> "CANCELLED" [label="stop()"]
                     "INPROGRESS" -> "ESTABLISHED"
                                        [label="SessionStartedMessage"]
                     "INPROGRESS" -> "STOPPED" [label="SessionStartFailed\n
                                                       Controller giving up"]
                     "ESTABLISHED" -> "STOPPED"
                                        [label="SessionTerminatedMessage\n
                                                Controller giving up"]
                     "ESTABLISHED" -> "STOPPING" [label="stop()"]
                     "STOPPING" -> "STOPPED"
                                        [label="SessionTerminatedMessage\n
                                                Controller giving up"]
                     "CANCELLED" -> "STOPPED" [label="SessionStartFailed\n
                                                      Controller giving up"]
                }
            }
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionImpl.sendRequestTemplate(Bloomberglp.Blpapi.Internal.RequestTemplateImpl,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Add the specified 'correlationId' to the list of outstanding
            requests of the specified 'requestTemplateImpl' request template.
            The list of waiting requests contains all requests that are waiting
            for an initial paint for the underlying snapshot subscription. If
            the request template is in cached state and this is a first
            request, asynchronously send a solicited initial paint request for
            the underlying snapshot subscription. Return 0 on success, non-zero
            value otherwise. Behavior is undefined unless the
            'requestTemplateImpl' is a valid non-terminated request template
            with a valid snapshot context.
            </summary>
            <param name="requestTemplateImpl">
            The request template used for sending a request
            </param>
            <param name="correlationId">
            The correlation id used for delivering a response
            </param>
            <exception cref="T:System.InvalidOperationException">
            Throw if request template is in 'Terminated' state
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            Thrown if correlationId is already in use
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionImpl.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
            Create a snapshot service request template with a status
            correlation id specified by 'statusCid' and start an underlying
            snapshot subscription for the specified 'subscriptionString' with
            authorization provided by the optionally specified 'identity'.
            </summary>
            <param name="subscriptionString">
            The subscription string used for creating a request template
            </param>
            <param name="statusCid">
            The correlation id used for delivering of request template status
            updates
            </param>
            <param name="identity">
            The <see cref="T:Bloomberglp.Blpapi.Identity"/> used to authorize access to the data for
            this request template. A value of null indicates authorization is
            not needed.
            </param>
            <returns>
            A created request template
            </returns>
            <exception
            cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            </exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionImpl.FailToStart(System.Boolean,System.String,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ErrorInfo)">
            <summary>
            If the session was in progress, i.e. trying to connect, publishes
            SessionStartupFailure with connection error message. Otherwise, e.g.
            the session is cancelled or stopped, publishes SessionStartupFailure
            without error message. The event is the last event from the session.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionImpl.SendForceRequest(Bloomberglp.Blpapi.Internal.Requests.IResponseHandler,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBufferOutputStream,Bloomberglp.Blpapi.CorrelationID,System.Int64)">
            <summary>
            Forcefully sends a request specified by <paramref name="prolog"/>
            and <paramref name="payload"/>.
            </summary>
            <param name="responseHandler">
            The handler where the response for this request will be received.
            </param>
            <param name="prolog">
            The prolog for the request to be sent.
            </param>
            <param name="payload">
            The main payload for the request to be sent.
            </param>
            <param name="cid">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> pertaining to the request.
            </param>
            <param name="timeoutMs">
            The timeout to use for the request in milliseconds.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionImpl.processRouteChangeErrorComm(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Process the message and return true if this is a route update, or return false otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionImpl.RegisterCorrelationId(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.CorrelationCanceler)">
            <summary>
            Adds a <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> and associated
            <see cref="T:Bloomberglp.Blpapi.Internal.CorrelationCanceler"/> to the registry.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            Thrown if correlationId is already in use.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionImpl.isCorrelationIdInRegistry(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Used in tests only.
            </summary>
            <returns>
            True if <paramref name="cid=="/> is in correlation registry.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SessionOptionsImpl">
             <summary>
             The implementation class of SessionOptions.
             To configure the compatibility of authorization to version 3.3,
             an application configuration file can be used to provide the option
             value isCompat33x(). Such an example is as follows.
             <![CDATA[
            
             <?xml version="1.0" encoding="utf-8" ?>
             <configuration>
                 <configSections>
                     <section name="bloomberglp.blpapi"
                              type="System.Configuration.NameValueSectionHandler"/>
                 </configSections>
                 <bloomberglp.blpapi>
                     <add key="compat33x" value="true"/>
                </bloomberglp.blpapi>
             </configuration>
            
              ]]>
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionStartedStrategy.isAlreadyInCluster(Bloomberglp.Blpapi.Internal.ConnectionContext.PlatformId)">
            <summary>
              Determine if the provided <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext.PlatformId"/> is part of a
              cluster
            </summary>
            <param name="pid">
              The <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext.PlatformId"/> to search for in the consideration
              list
            </param>
            <returns>
              True if the 'pid' belongs to a cluster (is in a consideration
              set with more than one element)
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SessionStartedStrategy.getPlatformConnectionState(Bloomberglp.Blpapi.Internal.SessionStartedStrategy.PlatformConnectionState@,Bloomberglp.Blpapi.Internal.ConnectionContext.PlatformId)">
            <summary>
            Load the connection state of the platform identified by the
            specified 'platformId' into the specified 'state'.  Return true if
            the state is retrieved successfully and false otherwise.
            Note that this function is only intended for testing.
            </summary>
            <param name="state">The current state of the platform</param>
            <param name="platformId">
            The id of the platform for which to get the state
            </param>
            <resurns>
            True is the platform can be found and false otherwise
            </resurns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SimpleMessageIterator">
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SnapshotContextState">
            <summary>
            State of the endpoint cache for this subscription.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SnapshotContextState.Pending">
            <summary>
            The initial context state, waiting to connect.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SnapshotContextState.Cached">
            <summary>
            The closest endpoint will serve requests from a hot cache
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SnapshotContextState.Terminated">
            <summary>
            The 'SnapshotContext' is terminated
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SnapshotContextReturnCode">
            <summary>
            Return code for call to
            <see cref="M:Bloomberglp.Blpapi.Internal.SnapshotContext.AddWaitingRequest(Bloomberglp.Blpapi.CorrelationID)"/> that is used to
            communicate success/failure and the state of the context.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SnapshotContextReturnCode.Success">
            <summary>
            Completed successfully
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SnapshotContextReturnCode.AddedFirstRequestToCached">
            <summary>
            'addWaitingRequest' has added the first waiting request to a
            snapshot in the 'Cached' state.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SnapshotContextReturnCode.SnapshotIsTerminated">
            <summary>
            Snapshot context is in the 'Terminated' state.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SnapshotContext">
             <summary>
             This component implements thread safe storage for the snapshot context.
             It is used for storing all required information for processing user
             requests and incoming subscription data corresponding to a snapshot
             request template, including the state of the request template, and the
             outstanding requests waiting for data.
            
             Requests are represented by their <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>, and the
             <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> is used to respond to each request.
            
             Performance notice: Most methods of this class return a copy of a list
             of <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> objects instead of a reference. There
             are two reasons for this implementation: thread-safety and the
             assumption that these lists are small.
             </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SnapshotContext.SnapshotContextCorrelationCanceler">
            <summary>
            Correlation canceler for requests inside of the snapshot context
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.#ctor(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.CorrelationRegistry)">
            <summary>
            Create a SnapshotContext in 'State.Pending' state with the
            specified 'statusCid' and 'correlationRegistry'.
            </summary>
            <param name="statusCid"></param>
            <param name="correlationRegistry"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.RemoveSubmittedRequests(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID})">
            <summary>
            Remove the correlation ids of requests that the user has canceled.
            </summary>
            <param name="cids">List of 'CorrelationID' to remove</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.AddWaitingRequest(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Add a request correlation id to a list of 'waiting' requests if
            snapshot is not in 'Terminated' state.
            Returns 'ReturnCode.SnapshotIsTerminated' without adding a
            request if the current state is 'Terminated'.
            Returns 'ReturnCode.AddedFirstRequestToCached' if this is the
            first request in a list and current state is 'Cached',
            returns 'Success' otherwise.
            </summary>
            <param name="cid">'CorrelationID' to add to waiting state</param>
            <returns>'ReturnCode' describing state of snapshot context and
            whether the 'cid' was added.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.TryTransitionToCachedState">
            <summary>
            Transitions to 'Cached' state if current state is 'Pending', does
            nothing otherwise.
            </summary>
            <returns>The previous state of the snapshot context</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.TryTransitionToPendingState">
            <summary>
            Transitions to 'Pending' state if current state is 'Cached', does
            nothing otherwise.
            </summary>
            <returns>The previous state of the snapshot context</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.MoveWaitingRequestsToReceivingState">
            <summary>
            Moves all requests from the 'waiting' list to the 'receiving' list.
            </summary>
            <returns>List of all (old and new) 'receiving' requests</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.ClearReceivingRequests">
            <summary>
            Remove all receiving requests and clean the correlation registry.
            </summary>
            <returns>List of previously receiving requests</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.Terminate">
            <summary>
            Change the context state to 'Terminated'. Removes all
            outstanding requests and their correlation cancelers.
            </summary>
            <returns>List of all (receiving and waiting) outstanding requests
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.CancelWhenNoRequests">
            <summary>
            Sets the 'cancelWhenNoRequests' flag to mark that user is not going
            to use this snapshot service. When all outstanding requests are
            responded, the underlying subscription should be
            canceled. Returns true if there are no outstanding requests and the
            underlying subscription can be canceled immediately and false, 
            otherwise.
            </summary>
            <returns>Whether the underlying subscription can be canceled
            immediately</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.GetReceivingRequests">
            <summary>
            </summary>
            <returns>all receiving requests in the snapshot context</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.NeedToCancel">
            <summary>
            Returns true if an underlying subscription need to be canceled.
            This happens when the 'cancelWhenNoRequests' flag set to true and
            there are no more waiting or receiving requests.
            </summary>
            <returns>Whether the underlying subscription needs to be canceled.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.State">
            <summary>
            </summary>
            <returns>The current context state</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.StatusCid">
            <summary>
            </summary>
            <returns>The status 'CorrelationID' for this snapshot context
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotContext.RequestCanceler">
            <summary>
            Returns the 'CorrelationCanceler' used for removing correlation ids
            of submitted requests. This canceler should be called if the user
            cancels a request or a request fails for some reason.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SnapshotResponseEventIterator.IsValid">
            <summary>
            Indicates whether the iterator points to valid location
            </summary>
            <value>
              True if the iterator currently points to a tick and false otherwise
            </value>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotResponseEventIterator.Next">
            <summary>
            Advances to the next tick in the event.
            </summary>
            <returns>
            True if the iterator could be advanced to the next tick and false
            otherwise
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SnapshotResponseEventIterator.Value">
            <summary>
            Returns the tick to which the iterator points.
            </summary>
            <returns>
            The current tick if iterator is valid, otherwise null
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.StreamStatus">
            <summary>
            Represents last message(SubscriptionStreamsActivated or
            SubscriptionStreamsDeactivated) delivered for a dataset.
            </summary>
            <remarks>
            Snapshots do not use these messages and hence are explicitly marked.
            All new datasets are initialized with <see cref="F:Bloomberglp.Blpapi.Internal.StreamStatus.Activated"/> or
            <see cref="F:Bloomberglp.Blpapi.Internal.StreamStatus.Snapshot"/> depending upon if they are Snapshot
            subscriptions or not.
            </remarks>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.StreamStatus.Activated">
            <summary>
            Last message sent was SubscriptionStreamsActivated.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.StreamStatus.Deactivated">
            <summary>
            Last message sent was SubscriptionStreamsDeactivated.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.StreamStatus.Snapshot">
            <summary>
            Specifies that <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> belongs to a
            <see cref="F:Bloomberglp.Blpapi.Internal.StreamStatus.Snapshot"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriberManager">
            <summary>
            This class manages subscription requests from platform.
            </summary>
            <remarks>
            More specifically it is responsible to handle all subscription,
            resubscription and unsubscription request from the platform which.
            A recap request may be generated by a subscription request(tick buffer
            cache cannot replay and topic is already created), a resubscription
            request or topic creation.These requests will be routed to this
            component from ProviderSessionImpl.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.#ctor">
            <summary>
            For testing
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.#ctor(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.TopicImplRegistry,Bloomberglp.Blpapi.Internal.DeferredRequestManager,Bloomberglp.Blpapi.Internal.TickBufferCache,System.Int32)">
            <summary>
            Creates a SubscriberManager object.
            </summary>
            <param name="platformProxy">used to send back responses</param>
            <param name="eventPublisher">used to publish events containing
            subscription requests.</param>
            <param name="topicRegistry">used to keep all created TopicImpl
            objects</param>
            <param name="deferredRequestManager">used to defer subscription
            request for partially registered service</param>
            <param name="tickBufferCache">used to cache subscription data to
            play back</param>
            <param name="sessionId">for logging</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.HandleSubscriptionRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles a subscription request in the specified 'prolog' and
            'payload' on the connection pointed by the specified 'connection'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.HandleUnsubscriptionRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles a unsubscription request in the specified 'prolog' and
            'payload' on the connection pointed by the specified 'connection'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.HandleResubscriptionRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Handles a resubscription request in the specified 'prolog' and
            'payload' on the connection pointed by the specified 'connection'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.Publish(Bloomberglp.Blpapi.Internal.Events.WritableSubscriptionEvent)">
            <summary>
            Publishes <paramref name="pevent"/> to all platforms interested in
            this event.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.OnTopicCreated(Bloomberglp.Blpapi.Internal.TopicImpl)">
            <summary>
            Notifies topic creation for the specified 'topic'. Publishes
            topic activated status event and sends out topic available message
            if necessary.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.ConnectionUp(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the connection pointed by the specified 'ctx' is up.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.ConnectionDown(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notifies the connection pointed by the specified 'ctx' is down.
            Unsubscribes all topics on the connection.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.RemoveSubscriptions(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Removes all subscriptions on the specified 'service'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.DeleteTopics(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.TopicImpl})">
             <summary>
             Removes each from 'topics' from the created topics for the
             service; delivers 'TopicDeactivated' messages for each topic that
             was subscribed or request response contribution; removes the topics
             that are currently not subscribed from registry;  and removes any
             pending recap requests on the topics.
             </summary>
             <remarks>
             Note that it is fine to remove the recap contexts, if the
             application creates the topics again, new recaps will be requested.
            
             Note that subscriptions are not affected by this function.
             Subscriptions are only affected by Subscription/Unsubscription
             requests.
            
             Request-response Contribution never gets subscription requests, but
             it is implied that it's always subscribed.
            
             Pub-sub contribution topics behave the same as regular topics.
            
             The behavior is undefined unless none of the topics in 'topics' are
             control topics and the creation count of every topic in 'topics' is
             0.
             </remarks>
             <param name="topics">
             Topics that are being deleted.
             </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.NumSubscribedUserTopics">
            <summary>
            Returns the number of subscribed topics
            not including control topics
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.NumSubscriberConnections">
            <summary>
            Returns the number of connections having subscriptions
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.NumActiveTopicsPerConnection(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns the number of active topics on the specified 'ctx'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.NumCreatedTopics(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Returns the number of created topics on the specified 'service'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.HasTopicSubscriptionOverConnection(Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int64)">
            <summary>
            Returns true if there are subscriptions on the topic indexed
            by the specified 'topicId' on the specified 'ctx'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.HasPendingRecap(Bloomberglp.Blpapi.CorrelationID,System.Int64,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns whether there is a pending recap request associated with
            the specified 'cid' on the topic indexed by the specified 'topicId'
            over the connection pointed by the specified 'ctx'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.HandleTopicSubscription(Bloomberglp.Blpapi.Internal.TopicImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int32,System.Int64,System.Boolean)">
            <remarks>/// handle subscription request for user topics
            1. sendSubscriptionResponse
            2. If first subscriber to this topic
              - then generate TopicSubscribedEvent.
              - If this topic was previously created, send TOPIC_ACTIVATED
            3. If sequence number specified, try to get payload from tick
               buffer
            4. If failed to get payload as user for recap and send it as
               un-solicited recap.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.HandleControlTopicSubscription(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.TopicImpl,Bloomberglp.Blpapi.Internal.TopicString.Normalized,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int64,System.Boolean)">
            <remarks>
            handle subscription request for topic publishing topics
            1. sendSubscriptionResponse
            2. generate AvailableTopicListEvent event.
            3. Add to servicecontext as active subscriber to this service
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.OnUnsubscriptionRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.UnsubscriptionRequest,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int64)">
            <summary>
            Processes an unsubscription in the specified 'request' on the
            connection pointed by the specified 'connection' with the specified
            'contextId'. Changes topic status, generates topic status events
            and sends unsubscription responses.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.HandleUnsubscriptionRequest_unlock(Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int64,Bloomberglp.Blpapi.Internal.SimpleEventImpl)">
            <summary>
            Processes an unsubscription on the topic pointed by the specified
            'topicId' on the specified 'ctx'. Changes topic status. Adds topic
            status message into the specified 'event' if 'event is not null;
            otherwise, generates and publishes an event containing the message.
            Assumes calling within the locking context.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.OnResubscriptionRequest(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResubscriptionRequest,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Int64)">
            <summary>
            Handles a resubscription request in the specified 'request' on the
            connection pointed by the specified 'connection' with the specified
            'contextId'. Sends back resubscription response. Converts the
            resubscription into a recap request and generates an event
            containing the recap request if the topic is not allocated.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.RequestUserRecap(Bloomberglp.Blpapi.Internal.TopicImpl,Bloomberglp.Blpapi.Internal.ConnectionContext,System.Boolean)">
            <summary>
            Adds a recap request into the pending list and generates an event
            containing recap request for the specified 'topic' on the specified
            'ctx'. The specified 'isSolicited' tells whether requested by
            the end such as resubscription.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.ProcessRecapMessages(Bloomberglp.Blpapi.Internal.Events.WritableSubscriptionEvent)">
            <summary>
            Validate solicited recap messages in <paramref name="pevent"/> and
            extract the recap context.
            <para>
            Removes the recap contexts corresponding to the
            <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> in <paramref name="pevent"/> from
            <see cref="F:Bloomberglp.Blpapi.Internal.SubscriberManager.pendingRecapRequests"/> and returns them.
            </para>.
            </summary>
            <param name="pevent">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Events.WritableSubscriptionEvent"/> to pull
            <see cref="T:Bloomberglp.Blpapi.Internal.SubscriberManager.RecapContext"/> from.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown when using invalid/duplicate correlation IDs during the
            creation of <paramref name="pevent"/>.
            </exception>
            <returns>A list of recaps to be published.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.ActivateTopic(Bloomberglp.Blpapi.Internal.TopicImpl)">
            <summary>
            Activates the topic and returns TopicActivated message. If the topic is
            currently already activated, a null message is returned.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.DeactivateTopic(Bloomberglp.Blpapi.Internal.TopicImpl)">
            <summary>
            De-activates the topic and returns TopicDeactivated message. If the
            topic is currently not activated, a null message is returned.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriberManager.ServiceSubscriptionContext">
            <summary>
            This class stores all subscriptions on a service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriberManager.ServiceSubscriptionContext.#ctor">
            <summary>
            Creates a per-service subscription context
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriberManager.RecapContext">
            <summary>
            This class stores all information of a recap request.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator">
            <summary>
            This class provides an implementation of message iterator over a
            <c>SubscriptionDataEventImpl</c> object. The iteration decodes
            subscription data and creates subscription data messages.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.#ctor(System.Boolean,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext,Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            Creates an instance of <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator"/> using
            the specified parameters. At construction, the iterator points to
            the first tick in the event, if such a tick exists. If the event
            contains no ticks, then <see cref="P:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.IsValid"/> returns false for
            the newly created iterator.
            </summary>
            <param name="forSecureLog">
            whether the iterator is for secure logging, not for client access
            </param>
            <param name="payload">
            the payload representing the encoded subscription data event
            </param>
            <param name="ctx"></param>
            <param name="subscriptionRegistry">
            registry used to map stream ids to correlation ids
            </param>
            <param name="foldCorrelators">
            whether to deliver a single tick with multiple correlation ids
            instead of multiple ticks each with a single correlation id
            (carries the same semantics as session option
            <see cref="P:Bloomberglp.Blpapi.SessionOptions.AllowMultipleCorrelatorsPerMsg"/>
            </param>
            <param name="isAdminData">
            whether this tick is expected to conform to the admin schema
            </param>
            <param name="timeReceived"></param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.IsValid">
            <summary>
            Indicates if the iterator points to valid location
            </summary>
            <value>true if the iterator currently points to a tick</value>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.Next">
            <summary>
            Moves to the next subscription data message and returns true if
            there is the next and false otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.Value">
            <summary>
            Returns the current message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.advanceToNextTick">
            <summary>
            Decodes the current tick message and moves to the next one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.processTick">
            <summary>
            Decodes the current tick message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.popNextActiveSubscriptionEntry">
            <summary>
            Pops the next data context for the current stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.peekSubscriptionEntry">
            <summary>
            Returns the first remaining data context for the current tick
            messge and null if not existing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataIterator.nextCorrelator">
            <summary>
            Returns <c>true</c> if there exists the next correlation ID
            for the current stream and creates a message for it; returns false
            otherwise.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl">
            <summary>
            Provides event implementation of showing data loss information.
            </summary>
            <remarks>
            This class implements an event showing data loss due to full event
            queue. It takes subscription data and iterates it to get stream IDs.
            It uses the <c>SubscriptionTickDeliveryInfoRegistry</c> object to find
            subscription based on stream IDs and count how many ticks are lost
            for each subscription. The continuous lost data are put together into
            one <c>SubscriptionDataLossEventImpl</c> object.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.#ctor(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry,Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.SnapshotFunc,System.Boolean)">
             <summary> Initializes a <c>SubscriptionDataLossEventImpl</c> object.
             </summary>
             <remarks>This objects's <c>SubscriptionTickDeliveryInfoRegistry</c>
             object is used to map stream IDs
             to subscriptions from appended data later, which is either the
             specified <c>subscriptionRegistry</c>, or the value returned by the
             specified <c>snapshotFunc</c> if provided and called by
             <c>InvokeAccessCallbacks</c>. The method <c>InvokeAccessCallbacks</c> is
             usually called when this event is popped up from event queue.
             If the specified <c>foldCorrelators</c> is true, a data
             loss message can have multiple correlators to avoid duplicate
             messages for the same stream.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.IsValid">
            <summary>
            Gets <c>true</c> always.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.iterator">
            <summary>
            Creates and returns a <c>IMessageIterator</c> object for
            iterating all messages in this event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.iteratorForSecureLog">
            <summary>
            Creates and returns a <c>IMessageIterator</c> object for
            iterating all messages in this event for secure logging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.appendData(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionDataMsgIterator,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Appends lost subscription data iterated by the specified <c>tickIterator</c>.
            </summary>
            <param name="tickIterator"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.Type">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.InvokeAccessCallbacks">
            <summary>
            Calls the snapshot functor if provided. This is ususally called
            when this event is popped up from the event queue.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.getTickDropCount(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId)">
            <summary>
            Gets the count of dropped ticks for the specified <c>streamId</c>.
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator">
            <summary>
            This class provides an implementation of message iterator over data loss in a
            <c>SubscriptionDataLossEventImpl</c> object. The iteration finds stream IDs
            to count how many lost for each subscription.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.#ctor(System.String,Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry,System.Boolean,System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId,System.Int32},System.DateTime)">
            <summary>
            Initializes a <c>SubscriptionDataLossEventIterator</c> object for
            iterating data loss in the specified <c>tickDropCount</c>.
            </summary>
            <remarks> <c>tickDropCount</c> has mapping from stream IDs to counts.
            The specified <c>dataContextRegistry</c> used to find the <c>CorrelationID</c>
            object for each stream ID. The specified <c>foldCorrelators</c> is true,
            a data loss message can have multiple <c>CorrelationID</c> objects to
            avoid duplicate messages for the same stream ID. The specified <c>id</c>
            appears in data loss messages to privide identification of data loss messages.
            </remarks>
            <param name="id"></param>
            <param name="dataContextRegistry"></param>
            <param name="foldCorrelators"></param>
            <param name="tickDropCount"></param>
            <param name="timeReceived">the time when this event is created</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.Next">
            <summary>
            Moves to the next data loss message and returns true if
            there is the next and false otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.IsValid">
            <summary>
            Returns whether pointing to valid message.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.Value">
            <summary>
            Returns the current message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.nextCorrelator">
            <summary>
            Returns <c>true</c> if there exists the next correlation ID
            for the current stream and creates a message for it; returns false
            otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.popNextActiveSubscriptionEntry">
            <summary>
            Pops the next data context for the current stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.advanceToNextTick">
            <summary>
            Moves to the next stream ID and get all data contexts for it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.processTick">
            <summary>
            Gets all data contexts for the current stream ID and creates
            a data loss message for the first data context or all data contexts
            if multiple correlation IDs are allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionDataLossEventImpl.SubscriptionDataLossEventIterator.peekSubscriptionEntry">
            <summary>
            Returns the first data context and null if not existing.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionFailover">
            <summary>
            The 'controller' (in the MVC sense), which updates the
            service-connection mapping ('ServiceConnectionView'.) This component
            reacts to connection downs and service downs (route downs) and
            triggers failover for service codes.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionFailover.PendingServiceFailovers">
            <summary>
            Return the set of services pending to be failed over. Exposed for
            testing.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionFailover.Check(System.UInt32)">
            <summary>
            Check and trigger failover for the service with the specified
            'serviceCode'.
            </summary>
            <param name="serviceCode">The service code to check.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionFailover.CheckAllPending">
            <summary>
            Check and trigger failover for all services that are currently
            pending.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionFailover.CheckPending(System.UInt32)">
            <summary>
            Check and trigger failovere for the service with the specified
            serviceCode only if there's a pending failover for that service.
            </summary>
            <param name="serviceCode">The service code to check.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionFailover.RemoveConnection(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Notify this object that the specified connection is no longer
            available.
            This will trigger failover for legacy subscriptions.
            </summary>
            <param name="ctx">
            The connection that is no longer available.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionFailover.FailoverIfPossible(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Select a new primary connection for the specified
            <paramref name="service"/> and initiate failover for subscriptions
            to the service. If no such connection exists, defer the failvoer
            until a ROUTE_UP is received or a new connection comes up.
            </summary>
            <param name="service">
            The service in need of a new primary connection.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionFailover.DeliverServiceNotification(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.IEnumerable{System.UInt32},System.Boolean)">
            <summary>
            Publishes a ServiceUp/Down event for the given service and service
            codes.
            </summary>
            <param name="service">The service whose status has changed.</param>
            <param name="serviceCodes">
            The service codes whose status has changed.
            </param>
            <param name="isDown">Indicates if the service has gone down.</param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionInfo.IsSubscriptionManagementSubscription">
            <summary>
            Returns true if the subscription protocol is
            <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionInfo.Protocol.e_subscriptionmanagement"/>,
            false otherwise.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionInfo.TerminateOnFailover">
            <summary>
            Specifies whether to terminate the subscription or not during
            failover.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionInfo.isSnapshotSubscription">
            <returns>
            True if this is a snapshot subscription. Otherwise false.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionInfo.SnapshotContext">
            <returns>
            Snapshot context for a snapshot subscription.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionInfo.addToCloseOnRecapList(Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo})">
             <summary>
             Adds datasets specified by the 'dataSets' parameters to the list of
             datasets that should be closed when a recap is received from the
             connection specified by the 'ctx'.
             </summary>
            
             <param name="ctx"></param>
             <param name="dataSets"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionInfo.clearCloseOnRecapList(Bloomberglp.Blpapi.Internal.ConnectionContext)">
             <summary>
             Clear the list of datasets that should be closed when a recap is
             received from the connection specified by the 'ctx'.
             </summary>
            
             <param name="ctx"></param>
             <returns>
             prior content of the list or null if there is no prior content
             </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults">
            <summary>
            A collection of <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext"/> buckets and supporting
            collections. There are three buckets:
            <see cref="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.DataSetsToOpenPerSubInfo"/> represents good results,
            <see cref="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.DataSetsToRerouteWithOptionalConnectionElimination"/>
            represents recoverable errors that can be rerouted with or without
            connection elimination and,
            <see cref="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.DataSetsToRerouteAfterDomainElimination"/> represents
            recoverable errors that can be rerouted after domain elimination.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.ConnectionToEliminate">
            <summary>
            <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> to eliminate before sending the
            reroute.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.DataSetsToRerouteWithOptionalConnectionElimination">
            <summary>
            DataSets that can be rerouted. These are the received route
            results which had recoverable errors (e.g. IO_ERROR). A reroute
            may require elimination of <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/>. The
            <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> to be eliminated is represented by
            <see cref="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.ConnectionToEliminate"/>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.DataSetsToRerouteAfterDomainElimination">
            <summary>
            DataSets that can be rerouted. These are the received route
            results which had recoverable errors. A domain or cluster
            elimination is required before reroute because there is no route
            in the cluster.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.DataSetsToOpenPerSubInfo">
            <summary>
            DataSets that are good to open.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults.DataSetsToReplacePerDataSets">
            <summary>
            DataSets that needs to be replaced.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetRegistry.AddDataSet(Bloomberglp.Blpapi.Internal.DataSetInfo,Bloomberglp.Blpapi.Internal.SubscriptionInfo)">
            <summary>
            Add the dataset specified by the 'dataSet' that belongs to the
            subscription specified by the 'subInfo' to the list of datasets
            for the streamId of this dataset.
            If streamId is not unknown, add the dataset to the list of
            datasets for the streamHandle of this dataset.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetRegistry.RemoveDataSet(Bloomberglp.Blpapi.Internal.DataSetInfo,Bloomberglp.Blpapi.Internal.SubscriptionInfo)">
            <summary>
            Remove the dataset specified by the 'dataSet' that belongs to
            the subscription specified by the 'subInfo' from the list of
            datasets for the streamId of this dataset.
            If streamId is not unknown, remove the dataset from the list of
            datasets for the streamHandle of this dataset.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetRegistry.RemoveDataSets(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo},Bloomberglp.Blpapi.Internal.SubscriptionInfo)">
            <summary>
            The same as calling <see cref="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetRegistry.RemoveDataSet(Bloomberglp.Blpapi.Internal.DataSetInfo,Bloomberglp.Blpapi.Internal.SubscriptionInfo)"/> for each
            dataset in the 'dataSetsToRemove' list and the subscription
            specified by the 'subInfo'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Handlers.AnonymousClassCorrelationCanceler">
            <summary>
            Wrapper implementing <see cref="T:Bloomberglp.Blpapi.Internal.CorrelationCanceler"/> to make
            unsubscriptions.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Handlers.AnonymousClassCorrelationCanceler.CancelWhileSubscriptionManagerIsAlreadyLocked(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            This is a dirty hack. Look at the commit message for a full
            explanation- RDSIAPISDK-3420, PR #536.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Handlers.AnonymousClassResponseHandlerRecap">
            <summary>
            Wrapper implementing <see cref="T:Bloomberglp.Blpapi.Internal.Requests.IResponseHandler"/>
            to handle Recap response.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Handlers.ISubscriptionManagerPrivateMethods.CancelSubscriptionsWhileSubscriptionManagerIsAlreadyLocked(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            This is a dirty hack. Look at the commit message for a full
            explanation- RDSIAPISDK-3420, PR #536.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.IdentityUserOptionPair">
            <summary>
            Combines <see cref="T:Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl"/> and request label string as a
            hashmap key.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.PendingRequest.RemoveSubscription(Bloomberglp.Blpapi.Internal.SubscriptionInfo)">
            <summary>
            Remove <paramref name="subInfo"/> from ResolveAndRoute/Route requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.PendingRequest.IsEmpty">
            <summary>
            Returns true if there are no ResolveAndRoute requests and no Route
            requests; false otherwise.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ReceivedData.Payload">
            <summary>
            Received data.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ReceivedData.ConnectionContext">
            <summary>
            Where is data received from.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ReceivedData.Timestamp">
            <summary>
            When is data received.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.RoutingContext`1.OnAllReferencesExhausted">
            <summary>
            Calls release on any handles this shared context may have.
            <para>
            The handles will be present for all subscriptions excepts for
            those made for the cluster service. This is because a connection
            has been determined for it at the start and it has no need for the
            endpoint selector.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SharedOpenContext.OnAllReferencesExhausted">
            <summary>
            Calls release on any handle this shared context may have.
            <para>
            The handle will be present for all subscriptions excepts for
            those made for the cluster service. This is because a connection
            has been determined for it at the start and it has no need for the
            endpoint selector.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder">
            <summary>
            An event wrapper that holds a List of SubscriptionStatus and
            SnapshotStatus messages and AccessCallbacks.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder.subscriptionEvent">
            <summary>
            The event containing messages for subscription status updates.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder.snapshotEvent">
            <summary>
            The event containing messages for snapshot status updates.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder.AppendMessage(Bloomberglp.Blpapi.Internal.MessageImpl,System.Boolean)">
            <summary>
            Appends the message to the Subscription event or the Snapshot
            event depending on whether or not it pertains to a snapshot.
            </summary>
            <param name="message">The message to add to the event.</param>
            <param name="isSnapshot">
            Specifies if the provided message is a snapshot update or not.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder.AppendAccessCallback(Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback)">
            <summary>
            Appends the callback to this status event holder.
            </summary>
            <param name="callback">The callback that will be appended.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder.AppendAccessCallbacks(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback})">
            <summary>
            Appends the callbacks to this status event holder.
            </summary>
            <param name="callbacks">The callbacks that will be appended.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder.Publish(Bloomberglp.Blpapi.Internal.EventPublisher)">
            <summary>
            Publishes the events held in this object.
            </summary>
            <param name="publisher">
            The publisher where the events will be published.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager">
            <summary>This class manages all subscriptions in a session.
            </summary>
            <remarks> It can send subscription requests to PlatformProxy and decode
             responses.
             It can creates event for subscription data and parse subscription
             status message. It also can resubscribe and cancel existing
             subscriptions. When session fails over to another connection, it can
             reestablish existing subscriptions.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.#ctor(Bloomberglp.Blpapi.Internal.SessionOptionsImpl,Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager,Bloomberglp.Blpapi.Internal.Requests.IRequestProvider,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView,Bloomberglp.Blpapi.Internal.PointOfPresenceIdList,Bloomberglp.Blpapi.Internal.PointOfPresenceIdMap,Bloomberglp.Blpapi.Internal.RoutingDomainManagement.IRoutingDomainManager,Bloomberglp.Blpapi.Internal.Bundling.IBundler,Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetRegistry,Bloomberglp.Blpapi.Internal.IServiceAvailabilityMap,System.Int32)">
            <summary>Initializes a <c>SubscriptionManager</c> object.
            </summary>
             <param name="sessionOptions">Options about subscription such as
             'allowMultipleCorrelatorsPerMsg', 'defaultSubscriptionService'
             and 'defaultTopicPrefix'</param>
             <param name="adminSchema">The schema for "SubscriptionStatus"
             events</param>
             <param name="adminPublisher">The event publisher that publishes
             "SubscriptionStatus" events</param>
             <param name="responsePublisher">The event publisher that publishes
             "Response" events for snapshot subscriptions</param>
             <param name="dataPublisher">The event publisher that publishes
             "SubscriptionData" events
             </param>
             <param name="serviceManager">The manager to get or open
             subscription service</param>
             <param name="requestProvider">The object that is used to send
             out (re/un)subscription requests</param>
            <param name="platformProxy">The platform proxy.</param>
            <param name="serviceConnectionView"></param>
            <param name="activePopIdList"></param>
            <param name="activePopIdCtxMap"></param>
            <param name="routingDomainManager"></param>
            <param name="bundler"></param>
            <param name="endpointSelector"></param>
            <param name="dataSetRegistry"></param>
            <param name="serviceAvailabilityMap">
            Used to determine service availability.
            </param>
            <param name="sessionId">ID for logging</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.#ctor(Bloomberglp.Blpapi.Internal.SessionOptionsImpl,Bloomberglp.Blpapi.Internal.SchemaImpl,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager,Bloomberglp.Blpapi.Internal.Requests.IRequestProvider,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy,Bloomberglp.Blpapi.Internal.Interfaces.IServiceConnectionView,Bloomberglp.Blpapi.Internal.PointOfPresenceIdList,Bloomberglp.Blpapi.Internal.PointOfPresenceIdMap,Bloomberglp.Blpapi.Internal.RoutingDomainManagement.IRoutingDomainManager,Bloomberglp.Blpapi.Internal.Bundling.IBundler,Bloomberglp.Blpapi.Internal.Routing.IEndpointSelector,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetRegistry,Bloomberglp.Blpapi.Internal.IServiceAvailabilityMap,System.Int32,System.Boolean)">
            <summary>Initializes a <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager"/> object.
            </summary>
            <param name="sessionOptions">Options about subscription such as
                'allowMultipleCorrelatorsPerMsg', 'defaultSubscriptionService'
                and 'defaultTopicPrefix'</param>
            <param name="adminSchema">The schema for "SubscriptionStatus"
                events</param>
            <param name="adminPublisher">The event publisher that publishes
                "SubscriptionStatus" events</param>
            <param name="responsePublisher">The event publisher that publishes
                "Response" events for snapshot subscriptions</param>
            <param name="dataPublisher">The event publisher that publishes
                "SubscriptionData" events
            </param>
            <param name="serviceManager">The manager to get or open
                subscription service</param>
            <param name="requestProvider">The object that is used to send
                out (re/un)subscription requests</param>
            <param name="platformProxy"></param>
            <param name="serviceConnectionView"></param>
            <param name="activePopIdList"></param>
            <param name="activePopIdCtxMap"></param>
            <param name="routingDomainManager"></param>
            <param name="bundler"></param>
            <param name="endpointSelector"></param>
            <param name="dataSetRegistry"></param>
            <param name="serviceAvailabilityMap">
            Used to determine service availability.
            </param>
            <param name="sessionId"></param>
            <param name="isClusterService"></param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.IsStopped">
            <summary>
            True if <see cref="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.Stop"/> is called, false otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SubscriptionRegistry">
            <summary>
            Returns subscription registry mapping stream IDs to data context.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SubscriptionCorrelation">
            <summary>
            Returns subscription registry mapping correlation ID to
            SubscriptionHandle objects.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.GetAllSubscriptions(System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubscriptionInfo})">
            <summary>
            Stores all active subscriptions into the specified <c>handles</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.FindSubscription(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Returns the <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionInfo"/> object indexed by the
            specified <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> and null if the specified
            <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> was not found.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CorrelationCanceler">
            <summary>
            Returns the <see cref="T:Bloomberglp.Blpapi.Internal.CorrelationCanceler"/> object used to
            cancel subscriptions based on <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.String,Bloomberglp.Blpapi.Internal.Interfaces.SubscriptionStatusCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Makes subscriptions. If the specified subscription list has a
            subscription with the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object already
            used by an existing subscription, throws an exception.
            </summary>
            <param name="subscriptionList">The list of subscriptions</param>
            <param name="identity">The identity for permissions</param>
            <param name="userOptions">The request label with request for
                diagnosis</param>
            <param name="completionCb">The callback called when subscription is
                cancelled or terminated</param>
            <param name="ctx"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Nullable{System.Int32},System.String)">
            <summary>
            Makes resubscriptions. If the specified subscription list has a
            resubscription with the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that
            does not have existing subscription, throws an exception.
            </summary>
            <param name="subscriptionList">The list of subscriptions</param>
            <param name="resubId">The resubscription ID appearing in all
            resubscription status messages for this resubscription</param>
            <param name="userOptions">The request label with request for
            diagnosis</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ClearSubscriptionPendingRequests(Bloomberglp.Blpapi.Internal.SubscriptionInfo)">
            <summary>
            Removes all the pending requests for <paramref name="subInfo"/>
            that is being canceled.
            </summary>
            <param name="subInfo"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CancelSubscriptionsWhileLocked(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            Makes unsubscription to existing subscriptions indexed by the
            specified <paramref name="correlators"/>. Ignores all subscriptions
            that are not active (SUBSCRIBING or SUBSCRIBED).
            </summary>
            <param name="correlators"></param>
            <param name="userOptionsList">The request label with request for
            diagnosis</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CancelSubscriptionsByIdentity(Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl)">
            <summary>
             Cancel all active (subscribing and subscribed) subscriptions that
             use the specified 'identity'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SendUnsubscriptionRequest(System.Collections.Generic.IEnumerable{System.Int64},Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            Sends unsubscription requests.
            </summary>
            <param name="streamHandles">
            The list of subscription handles.
            </param>
            <param name="ctx">
            The connection context to send the request on.
            </param>
            <param name="userOptions">
            The request label with request for diagnosis.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.PreProcessFailoverLegacy(System.Collections.Generic.IDictionary{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.IdentityUserOptionPair,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubscriptionInfo}},System.Collections.Generic.IDictionary{Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.List{System.Int64}},System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo},Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Determines which datasets need to processed for failover for
            legacy subscriptions.
            </summary>
            <param name="toSubscribe">
            The datasets which will need to be subscribed again.
            </param>
            <param name="toUnsubscribe">
            The datasets which will need to be unsubscribed.
            </param>
            <param name="ticksDeliveryInfosToRemove">
            The tick delivery infos which will need an access callback.
            </param>
            <param name="subscriptionInfo">
            The subscription being checked for failover.
            </param>
            <param name="primary">
            The primary connection of the subscription's service.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.PreprocessFailoverNonLegacy(System.Collections.Generic.IDictionary{Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo}},Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IReadOnlyCollection{Bloomberglp.Blpapi.Internal.ConnectionContext},System.UInt32)">
            <summary>
            Determines which data sets of the given
            <paramref name="subscriptionInfo"/> need to be rerouted.
            </summary>
            <param name="toReroute">
            The dictionary to which the datasets that need to be rerouted will
            be added.
            </param>
            <param name="subscriptionInfo">The subscription to check.</param>
            <param name="connections">
            A collection of connections where the service of the given
            <paramref name="subscriptionInfo"/> is available.</param>
            <param name="serviceCode">
            Code of the service on which datasets are rerouted.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.Failover(System.UInt32)">
            <summary>
            Resends all active subscriptions(SUBSCRIBING OR SUBSCRIBED).
            </summary>
            <param name="serviceCode">
            The code of the service to failover.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.HandleSubscriptionLost(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Decodes the provided <paramref name="payload"/> into a
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionLost"/> message and processes it.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessSubscriptionLostMessage(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionLost,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Clears data structures and creates SubscriptionTerminated messages
            for the specified <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionLost"/>.
            <para>
            The lock must not already be held.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessSubscriptionLostMessageImpl(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionLost,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Clears data structures and creates SubscriptionTerminated messages
            for the specified <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionLost"/>.
            <para>
            The lock must already be held.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.TerminateSubscriptionLostDataSets(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder,Bloomberglp.Blpapi.Internal.DataSetInfo,Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ResultCode,System.Collections.Generic.HashSet{Bloomberglp.Blpapi.Internal.SubscriptionInfo})">
            <summary>
            Used in ProcessSubscriptionLostMessage for terminating subscription
            datasets and cleaning up the data structures.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.HandleAdminData(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Decodes admin messages from the backend and publishes them.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.PublishSnapshotResponses(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ReceivedData,Bloomberglp.Blpapi.Internal.Events.RecapSubType,System.Int64,Bloomberglp.Blpapi.Internal.SubscriptionInfo)">
             <summary>
             Publish recaps of type 'tickSubType' located in the 'receivedData'
             at the 'tickOffset' as a response message for each request sent
             using the snapshot request template associated with the snapshot
             subscription defined by the 'subInfo'.
            
             Requests may be in one of 2 states: 'waiting' and 'receiving'. All
             requests are always added in 'waiting' state. When a start fragment
             of a fragmented recap comes, all 'waiting' requests go to
             'receiving' state, which means that they are receiving currently
             transmitted fragmented recap. All requests added during receiving
             of a fragmented recap go into 'waiting' state and wait for a next
             recap. It is possible that a new initial paint start comes while a
             previous one is not received completely (during failover for
             example), in this case all 'waiting' requests will move into
             'receiving' state but 'receiving' requests will continue to get
             initial paint data. The only way for a request to be removed from a
             list of 'receiving' requests is to receive entire initial paint
             (non-fragmented initial paint or an end-fragment).
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessRecapTickForSnapshotSubscription(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ReceivedData,Bloomberglp.Blpapi.Internal.Events.RecapSubType,System.Int64,Bloomberglp.Blpapi.Internal.SubscriptionInfo)">
            <summary>
            Convert tick data received from the 'ctx' connection and specified
            by the 'tickIterator' in the 'payload' buffer into response events
            for the snapshot associated with the 'subInfo' subscription and
            publish a response event. Behavior is undefined unless 'subInfo'
            points to a valid 'SubscriptionInfo' object corresponding to a
            snapshot subscription.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessSubscriptionDataMessage(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Creates subscription date event.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SubscribeOnOpenedService(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.String,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary> Subscribes subscriptions after it is done to open
            necessary subscription services.
            </summary>
            <param name="subscriptions">The list of subscriptions</param>
            <param name="identity">The identity for permissions</param>
            <param name="userOptions">The request label</param>
            <param name="ctx"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SubscribeImpl(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},System.Boolean,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.String,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary> Subscribes a list of subscriptions. Opens services if
             necessary.
             </summary>
            <param name="subscriptions">The list of subscriptions</param>
            <param name="autoOpen">Whether opening subscription services</param>
            <param name="identity">The identity for permissions</param>
            <param name="userOptions">The request label</param>
            <param name="connection"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.AddCorrelators(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.String,Bloomberglp.Blpapi.Internal.Interfaces.SubscriptionStatusCallback)">
            <summary>
            Adds subscriptions into <c>SubscriptionCorrelation</c>. Rolls back
            if there are duplicate <c>CorrelationID</c>.
            </summary>
            <param name="subInfos">
              The list of <c>SubscriptionInfo</c> objects
            </param>
            <param name="srcSubsList">The list of subscriptions</param>
            <param name="identity">The identity for permissions</param>
            <param name="userOptions">The request label</param>
            <param name="completionCb">
              The callback when subscription is failed or cancelled
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.IsResolveRequired(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Returns whether the specified <c>service</c> needs topic resolution
            in subscription.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ImmediateSubscribe(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.String,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Sends out (one or more) subscription requests.
            </summary>
            <param name="service">The subscription service</param>
            <param name="subscriptionList">
                The list of subscriptions in the same service
            </param>
            <param name="identity">The identity for permissions.</param>
            <param name="userOptions">The request label</param>
            <param name="connection"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.LegacySubscribe(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
             Sends out subscription request(s) for subscriptions in the
             subscription list.
            </summary>
            <param name="service">The subscription service</param>
            <param name="subscriptionList">
              The list of subscriptions in the same service
            </param>
            <param name="identity">The identity for permissions.</param>
            <param name="userOptionsList">The request label</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.PartitionSubscriptionListByService(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubscriptionInfo}})">
            <summary>
            Partitions subscriptions based on services.
            </summary>
            <param name="subscriptions">The input subscriptions</param>
            <param name="subscriptionsByService">The output of subscriptions
            partitioned based on service</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ResubscribeImpl(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Nullable{System.Int32},System.String)">
            <summary>
            Processes and sends out resubscription requests.
            </summary>
            <param name="subscriptionList">The list of subscriptions</param>
            <param name="resubId">The resubscription ID appearing
            resubscription status messages
            </param>
            <param name="userOptions">The request label</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ResubscribeOnOpenedService(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary> Makes resubscriptions after it is done to open necessary
            subscription services.
            </summary>
             <param name="resubInfoList">The list of resubscriptions in the same
             service</param>
             <param name="service">The resubscription service</param>
             <param name="identity">The identity for permissions</param>
             <param name="userOptionsList">The request label</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.PreProcessResubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubscriptionInfo}}},System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubscriptionInfo}}},System.Nullable{System.Int32},System.String)">
            <summary>
            Preprocess resubscriptions. Creates a <c>ResubscriptionHandle</c>
            object for each resubscription and adds it into the pending list of
            the subscription. If a resubscribed subscription is SUBSCRIBED, put
            it into the specified <c>noServiceResubListMap</c> if its service
            is not opened and into the specified <c>perAuthTokenResubListMap
            </c> if its service is opened.
            </summary>
            <param name="srcSubsList">The list of resubscriptions</param>
            <param name="noServiceResubListMap">The map keeping all
            resubscriptions the service of which is not opened</param>
            <param name="perAuthTokenResubListMap">The map keeping all
            resubscriptions the service of which is opened</param>
            <param name="resubId">The resubscription ID appearing
            resubscription status messages
            </param>
            <param name="userOptions">The request label</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.GetPerAuthTokenResubInfoList``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubscriptionInfo}}},``0,``1)">
            <summary>
            Utility function to put a resubscription into the specified
            <c>perAuthTokenResubInfoListMap</c> based on the specified
            <c>key</c> and <c>value</c>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CheckSubscriptionsExist(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription})">
            <summary>
            Checks each subscription in the specified <c>subsList</c> exists.
            Throws a <c>NotFoundException</c> if one of them does not exist.
            </summary>
            <param name="subsList">The subscription list</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.HandleSubscriptionOpenServiceFailure(System.String,System.Int32,System.String,System.String,System.String,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo})">
            <summary>
            Handles failure of opening service. Fails all subscriptions in
            this service, updating data structures and creating
            SubscriptionFailure event.
            </summary>
            <param name="source">The error source</param>
            <param name="errorCode">The error code</param>
            <param name="category">The error category</param>
            <param name="errorMessage">The description of error detail</param>
            <param name="subcategory">The error subcategory</param>
            <param name="subscriptionList">The list of subscriptions in the
            failed service</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.HandleResubscriptionOpenServiceFailure(Bloomberglp.Blpapi.Internal.DetailedResult,System.String,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo})">
            <summary>
            Handles failure of opening service. Fails all resubscriptions in
            this service, updating data structures and creating
            SubscriptionFailure event.
            </summary>
            <param name="result">The error result</param>
            <param name="errorMessage">The description of error detail</param>
            <param name="subscriptionList">The list of subscriptions in the
            failed service</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ResubscribePending(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResubscriptionMap,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.IdentityUserOptionPair,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubscriptionInfo}}})">
            <summary>
            Makes the next pending resubscription for each subscription that
            gets responses of subscription or the previous resubscription.
            </summary>
            <param name="hasServiceResubMap">
            The map of resubscriptions that have service</param>
            <param name="noServiceResubMap">
            The map of resubscriptions that do not have service
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.MergeResubscriptionsIfPending(Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResubscriptionMap,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.IdentityUserOptionPair,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubscriptionInfo}}})">
            <summary>
            If the subcription has pending resubscriptions put the specified
            subsHandle into the specified
            <paramref name="hasServiceResubMap"/> if its next pending
            resubscription has service and into the specified
            <paramref name="noServiceResubMap"/> if its next pending
            resubscription has no service.
            </summary>
            <param name="subInfo"></param>
            <param name="hasServiceResubMap">The map for resubscriptions the
            service of which is opened</param>
            <param name="noServiceResubMap">The map for resubscriptions the
            service of which is not opened</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ResolveAndRouteServiceFailover(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder)">
            <summary>
            Resends pending ResolveAndRoute requests on the specified
            'connection' and 'serviceCode'.
            </summary>
            <param name="connection">
            The connecton where the service became unavailable.
            </param>
            <param name="serviceCode">
            The service which became unavailable.
            </param>
            <param name="eventHolder">
            StatusEventHolder to populate with subscription terminated messages.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.GetRequestToSend(System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.Requests.RequestId,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.PendingRequest},Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Returns pending requests for <paramref name="service"/>.
            <para>
            Returned requests are removed from <paramref name="requests"/> to
            avoid processing them again.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SendPendingRequests(System.UInt32)">
            <summary>
            Sends pending <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolveAndRouteRequest"/> requests and
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteRequest"/> requests for a service with
            <paramref name="serviceCode"/> which previously did not have a
            connection.
            <para>
            This method should be called after acquiring <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.lock"/>.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ServiceDown(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Publishes 'SubscriptionStreamsDeactivated' for the datasets that
            are currently ticking with the specified connection
            'connectionContext' and service with the specified 'serviceCode'.
            </summary>
            <param name="connectionContext">
            The <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> where the service has gone
            down.
            </param>
            <param name="serviceCode">
            The code of the service which has gone down.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.PublishEvent(Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.SimpleEventImpl)">
            <summary>
            Pubish an admin event containing the specified <c>statusMsgs</c>
            and the specified <c>accessCbs</c> if <c>statusMsgs</c> is not
            empty.  Otherwise, if <c>accessCbs</c> is not empty, publish an
            internal event containing <c>accessCbs</c>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CloseStreamHandles(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo})">
            <summary>
            Send close requests with stream handles of datasets in the list
            specified by the 'dataSetsToClose' to connections where these
            streams are opened.
            Combine close requests and try to send as few requests per
            connection as possible  with no more than
            'k_maxSubscriptionHandlesPerRequest' stream handles per request.
            </summary>
            <param name="dataSetsToClose">datasets to close</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SendCloseRequests(System.Collections.Generic.IList{System.Int64},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Send close requests with stream handles specified by the
            'streamHandles' to the connection specified by the 'ctx'.
            Combine multiple stream handles in one request but no more than
            'k_maxSubscriptionHandlesPerRequest' stream handles per request.
            </summary>
            <param name="streamHandles"></param>
            <param name="ctx">connection where close requests are sent.</param>
            <returns>0 on success, -1 in case of failure</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CloseAndClearDataSets(Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Removes all datasets of the subscriptions specified by the
            'subInfo' from all registries and closes all stream handles of
            these datasets. Clear the list of datasets of the 'subInfo'
            subscription. Caller is responsible for holding the lock during
            this call.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.Reroute(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder,System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo}},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType,System.Boolean)">
            <summary>
            Reroute the dataSets, <paramref name="dataSetPerSubInfo"/>,
            for <paramref name="operation"/>. If
            <paramref name="deactivateDataSet"/> is true, deactivate the
            dataSets.
            <para>
            <paramref name="operation"/> is of either
            <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType.Reroute"/>, or <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType.Failover"/>.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.TerminateClusterServiceSubscription(System.String,Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder)">
            <summary>
            Terminates the cluster service subscription.
            </summary>
            <param name="errorMessage">Used in creating the error code.</param>
            <param name="subscriptionInfo">
            Cluster service <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionInfo"/>
            </param>
            <param name="eventHolder">
            Collects events to be published.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.LogDataSets(System.Collections.Generic.Dictionary{Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo}},System.String)">
            <summary>
            Logs the dataSets represented by
            <paramref name="dataSetsPerSubscriptionInfo"/> for
            <paramref name="operation"/>.
            <para>
            DataSets are logged at log level info.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessUpdateRouteForOpen(Bloomberglp.Blpapi.Internal.ConnectionContext,System.Collections.Generic.List{System.Int64},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Opens the dataSets corresponding to connection
            <paramref name="receivedCtx"/> and <paramref name="streamIds"/>
            on new connection, <paramref name="newCtx"/>, if the dataSets
            are not part of an ongoing operation which has higher precedence.
            </summary>
            <param name="receivedCtx">
            Original connection on which dataSets were ticking.
            </param>
            <param name="streamIds">
            <see cref="P:Bloomberglp.Blpapi.Internal.DataSetInfo.StreamId"/> for dataSets to be reopened.
            </param>
            <param name="newCtx">
            New connection on which dataSets should be opened.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.GetServiceFromSubscriptionInfo(Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType)">
            <summary>
            Gets the service of the <paramref name="subscriptionInfo"/> by
            look at the right topic using the given <paramref name="opType"/>.
            <para>
            If the <paramref name="opType"/> is a
            <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType.Resubscribe"/> the topic from the resubscription
            will be used.
            </para>
            </summary>
            <param name="subscriptionInfo"></param>
            <param name="opType"></param>
            <returns>
            The service being used by the <paramref name="subscriptionInfo"/>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.GetServiceFromTopic(Bloomberglp.Blpapi.Internal.TopicString.FromUser)">
            <summary>
            Get the <see cref="T:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl"/> object from the given <paramref name="topic"/>.
            </summary>
            <param name="topic">The fully qualified topic string.</param>
            <returns>The service belonging to the topic.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ShouldIgnoreResolveAndRouteResponse(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteResultContext)">
            <summary>
            Determines if the ResolveAndRoute response should be ignored.
            <para>
            A response should be ignored if:
            1. The subscription has been canceled.
            2. The subscription has been routed to a different connection.
            3. The subscription's topic has been resubscribed.
            </para>
            </summary>
            <param name="context">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteResultContext"/> for the response.
            </param>
            <returns>
            True if the response should be ignored. False otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CategorizeResolveAndRouteResults(Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySet{Bloomberglp.Blpapi.Internal.Bundling.Implementation.Components.ResultIdAndResult{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.ResolveAndRouteResult}},Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Goes over the results from a ResolveAndRoute response and
            bucketizes them according to what action needs to be taken.
            </summary>
            <param name="results">
            The contents of the ResolveAndRoute response.
            </param>
            <param name="status">
            The status of the ResolveAndRoute response.
            </param>
            <param name="eventHolder">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder"/> where new messages will be
            added.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in this call.
            </param>
            <returns>
            The shared context for the request. Null if there were no results
            in the response.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RouteTopicsFromResponse(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteResultContext,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.TopicRouting,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Categorizes the results from the <paramref name="topicRouting"/>
            that came over the wire and puts them in
            <paramref name="buckets"/>.
            </summary>
            <param name="context">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteResultContext"/> for the response.
            </param>
            <param name="topicRouting">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.TopicRouting"/> that came from the wire.
            </param>
            <param name="buckets">
            Holds the results of categorizing the entries in the
            <paramref name="topicRouting"/>.
            </param>
            <param name="eventHolder">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder"/> where new messages will be
            added.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in this call.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.StartSubscriptionAfterSuccesfulResolveAndRoute(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteResultContext,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo},Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.TopicRouting,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Starts a subscription after a succesful ResolveAndRoute response.
            </summary>
            <param name="context">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteResultContext"/> for the response.
            </param>
            <param name="resolvedDataSets">
            The <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> which have been succesfully resolved
            by this ResolveAndRoute response.
            </param>
            <param name="topicRouting">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.TopicRouting"/> that came from the wire.
            </param>
            <param name="eventHolder">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder"/> where new messages will be
            added.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in this call.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CategorizeRoutedStreams(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RoutedStream},System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteResultContext,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Categorizes the <paramref name="routedStreams"/> in the
            ResolveAndRouteResponse and places them into
            <paramref name="buckets"/> for later processing.
            <para>
            We collect all data sets that have been successfully resolved and
            routed. If any one of the data sets fails due to empty route, they
            are routed with elimination. If a dataset fails due to lost
            connection, it is routed without elimination.
            </para>
            </summary>
            <param name="routedStreams">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RoutedStream"/> list from the ResolveAndRoute
            response.
            </param>
            <param name="replacedDataSets">
            The datasets which are to be replaced by the current
            ResolveAndRoute response.
            </param>
            <param name="context">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteResultContext"/> for the response.
            </param>
            <param name="buckets">
            Holds the results of processing the routed streams.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestId"/> of the response being processed.
            </param>
            <returns>
            The list of <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> which have been succesfully
            resolved thanks to this ResolveAndRoute response.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessErrorResolveAndRouteResult(Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,System.String,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.CategorizedResolveAndRouteResults,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Puts the given <paramref name="subInfo"/> into the
            appropriate category based on the <paramref name="status"/> of a
            ResolveAndRoute response.
            </summary>
            <param name="subInfo">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionInfo"/> pertaining to the
            ResolveAndRoute response.
            </param>
            <param name="status">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult"/> of the response.
            </param>
            <param name="error">
            Contains information on the specific error.
            </param>
            <param name="buckets">
            The buckets where the <paramref name="subInfo"/> will be added.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> that originated this call.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RerouteWithDomainElimination(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteRoutingContext)">
            <summary>
            Reroutes the given datasets by elminating the shared domain from
            the connectivity handle.
            </summary>
            <param name="dataSets">
            The data sets to be re-routed.
            </param>
            <param name="routingContext">
            The routing context shared by all the entries in the
            ResolveAndRoute response.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RerouteWithoutDomainElimination(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteRoutingContext)">
            <summary>
            Reroutes the given datasets.
            </summary>
            <param name="dataSets">
            The data sets to be re-routed.
            </param>
            <param name="routingContext">
            The routing context shared by all the entries in the
            ResolveAndRoute response.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ReresolveWithElimination(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteRoutingContext)">
            <summary>
            Reresolves the given <paramref name="subscriptions"/> by
            eliminating the shared <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> from both
            the connectivity handle and send handle.
            </summary>
            <param name="subscriptions">
            The subscriptions to be re-resolved.
            </param>
            <param name="routingContext">
            The routing context shared by all the entries in the
            ResolveAndRoute response.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ReresolveWithSendElimination(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionInfo},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteRoutingContext)">
            <summary>
            Reresolves the given <paramref name="subscriptions"/> by
            eliminating the shared <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> from the
            send handle.
            </summary>
            <param name="subscriptions">
            The subscriptions to be re-resolved.
            </param>
            <param name="routingContext">
            The routing context shared by all the entries in the
            ResolveAndRoute response.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.OpenDataSetsAfterResolveAndRouteResponse(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetsToOpenPerService,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.ResolveAndRouteRoutingContext)">
            <summary>
            Opens the given <paramref name="dataSets"/> after they've received
            a succesful ResolveAndRoute response.
            </summary>
            <param name="dataSets">
            The datasets to be opened.
            </param>
            <param name="routingContext">
            The routing context shared by all the entries in the
            ResolveAndRoute response.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessOpenSuccess(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo},System.Collections.Generic.IDictionary{Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo}},System.Collections.Generic.IDictionary{Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo}},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext)">
            <summary>
            Update the dataset registry and the newly opened dataset located in
            the open context specified by the 'openContext' with new streamId
            and streamHandle received in open response specified by the
            'openResult'. For the normal subscription, immediately close and
            remove from all registries the datasets specified by the
            'dataSetsToClose' that the newly opened dataset is replacing. Add
            the tickDeliveryInfo to the subscription registry.
            For the snapshot subscription, send a recap request but do not add
            the tickDeliveryInfo to the subscription registry. Schedule
            removing and closing datasets specified by the 'dataSetsToClose'
            when a complete recap is received on the connection specified by
            the 'ctx'. Do not try to close replaced datasets if the current
            operation specified by the 'opType' is 'Failover'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.OnRouteResult(System.Object,Bloomberglp.Blpapi.Internal.Bundling.Components.ResultEventArgs{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteResult})">
            <summary>
            Process the route results and open, retry or terminate the
            subscription process based on whether the received results are
            good, recoverable errors or unrecoverable errors.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RerouteUnsuccessfulDataSets(System.Collections.Generic.IReadOnlyList{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.RoutingContext{System.Collections.Generic.Dictionary{System.Int32,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext}},Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Reroute unsuccessful dataSets, if
            <paramref name="eliminatedConnectionContext"/> is not null.
            Remove the endpoint represented by
            <paramref name="eliminatedConnectionContext"/> before rerouting.
            <para>
            Clone handles because other route request may destroy the original
            handle.
            </para>
            </summary>
            <param name="reroutableDataSets">
            DataSets that can be rerouted.
            </param>
            <param name="sharedContext">
            Common structures shared by all the dataSets.
            </param>
            <param name="eliminatedConnectionContext">
            Represents the endpoint that needs to be eliminated before
            rerouting.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RerouteUnsuccessfulDataSetsAfterDomainElimination(System.Collections.Generic.IReadOnlyList{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.RoutingContext{System.Collections.Generic.Dictionary{System.Int32,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext}})">
            <summary>
            Clones the <see cref="T:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle"/> and eliminates
            the current domain and reroutes the dataSets.
            <para>
            Clone handles because other route request may destroy the original
            handle.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.OpenSuccessfulDataSets(System.Collections.Generic.IReadOnlyDictionary{Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo}},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.RoutingContext{System.Collections.Generic.Dictionary{System.Int32,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext}},System.Collections.Generic.IReadOnlyDictionary{Bloomberglp.Blpapi.Internal.DataSetInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo}})">
            <summary>
            Clones the <see cref="T:Bloomberglp.Blpapi.Internal.Routing.IEndpointSelectorHandle"/> and opens the
            dataset represented by
            <para>
            Clone handles because other route request may destroy the original
            handle.
            </para>
            <paramref name="dataSetsToOpenPerSubscriptionInfos"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.CategorizeRouteResults(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Collections.IReadOnlySet{Bloomberglp.Blpapi.Internal.Bundling.Implementation.Components.ResultIdAndResult{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteResult}},Bloomberglp.Blpapi.Internal.Requests.RequestGuid,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.RoutingContext{System.Collections.Generic.Dictionary{System.Int32,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext}}@,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults@)">
            <summary>
            Enumerate over the results and divide good results and
            recoverable errors into different buckets represented by
            <paramref name="categorizedRouteResults"/>. Generate Subscription
            terminated or Subscription failure event for unrecoverable errors.
            </summary>
            <param name="status">The network status of the response.</param>
            <param name="results">
            The routing results of the route request.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the message from the wire that
            resulted in this call.
            </param>
            <param name="eventHolder">
            Collects generated events.
            </param>
            <param name="sharedContext">
            Common context shared by all the results.
            </param>
            <param name="categorizedRouteResults">
            Different buckets of route result.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessSuccessRouteResult(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteResult,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.Components.CategorizedRouteResults,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext,Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.RoutingContext{System.Collections.Generic.Dictionary{System.Int32,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext}},Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Process the success route <paramref name="result"/> and put them
            in one of buckets in <paramref name="categorizedRouteResults"/>.
            Results with null router ids are saved to be rerouted later.
            Results with good router ids are opened.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.IsUnrecoverableError(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult)">
            <summary>
            Returns true if the <paramref name="status"/> if an unrecoverable
            error status.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.IsRecoverableError(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult)">
            <summary>
            Returns true if the <paramref name="status"/> if an recoverable
            error status.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ProcessErrorRouteResult(System.String,Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext},Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.StatusEventHolder,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Boolean@)">
            <summary>
            Adds the <paramref name="routeContext"/> to
            <paramref name="reroutableDataSets"/> if the
            <paramref name="errorStatus"/> is recoverable, otherwise
            terminates any further processing of the route result.
            <para>
            <paramref name="eliminateConnectionContext"/> is set to true to
            remove the <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> from further route
            considerations.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.OnOpenResult(System.Object,Bloomberglp.Blpapi.Internal.Bundling.Components.ResultEventArgs{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.OpenResult})">
            <summary>
            Called by the bundler when receiving new OpenResult messages.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.IsSubscriptionManagementEndpoint(Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Returns true if the connection is a subscription management
            (non legacy) endpoint by looking at if the <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionInfo"/>
            contains <see cref="F:Bloomberglp.Blpapi.Internal.Infrastructure.Sessions.SessionInfo.ConnectionProperty.e_POINT_OF_PRESENCE_ID"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RequestRecap(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Send a recap request for a subscription defined by 'correlationId'.
            </summary>
            <param name="correlationId">
            Correlation id of a security for which we need to request a recap
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RequestRecapWhileLocked(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Send a recap request for a subscription defined by 'correlationId'.
            Caller should hold the class mutex during this call.
            </summary>
            <param name="correlationId">
            Correlation id of a security for which we need to send a recap
            request
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RequestRecapWhileLocked(Bloomberglp.Blpapi.Internal.DataSetInfo)">
            <summary>
            Send a recap request for the dataset specified by the 'dataSet'
            </summary>
            <param name="dataSet">The dataset or which we need a recap</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.RegisterDataSets(Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo},Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback}@)">
             <summary>
             Adds <paramref name="dataSets"/> in
             <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.subscriptionRegistry"/> and,
             <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.dataSetRegistry"/>. Creates callbacks(lambdas) that add
             <paramref name="dataSets"/> to
             <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.userSubscriptionRegistry"/> and adds the callbacks to
             <paramref name="accessCallbacks"/>.
            
             <para>
             This function should be called after acquiring <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.lock"/>.
             All parameters should be non-null.
             </para>
             </summary>
             <exception cref="T:System.ArgumentNullException">
             Parameters should be non-null.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.TransitionToActivatedState(Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo},System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
             <summary>
             For a Snapshot subscription, change the state of dataset from
             <see cref="F:Bloomberglp.Blpapi.Internal.SnapshotContextState.Pending"/> to
             <see cref="F:Bloomberglp.Blpapi.Internal.SnapshotContextState.Cached"/> and return
             RequestTemplateAvailableMessage.
             For normal subscription, change the state of
             <paramref name="dataSets"/> from
             <see cref="F:Bloomberglp.Blpapi.Internal.StreamStatus.Deactivated"/> to
             <see cref="F:Bloomberglp.Blpapi.Internal.StreamStatus.Activated"/> and return
             StreamActivatedMessage.
            
             <para>
             This function should be called after acquiring <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.lock"/>.
             </para>
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.Activate(Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo},System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback}@)">
             <summary>
             Activates <paramref name="dataSets"/> and returns
             SubscriptionStreamActivated message or RequestTemplateAvailable
             message for subscription <paramref name="subscriptionInfo"/>.
            
             <para>
             All parameters should be non-null.
             </para>
             </summary>
             <exception cref="T:System.ArgumentNullException">
             Parameters should be non-null.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.UnregisterDataSets(Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo},System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback}@)">
             <summary>
             Removes <paramref name="dataSets"/> from
             <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.subscriptionRegistry"/> and,
             <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.dataSetRegistry"/>. Creates callbacks(lambdas) that
             removes <paramref name="dataSets"/> from
             <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.userSubscriptionRegistry"/> and adds the callbacks to
             <paramref name="accessCallbacks"/>.
            
             <para>
             This function should be called after acquiring <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.lock"/>.
             All parameters should be non-null.
             </para>
             </summary>
             <exception cref="T:System.ArgumentNullException">
             Parameters should be non-null.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.TransitionToDeactivatedState(Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo},System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
             <summary>
             For a Snapshot subscription, change the state of dataset from
             <see cref="F:Bloomberglp.Blpapi.Internal.SnapshotContextState.Cached"/> to
             <see cref="F:Bloomberglp.Blpapi.Internal.SnapshotContextState.Pending"/> and return
             RequestTemplatePendingMessage.
             For normal subscription, change the state of
             <paramref name="dataSets"/> from
             <see cref="F:Bloomberglp.Blpapi.Internal.StreamStatus.Activated"/> to
             <see cref="F:Bloomberglp.Blpapi.Internal.StreamStatus.Deactivated"/> and return
             StreamDeactivatedMessage.
            
             <para>
             This function should be called after acquiring <see cref="F:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.lock"/>.
             </para>
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.Deactivate(Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo},System.String,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.Interfaces.AccessCallback}@)">
            <summary>
            Deactivates <paramref name="dataSets"/> and returns
            SubscriptionStreamDeactivated message or RequestTemplatePending
            message for subscription <paramref name="subscriptionInfo"/>.
            <para>
            All input parameters should be non-null.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.OpTypeToOngoingOperationType(Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType)">
            <summary>
            Convert the specified <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType"/> to its corresponding
            <see cref="T:Bloomberglp.Blpapi.Internal.OperationType"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ServiceUp(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Publishes SubscriptionStreamActivated for
            <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> that are currently on the specified
            connection <paramref name="connectionContext"/> and service
            specified with <paramref name="serviceCode"/> and not in
            the process of failover. The activated message will not be
            published for <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> for which activated
            message is already published.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ShouldProcessDataSet(Bloomberglp.Blpapi.Internal.DataSetInfo,Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.DataSetInfo})">
            <summary>
            Returns true if, <paramref name="dataSet"/> is in
            <paramref name="subInfo"/> and does not have a replacement in
            ongoing update, or at least one of the
            <paramref name="dataSetsToReplace"/> still contains
            <paramref name="dataSet"/> in its update information.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.GetConnectionFromRoutedStream(Bloomberglp.Blpapi.Internal.ConnectionContext@,Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.String,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteSuccess,System.Collections.Generic.IReadOnlyList{System.String},Bloomberglp.Blpapi.Internal.Routing.EndpointSelectorHandles,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Sets the <paramref name="routedConnectionContext"/> to a
            connection corresponding to the router ID in the specified
            <paramref name="routedResult"/> if possible.
            <para>
            The domain is valid if either the response contained an endpoint
            or if there was no endpoint but the connectivity has changed
            and there may be more options to retry re-routing on the same
            domain.
            The <paramref name="uts"/> and the
            <paramref name="subscriptionInfo"/> are only used for logging.
            </para>
            </summary>
            <param name="routedConnectionContext">
            The <see cref="T:Bloomberglp.Blpapi.Internal.ConnectionContext"/> from the
            <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteSuccess"/>.
            </param>
            <param name="subscriptionInfo">The topic being routed.</param>
            <param name="uts">The UTS of the routed stream.</param>
            <param name="routedResult">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SubscriptionManagement.RouteSuccess"/> received from the wire.
            </param>
            <param name="connectivity">
            The connectivity used for routing.
            </param>
            <param name="handles">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Routing.EndpointSelectorHandles"/> from the routing
            context.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the route response.
            </param>
            <returns>
            True if the domain is still valid or false if it has to be
            eliminated on a reroute.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.ConnectivityHasNewHosts(System.Collections.Generic.IReadOnlyList{System.String},Bloomberglp.Blpapi.Internal.Routing.EndpointSelectorHandles)">
            <summary>
            Determines if we can reconsider an empty route response as
            "go to the next domain" or "try again".
            </summary>
            <param name="oldConnectivity">
            The older connectivity to check.
            </param>
            <param name="handles">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Routing.EndpointSelectorHandles"/> to check for new
            entries in connectivity.</param>
            <returns>
            True if the connectivity in the <paramref name="handles"/> contains
            at least one host that was not present in
            <paramref name="oldConnectivity"/>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.GetTopicFromSubscriptionInfo(Bloomberglp.Blpapi.Internal.SubscriptionInfo,Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.OpType)">
            <summary>
            Gets the appropriate topic string from the
            <paramref name="subscriptionInfo"/> based on the current
            <paramref name="operation"/>.
            </summary>
            <param name="subscriptionInfo">
            The <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionInfo"/> whose topic string will be
            returned.
            </param>
            <param name="operation">The current, undergoing operation.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.AddDataSetToRouteCandidatesMap(Bloomberglp.Blpapi.Internal.SubscriptionInfo,System.Collections.Generic.IDictionary{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.IdentityUserOptionPair,System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.DataSetContext}},Bloomberglp.Blpapi.Internal.DataSetInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.DataSetInfo})">
            <summary>Helper function to populate dataset routing map.</summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SubscriptionManagerPrivateMethodsProxy">
            <summary>
            This mechanism provides a way to remove an excessive number of
            embedded types out of <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager"/> while still
            giving them access to <see cref="T:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager"/> private
            members without giving anything else access to these private members.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.Implementation.SubscriptionManager.SubscriptionManagerPrivateMethodsProxy.CancelSubscriptionsWhileSubscriptionManagerIsAlreadyLocked(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Options.MessageOption})">
            <summary>
            This is a dirty hack. Look at the commit message for a full
            explanation- RDSIAPISDK-3420, PR #536.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.ISubscriptionManager.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,System.String,Bloomberglp.Blpapi.Internal.Interfaces.SubscriptionStatusCallback,Bloomberglp.Blpapi.Internal.ConnectionContext)">
            <summary>
            Makes subscriptions. If the specified subscription list has a
            subscription with the <c>CorrelationID</c> object already used by
            an existing subscription, throws an exception.
            </summary>
            <param name="subscriptionList">The list of subscriptions</param>
            <param name="identity">The identity for permissions</param>
            <param name="userOptions">The request label with request for
                diagnosis</param>
            <param name="completionCb">The callback called when subscription is
                cancelled or terminated</param>
            <param name="ctx"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.ISubscriptionManager.ServiceUp(Bloomberglp.Blpapi.Internal.ConnectionContext,System.UInt32)">
            <summary>
            Publishes SubscriptionStreamActivated for
            <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> that are currently on the specified
            connection <paramref name="connectionContext"/> and service
            specified with <paramref name="serviceCode"/> and not in the
            process of failover. The activated message will not be published
            for <see cref="T:Bloomberglp.Blpapi.Internal.DataSetInfo"/> for which activated message is
            already published.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubscriptionManagement.ISubscriptionManager.Failover(System.UInt32)">
            <summary>
            Failover all the subscriptions for the specified
            <param name="serviceCode"/>. All the pending and existing
            subscriptions will be re-established on a new connection.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubscriptionsIteratorImpl">
            <summary>
            Summary description for SubscriptionsIteratorImpl.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry">
            <summary>
            A value semantic type to hold information about sub-service code range
            and priority.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.SubServiceCodeEntryCompare">
            <summary>
            Implementation of Comparator for {@link SubServiceCodeEntry}
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.SubServiceCodeEntryCompare.DoesRangeOverlap(Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange,Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange)">
            <summary>
              Return true if the ranges overlap
              (A `intersection` B != null), otherwise return false.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.SubServiceCodeEntryCompare.Compare(Bloomberglp.Blpapi.Internal.SubServiceCodeEntry,Bloomberglp.Blpapi.Internal.SubServiceCodeEntry)">
            <summary>
              Return 0, if x and y ranges overlap, otherwise return
              the difference between the begin point of the ranges
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.d_range">
            <summary>
            The underlying range of SubServiceCodes
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.d_priority">
            <summary>
            The priority associated with {@link d_range}
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.#ctor(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates an instance of 'SubServiceCodeEntry' with the range
            specified by ['begin', 'end'] and the priority specified by
            'priority'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.#ctor(Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange)">
            <summary>
            Creates an instance of 'SubServiceCodeEntry' with the range
            specified by 'range' and null priority.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.#ctor(Bloomberglp.Blpapi.Internal.SubServiceCodeEntry)">
            <summary>
            Creates a copy of the specified 'other'.
            @param other
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.AsSubServiceCodeRangePriority">
            <summary>
            Populates and returns an instance of 'SubServiceCodeRangePriority'
            with the underlying information.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.CanJoinIfRangeGreater(Bloomberglp.Blpapi.Internal.SubServiceCodeEntry)">
            <summary>
            Returns 'true' if the specified 'subServiceCodeEntry' is greater
            and can be merged into the current one. The definition of greater
            is as defined by 'SubserviceCodeEntryCompare.Compare'.
            Note that, if priorities are different or if the ranges are *not*
            disjoint this method will always return 'false'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntry.JoinRangeGreater(Bloomberglp.Blpapi.Internal.SubServiceCodeEntry)">
            <summary>
            Merge the specified subServiceCodeEntry (which is greater) into the
            current one. The behavior is undefined unless
            'canJoinIfRangeGreater(subServiceCodeEntry) == true '.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange">
            <summary>
            A pod type to store information pertaining to a range of the form
            [begin, end].
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange.d_begin">
            <summary>
            The begining of a closed range.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange.d_end">
            <summary>
            The end of a closed range.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of 'SubServiceCodeEntryRange' with the specified
            'begin' and the specified 'end' of the form '[begin, end]'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange.#ctor(Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange)">
            <summary>
            Creates a copy of the specified other.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange.AsSubServiceCodeRange">
            <summary>
            Populates and returns the 'SubServiceCodeRange'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet">
            <summary>
            An implementation of range set which supports merging and iterating
            ranges.  It also supports computing changes between one set and another
            set, which just returns the set of ranges that need to be added and
            removed to reach from the one 'SubServiceCodeEntrySet' to another. The
            container maintains an invariant that all the ranges in the set will be
            disjoint.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.#ctor">
            <summary>
              Create an instance of 'SubServiceCodeEntrySet' with no ranges.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.#ctor(Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet)">
            <summary>
            Creates a copy of the specified 'other'. The copy that is created
            is a deep copy and any changes to members of 'other' is *not*
            reflected in the new object.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.AddAndMerge(Bloomberglp.Blpapi.Internal.SubServiceCodeEntry)">
            <summary>
            Add the specified 'subServiceCodeEntry', if the subServiceCodeEntry
            can be merged, it will be merged. This ensures that all the ranges
            in the range set are disjoint.  This method assumes that the set
            contains enough space (no range that intersects) for the range
            specified in 'subServiceCodeEntry'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.Add(Bloomberglp.Blpapi.Internal.SubServiceCodeEntry)">
            <summary>
              Add the specified 'subServiceCodeEntry' to the range-set.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.Clear">
            <summary>
              Clear all the ranges
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.IsEmpty">
            <summary>
              Return 'true' if there are currently no ranges in the set.
              Otherwise return 'false'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.Add(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.SubServiceCodeEntry})">
            <summary>
              Add the ranges specified by 'activeCodes' to the range-set.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.Remove(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange})">
            <summary>
              Remove the ranges specified by 'activeCodes' to the range-set.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.IsRangeASubset(Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange,Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange)">
            <summary>
            is 'g `subset` h'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.RemoveIfPrioritySame(Bloomberglp.Blpapi.Internal.SubServiceCodeEntry)">
            <summary>
              Remove all those ranges that are contained in the range specified
              by 'subServiceCodeEntry' that have the same priority as
              'subServiceCodeEntry'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.ComputeChanges(Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet)">
            <summary>
            Compute and return the changes which will take the current set of
            ranges to the specified 'other'. The returned
            'SubServiceCodeUpdate' contains, an active set which implies the
            range that should be added and an inactive set which implies the
            range that should be removed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.GetHashCode">
            <summary> Inhibit the use as a key in a hash as the default
            implementation of GetHashCode is not valid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubServiceCodeEntrySet.Enumerator">
            <summary>
              An enumerator class for 'SubServiceCodeEntrySet'
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate">
            <summary>
            A value-semantic type that represents an update which can be applied to
            an instance of 'SubServiceCodeEntrySet'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate.#ctor(System.Collections.Generic.ICollection{Bloomberglp.Blpapi.Internal.SubServiceCodeEntry},System.Collections.Generic.ICollection{Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange})">
            <summary>
            Creates an instance of 'SubServiceCodeUpdate' with the specified
            'activeCodes' and the specified 'inactiveCodes'. ActiveCodes are
            sub-service codes that need to be added when applied, while
            inactiveCodes are codes that need to be removed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate.GetActiveCodes">
            <summary>
            Returns the collection of sub-service codes that need to be added.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate.GetInactiveCodes">
            <summary>
            Returns the collection of sub-service codes that need to be removed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate.SetActiveCodes(System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubServiceCodeEntry})">
            <summary>
            Set the specified 'activeCodes' as activeCodes (sub-service code that
            need to be added when the update is applied)
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.SubServiceCodeUpdate.SetInactiveCodes(System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.SubServiceCodeEntryRange})">
            <summary>
            Set the specified 'inactiveCodes' as inactiveCodes (sub-service code
            that need to be removed when the update is applied)
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Test.IMessageXmlDecoder">
            <summary>
            An interface to decode XML strings into BLPAPI
            messages in events.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.Test.MessageFormatter">
            <summary>
            The class is an implementation of <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> for
            manipulation events.
            <para>
            The formatter facilitates adding new messages to events and allows
            modification to the most recently appended message.
            </para>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.Test.MessageFormatter.IsFormatting">
            <summary>
            True if the formatter is still formatting the current message.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Test.MessageFormatter.FormatMessageXml(System.String)">
            <summary>
            Reads the given XML string and formats the message.
            </summary>
            <param name="xmlMessage">
            An XML string representing a message based on the schema provided
            in <see cref="T:Bloomberglp.Blpapi.Internal.Events.IPublishMessageInfo"/> at construction time.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Test.TestUtilImpl.DeserializeService(System.String)">
            <summary>
            Deserializes a <see cref="T:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl"/> from XML from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Test.TestUtilImpl.DeserializeService(System.IO.Stream)">
            <summary>
            Deserializes a <see cref="T:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl"/> from XML from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.Test.TestUtilImpl.DeserializeService(System.IO.TextReader)">
            <summary>
            Deserializes a <see cref="T:Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl"/> from XML from a <see cref="T:System.IO.TextReader"/>.
            <para>
            Don't expose this method to users. It might be useful to us for
            unit testing, but it's an unusual thing to expose as a class
            interface.
            </para>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickBufferCache">
            <summary>
            An instance of this class is used as a cache of last published ticks. Elements or items
            in the cache are expired during insertion due to
            1. Time  - the elements in the cache are stale (i.e inserted too long ago)
            2. Space - the cache has already grown to the maximum allowed size
            This component also offers a find and iterate interface to look for
            earliest payload containing the tick corresponding to a topic.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickBufferCache.TopicAndSeqNo">
            <summary>
            The class which stores the association between topic identifier and topic sequence
            number
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickBufferCache.TopicAndSeqNoList">
            <summary>
            The list of 'TopicAndSeqNo' instances
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickBufferCache.TopicPayloadInfo">
            <summary>
            The class which stores a association between topic sequence number and payload sequence
            number
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickBufferCache.PayloadInfo">
            <summary>
            An instance of this class stores all the required information necessary for replaying a tick
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.#ctor">
            <summary>
            Default constructor required only for NMock2 mocking.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.#ctor(System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.Interfaces.ITimeSource,System.Int32)">
            <summary>
            Create a instance of 'TickBufferCache' using the specified arguments.
            Using initialBufferSize of <see cref="F:Bloomberglp.Blpapi.Internal.TickBufferCache.INITIAL_BUFFER_SIZE"/>
            </summary>
            <param name="expirationInterval">Time in milliseconds after which items can be expired
            </param>
            <param name="maxTotalPayloadSize">combined size of all items stored should be less than
            this value
            </param>
            <param name="timeSource">The time source from which current time will be acquired
            </param>
            <param name="sessionId">Session id for logging</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.#ctor(System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.Interfaces.ITimeSource,System.Int32,System.Int32)">
            <summary>
            Create a instance of 'TickBufferCache' using the specified arguments.
            Using initialBufferSize of 128.
            </summary>
            <param name="expirationInterval">Time in milliseconds after which items can be expired
            </param>
            <param name="maxTotalPayloadSize">combined size of all items stored should be less than
            this value
            </param>
            <param name="timeSource">The time source from which current time will be acquired
            </param>
            <param name="initialBufferSize">Initial size of each buffer before having to resize
            </param>
            <param name="sessionId">Session id for logging</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.add(Bloomberglp.Blpapi.Internal.TickBufferCache.TopicAndSeqNoList,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType,System.Int32,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[])">
            <summary>
            Add an item to the cache after acquiring the instance lock
            </summary>
            <param name="topicAndSeqNoList">The list of all topics and their seq. numbers which are
            found in the specified 'payload'
            </param>
            <param name="messageType">The message type to be used during replay</param>
            <param name="payloadSize">The size of the item</param>
            <param name="payload">The encoded item</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.addLocked(Bloomberglp.Blpapi.Internal.TickBufferCache.TopicAndSeqNoList,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageType,System.Int32,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer[])">
            <summary>
            Add an item to the cache. Behavior is undefined unless the instance lock is already
            acquired
            </summary>
            <param name="topicAndSeqNoList">The list of all topics and their seq. numbers which are
            found in the specified 'payload'
            </param>
            <param name="messageType">The message type to be used during replay</param>
            <param name="payloadSize">The size of the item</param>
            <param name="payload">The encoded item</param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickBufferCache.PayloadHandleAndSeqNo">
            <summary>
            Result of find operation
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.find(System.Int64,System.Int32,Bloomberglp.Blpapi.Internal.TickBufferCache.PayloadInfo)">
            <summary>
            Returns the pair of handle and earliest found topic sequence number in the payload that
            was added no later then the message with the sequence number 'topicSeqNo' on the topic
            'topic' and, if 'hint' is non-null, no later then the payload pointed by 'hint'. The
            cache is locked for reading. If no such message can be found, return the earliest
            available. Returned topic sequence is valid only if a payload for this topic could be
            found.
            </summary>
            <param name="topic">topic id</param>
            <param name="seqNo">topic sequence number to be found</param>
            <param name="hint">result from previous find or null</param>
            <returns>best effort result</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.findLocked(System.Int64,System.Int32,Bloomberglp.Blpapi.Internal.TickBufferCache.PayloadInfo)">
            <summary>
            Returns the pair of handle and earliest found topic sequence number in the payload that
            was added no later then the message with the sequence number 'topicSeqNo' on the topic
            'topic' and, if 'hint' is non-null, no later then the payload pointed by 'hint'. The
            behavior is undefined unless the cache is locked for reading. If no such message can be
            found, return the earliest available. Returned topic sequence is valid only if a
            payload for this topic could be found.
            </summary>
            <param name="topic">topic id</param>
            <param name="seqNo">topic sequence number to be found</param>
            <param name="hint">result from previous find or null</param>
            <returns>best effort result</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.iterate(Bloomberglp.Blpapi.Internal.TickBufferCache.PayloadInfo,Bloomberglp.Blpapi.Internal.TickBufferCache.IterationCallback)">
            <summary>
            Invokes the specified callback 'iterationCallback' for each payload starting from
            specified result.
            </summary>
            <param name="start">The payload from which to start the replay</param>
            <param name="iterationCallback">The callback to be called for each payload that we can
            iterate over
            </param>
            <returns>The number of times callback was invoked</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.iterateLocked(Bloomberglp.Blpapi.Internal.TickBufferCache.PayloadInfo,Bloomberglp.Blpapi.Internal.TickBufferCache.IterationCallback)">
            <summary>
            Invokes the specified callback 'iterationCallback' for each payload starting from
            specified result. The behavior is undefined unless the
            instance lock is already acquired
            </summary>
            <param name="start">The payload from which to start the replay</param>
            <param name="iterationCallback">The callback to be called for each payload that we can
            iterate over
            </param>
            <returns>The number of times callback was invoked</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.iterate(System.Int64,System.Int32,Bloomberglp.Blpapi.Internal.TickBufferCache.IterationCallback)">
            <summary>
            Perform a find using the specified 'topic' and 'topicSeqNo' and iterate over the result
            </summary>
            <param name="topic">topic id</param>
            <param name="topicSeqNo">topic sequence number to be found</param>
            <param name="iterationCallback">The callback to be called for each payload that we can
            iterate over
            </param>
            <returns>The number of times callback was invoked</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.iterateLocked(System.Int64,System.Int32,Bloomberglp.Blpapi.Internal.TickBufferCache.IterationCallback)">
            <summary>
            Perform a find using the specified 'topic' and 'topicSeqNo' and iterate over the result
            The behavior is undefined unless the instance lock is already acquired
            </summary>
            <param name="topic">topic id</param>
            <param name="topicSeqNo">topic sequence number to be found</param>
            <param name="iterationCallback">The callback to be called for each payload that we can
            iterate over
            </param>
            <returns>The number of times callback was invoked</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.topicCount">
            <returns>The number of topics currently available in the tick cache</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.topicBufferSize(System.Int64)">
            <summary>
            Get the number of items in the cache corresponding to a topic
            </summary>
            <param name="topic">topic id</param>
            <returns>The number of elements found in the cache corresponding to the topic</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickBufferCache.payloadBufferSize">
            <summary>
            The total number of elements found in the cache
            </summary>
            <returns>Count of total number of elements found in the cache</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickDelivery.StreamContext">
            <summary>
            A list of <see cref="T:Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo"/> objects along with the
            <see cref="P:Bloomberglp.Blpapi.Internal.TickDelivery.StreamContext.RequestGuid"/> for their initial paint.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry">
            <summary>
            This class implements a registry of all active subscriptions.
            </summary>
            <remarks>
             It inherits a hash map between stream ID and vector of
            <c>SubscriptionTickDeliveryInfoRegistry</c>, which is used to store all
            active subscriptions. Additional fields and methods are used to
            facilite inserting, removing stream IDs and <c>TickDeliveryInfo</c>,
            and taking sanpshots.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.#ctor">
            <summary>
            Initializes an empty <c>SubscriptionRegistry</c> object.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.SetStreamIds(Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId},Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Sets the specified <c>tickDeliveryInfo</c> associate with a list of
            stream IDs in the specified <c>streamIds</c>. If
            <c>tickDeliveryInfo</c> already has stream IDs, does nothing and
            returns a non-zero value; otherwise, returns 0 on success.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.addByStreamId(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId,Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Adds the specified <c>tickDeliveryInfo</c> into the list indexed by
            the specified <c>streamId</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.equals(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId},System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId})">
            <summary>
            Retruns true if two lists have the same stream IDs.
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.OverwriteStreamIds(Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo,Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId},Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            For testing use only.
            <para>
            Finds the stream id of the data context specified by
            <c>oldTickDeliveryInfo</c>. If the found stream id is the same as
            the specified <c>newStreamIds</c> and the specified
            <c>oldTickDeliveryInfo</c> is the same as the specified
            <c>newTickDeliveryInfo</c>, does nothing. Otherwise, removes the
            association of <c>oldTickDeliveryInfo</c> and the found streamId,
            and adds the association of <c>newTickDeliveryInfo</c> and
            <c>newStreamIds</c>. If no stream id is found for
            <c>oldTickDeliveryInfo</c>, returns a non-zero value and returns 0
            otherwise.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.removeByStreamId(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId,Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo)">
            <summary>
            Removes the specified <c>tickDeliveryInfo</c> from the list indexed
            by the specified <c>streamId</c>.
            </summary>
            <param name="streamId"></param>
            <param name="tickDeliveryInfo"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.Remove(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId)">
            <summary>
            Removes the specified <c>streamId</c> from this registry and
            returns all <c>TickDeliveryInfo</c> objects associated
            <c>streamId</c>. This is thread safe.
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.Remove(Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo)">
            <summary>
            Removes the specified <c>tickDeliveryInfo</c> from this registry.
            This method is thread safe
            </summary>
            <param name="tickDeliveryInfo"></param>
            <returns><c>true</c> if <c>tickDeliveryInfo</c> exists and
            <c>false</c> otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.RemoveUnlocked(Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo)">
            <summary>
            Removes the specified <c>tickDeliveryInfo</c> from this registry.
            Please make sure that write lock on d_lock is held before calling
            this function.
            </summary>
            <param name="tickDeliveryInfo"></param>
            <returns><c>true</c> if <c>tickDeliveryInfo</c> exists and
            <c>false</c> otherwise</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.LockRead">
            <summary>
            Accquires the read lock.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.UnlockRead">
            <summary>
            Releases the read lock.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.removeLocked(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId)">
            <summary>
            Removes the specified <c>streamId</c> from this registry and
            returns all <c>TickDeliveryInfo</c> objects associated
            <c>streamId</c>. This is not thread safe.
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.removeByContext(Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo,Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId)">
            <summary>
            Removes the specified <c>streamId</c> from the list indexed by the
            specified <c>tickDeliveryInfo</c>.
            </summary>
            <param name="tickDeliveryInfo"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.HasStream(Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo)">
            <summary>
            Returns whether any stream Id is associated with the specified
            <c>tickDeliveryInfo</c>.
            </summary>
            <param name="tickDeliveryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.Clear(System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo})">
            <summary>Clears all stream ids. Puts all data context objects into
            the specified
            <c>tickDeliveryInfos</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.SubCountWithSecureLog">
            <summary>
            Returns the number of subscriptions(<c>TickDeliveryInfo</c>
            objects) that need secure logging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.increaseSubCountWithSecureLogIfNecessary(Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo)">
            <summary>
            If the subscription pointed by the specified
            <c>tickDeliveryInfo</c> needs secure logging, increases the count;
            does nothing otherwise.
            </summary>
            <param name="tickDeliveryInfo"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.decreaseSubCountWithSecureLogIfNecessary(Bloomberglp.Blpapi.Internal.TickDelivery.TickDeliveryInfo)">
            <summary>
            If the subscription pointed by the specified
            <c>tickDeliveryInfo</c> needs secure logging, decreases the count;
            does nothing otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionRegistry.GetTickDeliveryInfoRegistrySnapshot">
            <summary>
            Returns the snapshot of the
            <c>SubscriptionTickDeliveryInfoRegistry</c> part of this registry.
            Any change afterwards does not affect the snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId">
            <summary>
            This class keeps the minimal information to parse subscription data.
            It could be duplicated to take a snapshot for parsing subscription data.
            It is a map from stream IDs to a vector of 'TickDeliveryInfo'
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.#ctor">
            <summary>
            Initializes a <c>SubscriptionTickDeliveryInfoRegistry</c>
            object with an empty map
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.#ctor(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry)">
            <summary>
            Initializes a <c>SubscriptionTickDeliveryInfoRegistry</c>
            object with the clone of
            the mapping of the specified <c>origin</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.GetStreamContext(Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionStreamId)">
            <summary>
            Finds the stream contexts associated with <paramref name="streamId"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.LockRead">
            <summary>
            Acquires the read lock.
            </summary>
            <remarks>
            It is called by <c>FindDataContexts</c> to provide thread safety.
            The default implementation is doing nothing because this class has
            no methods to modify the internal data. If a subclass provides
            manipulators on internal data, it should override this method to
            provide thread safety.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickDelivery.SubscriptionTickDeliveryInfoRegistry.UnlockRead">
            <summary>
            Releases the read lock.
            </summary>
            <remarks>
            It is called by <c>FindDataContexts</c> to provide thread safety.
            The default implementation is doing nothing because this class has
            no methods to modify the internal data. If a subclass provides
            manipulators on internal data, it should override this method to
            provide thread safety.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TickParsingTools.fillElementFromField(Bloomberglp.Blpapi.Internal.ElementImpl,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.SelfDescribingTickFieldIterator,System.Int32)">
            <summary>
            Decodes the field indexed by the specified <c>tickId</c> in the
            tick message pointed by the specified <c>fieldsIter</c> into the
            specified <c>element</c>.
            </summary>
            <param name="element">
            the storage into which the field is decoded
            </param>
            <param name="fieldsIter">the field to decode</param>
            <param name="tickId">identifier for logging</param>
            <exception cref="T:System.IO.IOException">
            thrown if appropriate data cannot be read from the field iterator
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TokenGeneratorIntf.CloneToken(System.String,System.Int32,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.ICloneHandler)">
            <summary>
            Send a clone request to the token service.
            </summary>
            <param name="baseToken">
                The original token to be cloned </param>
            <param name="numTokens">Number of copies desired</param>
            <param name="correlationId">
                Correlation ID for the clone request </param>
            <param name="tokenHandler">
                Receives the list of tokens or the error </param>
            <returns>
                The correlation ID to be used for canceling the request
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ICloneHandler.OnTokensCloned(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Collections.Generic.IList{System.String})">
            <summary>
            Callback invoked when tokens are successfully cloned.
            The `TokenGenerator` mutex will NOT be held while calling this.
            </summary>
            <param name="cid">Correlation ID of the clone token request</param>
            <param name="requestGuid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the clone token request.
            </param>
            <param name="tokens">List of tokens obtained from Token Service
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ICloneHandler.OnError(Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Internal.Requests.RequestGuid,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Callback invoked in case of error during token cloning.
            The `TokenGenerator` mutex will NOT be held while calling this.
            </summary>
            <param name="cid">Correlation ID of the clone token request</param>
            <param name="requestGuid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> of the clone token request.
            </param>
            <param name="errorCode">Error code</param>
            <param name="errorMessage">Error message</param>
            <param name="errorSource">Source that generated the error</param>
            <param name="category">Category of the error</param>
            <param name="subcategory">Sub-category of the error</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TokenUtil.isValidSourceIp(System.Net.IPAddress)">
            <summary>
            Determine if the specified <paramref name="addr"/> is valid as
            a source IP address for token generation.
            </summary>
            <param name="addr">IP address to check.</param>
            <returns><c>true</c> if the specified <paramref name="addr"/> is a
            valid address,  <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TokenUtil.getLocalIPs(System.Boolean)">
            <summary>
            Determine all (or optionally, one) IP addresses of the local host.
            </summary>
            <param name="firstOnly">Set to <c>true</c> to only return one
            address.</param>
            <returns>An <c>IEnumerable</c> of <c>IPAddress</c> objects
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TokenUtil.fillAllIPAddresses(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.GenerateTokenRequest)">
            <summary>
            Add to the specified <paramref name="request"/> all detectable
            local and display IP addresses at the time of invocation, and
            return the number of IP addresses added to the request.
            </summary>
            <param name="request"><c>GenerateTokenRequest</c> to be updated.
            </param>
            <returns>Number of IP addresses detected and added to
            <paramref name="request"/>
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TokenUtil.CreateTokenRequest(Bloomberglp.Blpapi.AuthOptions,System.Net.IPAddress,Bloomberglp.Blpapi.Internal.TokenUtil.UserNameGetter,Bloomberglp.Blpapi.Internal.TokenUtil.PropertyValueGetter)">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.ApiTokens.Request"/>
            with the given authentication parameters.
            </summary>
            <param name="authOptions">
            The Authorization options to use.
            </param>
            <param name="ipHint">
            The IP address to use for token generation.
            </param>
            <param name="getCurrentUser">
            A function which returns the current user's name.
            </param>
            <param name="getPropertyValue">
            A function which returns an Active Directory property's value.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicImpl">
            <summary>
            This class keeps track of the state of a topic with respect to
            publishing. A topic can be TopicState or not and "subscribed" or
            not. See topic lifetime in <see cref="T:Bloomberglp.Blpapi.ProviderSession"/>.
            <para>
            Note that this class is not used along the subscription path.Two
            variables <see cref="F:Bloomberglp.Blpapi.Internal.TopicImpl.creationCount"/> and
            <see cref="F:Bloomberglp.Blpapi.Internal.TopicImpl.notifiedActivated"/> are used to keep track of the
            subscription state and the creation state of a topic.If
            <see cref="F:Bloomberglp.Blpapi.Internal.TopicImpl.creationCount"/> &gt; 0, topic is created; If
            <see cref="F:Bloomberglp.Blpapi.Internal.TopicImpl.notifiedActivated"/> is true, topic is also
            subscribed.
            </para>
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.TopicImpl.creationCount">
            <summary>
            The number of times this topic has been declared 'created'.
            A topic with a creation count of zero is not available for
            publishing. When the count is increased, a 'TopicCreated'
            message should be delivered; when the count goes from
            1 to 0, a 'TopicDeleted' message should be delivered.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.TopicImpl.notifiedActivated">
            <summary>
            Track the last 'TopicActivated' and 'TopicDeactivated' event
            delivered to the application to ensure that we don't notify twice
            or miss any notification.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicImpl.UserTopic">
            <summary>
            User specified topic string to identify this topic.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicImpl.BackendTopic">
            <summary>
            Topic string that has been both resolved and extended by the
            Bloomberg infrastructure.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicImpl.ResolvedTopic">
            <summary>
            Topic string which the resolver returned for this topic.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicImpl.NormalizedTopic">
            <summary>
            Unique part of the resolved/backend topic string.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicImpl.NotifiedActivated">
            <summary>
            Track the last 'TopicActivated' and 'TopicDeactivated' event
            delivered to the application to ensure that we don't notify twice
            or miss any notification.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImpl.IsCreated">
            <summary>
            Returns true if the creation count is greater than 0 and false
            otherwise.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImpl.IncrementCreationCount">
            <summary>
            Increments topic creation count. Topic is only created the first
            time when topic creation is called. Afterwards only creation count
            is incremented.
            </summary>
            <returns>
            The new creation count after the increment.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImpl.DecrementCreationCount">
            <summary>
            Decrements topic creation count. Topic creation count is
            decremented whenever topic deletion is called.
            </summary>
            <returns>
            The new creation count after the decrement.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImpl.SetSequenceNumberIfLess(System.Int32)">
            <summary>
            Sets <see cref="F:Bloomberglp.Blpapi.Internal.TopicImpl.sequenceNumber"/> to be
            <paramref name="newSequenceNumber"/> only if it is less than
            <paramref name="newSequenceNumber"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicImplRegistry">
            <summary>
            This class keeps all created topics, 'TopicImpl' objects, for publishing. It
            is indexed by topic IDs and also indexed by uts topic strings for resolved
            topics.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImplRegistry.addTopicToMaps_unlocked(Bloomberglp.Blpapi.Internal.TopicImpl)">
            <summary>
            Add the specified 'topic' to the maps within lock context
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImplRegistry.#ctor(Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager,System.Int32)">
            <summary>
            Creates a TopicImplRegistry object.
            </summary>
            <param name="serviceManager">used to get ServiceImpl object</param>
            <param name="sessionId">for logging</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImplRegistry.find(System.Int64)">
            <summary>
            Returns the TopicImpl for the specified 'topicId'. Returns null if no
            topicImpl was found for the 'topicId'.
            </summary>
            <param name="topicId"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImplRegistry.findOrAdd(Bloomberglp.Blpapi.Internal.TopicString.FromUser,Bloomberglp.Blpapi.Internal.TopicString.Normalized)">
            <remarks>
            Finds the topicImpl for the specified 'resolvedUts' and if not found in
            the registry, creates a new TopicImpl with 'resolvedUts' and add it to
            the registry. Returns the found TopicImpl if found, otherwise returns the
            newly created TopicImpl. Note: Before creating the new TopicImpl, the
            service would be got from serviceManager and if the service was not
            found, returns null.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImplRegistry.getTopicIdMap">
            <summary>This function has been added to support V2 style.
            Return the TopicIdMap as a copy.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImplRegistry.findTopics(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Returns all topics on the specified 'service'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicImplRegistry.removeTopic(System.Int64)">
            <summary>
            Removes and returns the topic indexed by the specified 'topicId'.
            Returns null if not found.
            </summary>
            <param name="topicId"></param>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicInfo.ResolvedTopic">
            <summary>
            Gets or sets resolved topic string.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicInfo.TopicId">
            <summary>
            Gets or sets topic ID.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicInfo.Msg">
            <summary>
            Gets or sets topic resolution message exposed to users to create a
            topic.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicInfo.Status">
            <summary>
            Gets or sets resolution status or creation status.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicInfo.Service">
            <summary>
            Gets or sets the service that this topic is on.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicInfo.FailureReported">
            <summary>
            Gets or sets whether a topic resolution failure message is already
            generated.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicInfo.#ctor(System.String,Bloomberglp.Blpapi.CorrelationID,System.Nullable{System.Int64})">
            <summary>
            Creates a TopicInfo object.
            </summary>
            <param name="uts">topic string from resolution list</param>
            <param name="correlationID">CorrelationID object with this topic</param>
            <param name="topicId">topic ID</param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicInfo.Cid">
            <summary>
            Gets CorrelationID object with this topic.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicInfo.ToString">
            <returns>ResolvedUts if resolved or Uts</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicListImpl">
            <summary>
            Underlying implementation of TopicList used to resolve and/or create a
            list of topics.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry">
            <summary>
            Stores the information of topic entry.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry.#ctor(System.Int32,System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
             Creates an Entry object having the specified 'status', 'uts'
             and 'correlationId'. The topic id is initialized to be null
             and the topic needs resolution.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry.#ctor(System.Int32,System.String,Bloomberglp.Blpapi.CorrelationID,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Creates an Entry object having the specified 'status', 'uts',
            'correlationId', 'topicId' and 'needResolve'.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry.Status">
            <summary>
            Gets or sets resolution or topic creation status.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry.Message">
            <summary>
            Gets or sets resolution or topic creation result message
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry.Uts">
            <summary>
            Gets topic string.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry.CorrelationId">
            <summary>
            Gets CorrelationID object.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry.TopicId">
            <summary>
             Gets topic ID.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicListImpl.Entry.NeedResolve">
            <summary>
            Gets whether this topic needs resolution. The topic from
            ResolutionSuccess and TopicCreated message does not need
            resolution.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.#ctor(System.Int32)">
            <summary>
            Creates a TopicListImpl object with default resolution or topic
            creation status.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.#ctor(Bloomberglp.Blpapi.Internal.TopicListImpl)">
            <summary>
            Createsa TopicListImpl object by copying topics from the specified
            'other'.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Internal.TopicListImpl.List">
            <summary>
            Gets the list of topic entries.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.Size">
            <summary>
            Returns the number of topic entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.GetCorrelationId(System.Int32)">
            <summary>
            Returns the CorrelationId object associated with the topic at the
            specified 'index' of this list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.GetTopicString(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Returns the topic string of the topic indexed by the specified
            'correlationId'. Throws an ArgumentException if not found
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.GetTopicString(System.Int32)">
            <summary>
            Returns the topic string of the topic pointed by the specified
            'index'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.GetStatus(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Returns the status of the topic pointed by the specified
            'correlationId'. Throws an IllegalArgumentException if not found
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.GetStatus(System.Int32)">
            <summary>
            Returns the status of the topic pointed by the specified 'index'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.GetMessage(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
             Returns the result message of the topic pointed by the specified
             'correlationId'. Throws an ArgumentException if not found
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.GetMessage(System.Int32)">
            <summary>
            Returns the result message of the topic pointed by the specified
            'correlationId'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.GetIndex(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Returns the index of the topic among the list pointed by the
            specified 'correlationId'. Throws an ArgumentException if not
            found.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.Add(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Adds a topic into the list with topic string of the specified
            'topic' and the specified 'cid'. The topic id is null and it needs
            resolution.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.Add(System.String,Bloomberglp.Blpapi.CorrelationID,System.Nullable{System.Int64})">
            <summary>
            Adds a topic into the list with topic string of the specified
            'topic' the specified 'cid' and the specified 'topicId'. It does
            not need resolution and called with ResolutionSuccess or
            TopicCreated messages.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.Add(Bloomberglp.Blpapi.Internal.TopicListImpl.Entry)">
            <summary>
            Adds an entry. Throws an exception if the CorrelatioID exists.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.UpdateEntry(System.Int32,System.Int32,Bloomberglp.Blpapi.Internal.MessageImpl)">
            <summary>
            Updates the topic entry at the 'i' of the list with the specified
            'status' and 'msg'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicListImpl.UpdateEntry(Bloomberglp.Blpapi.CorrelationID,System.Int32,Bloomberglp.Blpapi.Internal.MessageImpl)">
            <summary>
            Updates the topic entry pointed by the specified 'correlationId'
            with the specified 'status' and 'msg'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicManager">
             <summary>
             This class supports topic resolution and creation. It may register the
             required service before topic resolution and creation using
             'ServiceManager'. It also support interrupting pending topic resolution
             triggered by service deregistration.
             <para>
             When resolving a list of topics(object ID resolution), the service of
             each topic is checked whether it is registered. If not, service
             registration is issued first. If the service has no resolution service,
             all topics are claimed resolution success. If the service has
             resolution service, an object ID resolution request is sent and
             response is received and decoded. Resolution success or failure message
             is generated for the resolution result of each topic.
            
             If there is ResolutionSerivce in the service schema, it will be opened
             to  send ObjectIdResolveRequest on the operation
             "ObjectIdResolveRequest" in the resolution service for topic resolution
             of publishers.
            
             If there is PublisherResolutionServiceId in the service schema,
             ResolveRequest is sent for topic resolution of publishers.
             PublisherResolutionServiceId overrides ResolutionSerivce if both exist.
             Pub-sub contribution must have PublisherResolutionServiceId for topic
             resolution; otherwise, resolution fails.
            
             After topic resolution is done, if topic creation is required, topic
             creation is claimed success directly for V3 platform and topic creation
             success message is generated for each topic creation.
            
             When a service is deregistered, all pending topic resolution on this
             service are canceled and topic resolution failure and topic creation
             failure messages (if topic creation is required) are generated.
             </para>
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.#ctor(Bloomberglp.Blpapi.Internal.ServiceManagement.IServiceManager,Bloomberglp.Blpapi.Internal.Requests.IRequestProvider,Bloomberglp.Blpapi.Internal.EventPublisher,Bloomberglp.Blpapi.Internal.SubscriberManager,Bloomberglp.Blpapi.Internal.TopicImplRegistry,System.Int32)">
            <summary>
            Creates a TopicManagerImpl object.
            </summary>
            <param name="serviceManager">used to get service or register
            service</param>
            <param name="requestProvider">used to send object ID resolution
            requests</param>
            <param name="eventPublisher">used to publish topic status events
            </param>
            <param name="subscriberManager">used to create topics</param>
            <param name="topicRegistry">find or add created topics</param>
            <param name="sessionId">for logging</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.Resolve(Bloomberglp.Blpapi.Internal.TopicListImpl,System.Boolean,System.Boolean,System.Boolean,Bloomberglp.Blpapi.Internal.Authorization.Implementation.UserHandleImpl,Bloomberglp.Blpapi.Internal.TopicResolvedCallback)">
            <summary>
            Resolves topics in in the specified 'resolutionList'. If the
            specified 'autoRegisterServices' is true, first register all
            services of topics if they are not registered. The specified
            'createToics' tells whether create topics after success resolution.
            The specified 'isCompat33x' is true then do not generate topic
            creation message after topic creation. The specified 'identity'
            provides permissions of all sent requests. The specified
            'topicResolvedCb' will be called for each completed topic
            resolution.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.DeleteTopics(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Internal.TopicImpl})">
            <summary>
            Deletes all created topics in the specified 'topics'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.GetTopic(System.Int64)">
            <summary>
            Gets the <see cref="T:Bloomberglp.Blpapi.Internal.TopicImpl"/> object from
            <see cref="T:Bloomberglp.Blpapi.Internal.TopicImplRegistry"/> based on the specified
            <paramref name="topicId"/>.
            </summary>
            <remarks>
            <para>
            This method should only return <b>created</b> topic, i.e.
            <see cref="M:Bloomberglp.Blpapi.Internal.TopicImpl.IsCreated"/> must return <c>true</c>.
            Locking the <see cref="F:Bloomberglp.Blpapi.Internal.TopicManager.mutex"/> is necessary in case the topic
            is currently being created because we want to wait until the
            creation count is incremented (<see cref="M:Bloomberglp.Blpapi.Internal.TopicImpl.IsCreated"/>),
            which is done after <c>TOPIC_CREATED</c> is published.
            </para>
            <para>
            Without the <see cref="F:Bloomberglp.Blpapi.Internal.TopicManager.mutex"/>, another thread might get the
            topic right after receiving <c>TOPIC_CREATED</c> when the topic
            creation count has not been incremented, and in this case, the
            thread will get a null topic.
            </para>
            <para>
            Note, we can't change the order of publishing <c>TOPIC_CREATED</c>
            and topic creation count increment due to another race condition.
            Refer to RDSIAPISDK-5579.
            </para>
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.RemoveTopics(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl)">
            <summary>
            Removes all pending topic resolution on the specified 'service'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.ApiResolveResultCb(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicInfo},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}},Bloomberglp.Blpapi.Internal.ResolutionInfo,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Called to handle response to ApiResolveRequest.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.ObjectIdResolveResultCb(Bloomberglp.Blpapi.Internal.Platform.Interfaces.PlatformProxy.RequestResult,Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog,Bloomberglp.Blpapi.Internal.Infrastructure.Io.ByteBuffer,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicInfo},Bloomberglp.Blpapi.Internal.ResolutionInfo,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Called to handle response to ObjectIdResolveRequest.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.OnResolutionCompletion(Bloomberglp.Blpapi.Internal.TopicInfo,Bloomberglp.Blpapi.Internal.ResolutionInfo,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Called after a topic pointed by the specified 'topic' is resolved.
            If all topics in the specified 'resolutionInfo' are resolved,
            generates events and creates topics if needed.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.CreateTopics(System.Collections.Generic.IList{Bloomberglp.Blpapi.Internal.TopicInfo},Bloomberglp.Blpapi.Internal.TopicListImpl,System.Boolean,Bloomberglp.Blpapi.Internal.TopicResolvedCallback,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Creates topics in the specified 'topicList' coming from the
            specified 'resolutionList'. If the specified
            'reportTopicCreationResult' is true, generates events for topic
            creation results. The specified 'callback' is called for each
            topic at the end.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.SetResolutionMessage(Bloomberglp.Blpapi.Internal.TopicInfo,Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.TopicString.Resolved,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Sets the resolution message in the topic pointed by the specified
            'topicInfo' with the specified 'result' and 'resolvedTopic'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.ToResolutionStatus(Bloomberglp.Blpapi.Internal.DetailedResult)">
            <summary>
            Returns resolution status from the specified 'result'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.HandleSingleResolutionResult(Bloomberglp.Blpapi.Internal.TopicInfo,Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.TopicString.Resolved,Bloomberglp.Blpapi.Internal.ResolutionInfo,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Handles the resolution result for a single topic pointed by the
            specified 'topicInfo' originally coming from the specified
            'resolutionInfo' (resolution list from resolve public methods). The
            result is the specified 'result' and the resolved topic is the
            specified 'resolvedTopic'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.FailTopicResolution(Bloomberglp.Blpapi.Internal.DetailedResult,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicInfo},Bloomberglp.Blpapi.Internal.ResolutionInfo,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Fails all topic resolution for the topics in the specified
            'topicsToResolve' originally coming from the specified
            'resultionInfo' (resolution list from resolve public methods).
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.HandleResolutionResult(Bloomberglp.Blpapi.Internal.DetailedResult,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicInfo},Bloomberglp.Blpapi.Internal.ResolutionInfo,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Handles resolution <paramref name="result"/> for topics
            in the specified <paramref name="topicsToResolve"/> originally
            coming from the specified <paramref name="resolutionInfo"/>
            (resolution list from resolve public methods) if they're unresolved.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.ProcessPostRegistrationResolveCb(Bloomberglp.Blpapi.Internal.DetailedResult,Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicInfo},Bloomberglp.Blpapi.Internal.ResolutionInfo)">
            <summary>
            Called after service registration to sends ObjectIdResolveRequest
            if resolution service exists or to deliver resolution result
            directly.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.RequestObjectIdResolve(Bloomberglp.Blpapi.Internal.ServiceImplementation.ServiceImpl,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicInfo},Bloomberglp.Blpapi.Internal.ResolutionInfo)">
            <summary>
            Sends objectIdResolveRequest to the specified 'resolutionService'
            for all topics in the 'topicInfoList' originally coming from the
            specified 'resolutionInfo'.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicManager.RequestApiResolve(System.UInt32,System.Collections.Generic.List{Bloomberglp.Blpapi.Internal.TopicInfo},Bloomberglp.Blpapi.Internal.ResolutionInfo)">
            <summary>
            Sends objectIdResolveRequest to the specified 'resolutionService'
            for all topics in the 'topicInfoList' originally coming from the
            specified 'resolutionInfo'.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicResolvedCallback">
            <summary>
            An interface to notify that the topic at the specified 'index' of
            resolution list is done with resolving
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicString">
             This component provides type-safe wrappers for the different
             "flavors" of topic strings that exist within the SDK. Each flavor has
             slightly different semantics, as follows:
              'TopicStringFromUser': topic string (unresolved) derived from client input
                (See also 'blpapi_subscriptionstring')
            
              'TopicStringResolved': topic string emitted by resolver in response to a
                resolution request
            
              'TopicStringFromBackEnd': topic string received by the SDK from the back
                end. These strings generally differ from resolved topic strings only due
                to the possible presence of 'API::' options. Within 'api' code, this is
                sometimes referred to as a UTS (Unique Topic String), although that
                term is used so loosely that at times it is also applied to other
                flavors of topic string.
            
              'TopicStringNormalized': topic string which is the canonical identifier
                for a topic. This is sometimes referred to in api code as "the unique
                part of a UTS".
            
             digraph BLPAPI_TOPICSTRING {
               subgraph cluster_starting {
                 label = "TopicStrings And Transitions";
                 "TopicStringFromUser" -> "TopicStringResolved" [label="Resolver"]
                 "TopicStringFromUser" -> "TopicStringResolved"
                    [label="blpapi::TopicStringUtil::resolveWithEcho()\n
                            (If no resolver for service)"]
                 "TopicStringResolved" -> "TopicStringFromBackEnd"
                    [label="Backend added options"]
                 "TopicStringResolved" -> "TopicStringNormalized"
                    [label="blpapi::TopicStringUtil::normalizeTopicString()"]
                 "TopicStringResolved" -> "TopicStringNormalized"
                    [label="blpapi::TopicStringUtil::normalizeLegacyContributionTopic()\n
                            (DISCOURGAED)"]
                 "TopicStringFromBackEnd" -> "TopicStringNormalized"
                    [label="blpapi::TopicStringUtil::normalizeTopicString()"]
                 "TopicStringNormalized" -> "TopicStringFromUser"
                    [label="blpapi::TopicStringUtil::asTopicStringFromUser()"]
               }
             }
            
             The implementations of these classes store their underlying data using
             a shared String instead of holding strings directly. This allows copies and
             trivial conversions between types to be performed efficiently, and reduces
             memory consumption for such copies.
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.TopicString.d_topic">
            An abstract class to hold data that is shared across all the
            TopicString types.
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicString.Normalized">
            This class represents a normalized topic string which uniquely
            identifies a topic. Note that normalized topic strings do not typically
            include any options.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Normalized.#ctor(System.String)">
            Creates a new 'TopicString.Normalized' containing the specified
            'topic'.  The behavior is undefined unless the 'topic' is
            well-formed (i.e 'TopicStringUtil::isWellFormedTopic(topic)' returns
            'true').
            @param topic
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicString.FromUser">
            This class provides a simple type-safe wrapper over topic strings that
            come from users. Such topic strings have not (necessarily) been resolved
            and should be considered untrusted user input.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.FromUser.#ctor(System.String)">
            Creates a new 'TopicString.FromUser' containing the specified
            'topic'.  The behavior is undefined unless the 'topic' is
            well-formed (i.e 'TopicStringUtil::isWellFormedTopic(topic)' returns
            'true').
            @param topic
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicString.FromBackEnd">
             This class provides a type-safe wrapper for a topic string that has been
             both resolved and extended by the Bloomberg infrastructure (which
             generally involves addition or massaging of 'API::' options).
            
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.FromBackEnd.#ctor(System.String)">
            Creates a new 'TopicString.FromBackEnd' containing the specified
            'topic'.  The behavior is undefined unless the 'topic' is
            well-formed (i.e 'TopicStringUtil::isWellFormedTopic(topic)' returns
            'true').
            @param topic
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicString.Resolved">
            This value-semantic class provides a type-safe wrapper for a topic
            string emitted by a resolver. Note that client SDKs generally do not
            receive topic strings of this type: as soon as a resolver sends a topic
            string the Bloomberg infrastructure transforms it into a "back end topic
            string", below, which is passed to downstream users.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Resolved.#ctor(System.String)">
            Creates a new 'TopicString.Resolved' containing the specified
            'topic'.  The behavior is undefined unless the 'topic' is
            well-formed (i.e 'TopicStringUtil::isWellFormedTopic(topic)' returns
            'true').
            @param topic
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.TopicString.Util">
            This class provides utility functions to parse topic strings and
            convert topic strings from one form to another.
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.getServiceName(Bloomberglp.Blpapi.Internal.TopicString.FromUser)">
            Return the service name associated with the specified 'topic'.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.getServiceName(Bloomberglp.Blpapi.Internal.TopicString.Resolved)">
            Return the service name associated with the specified 'topic'.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.getServiceName(Bloomberglp.Blpapi.Internal.TopicString.Normalized)">
            Return the service name associated with the specified 'topic'.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.getServiceName(Bloomberglp.Blpapi.Internal.TopicString.FromBackEnd)">
            Return the service name associated with the specified 'topic'.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.endOfServiceName(System.String)">
            Returns the position of the slash following the service name in the
            specified `topic`, or null if topic does not have the structure
            `^//[^/]+/[^/]+/ *`.
            @param topicString to parse
            @return service name
            throws IllegalArgumentException: If cant parse service name from
                                             topic
            throws IndexOutOfBoundsException
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.qualifySubscriptionString(System.String,System.String,System.String)">
            Return the topic string resulting from interpreting the specified
            'subscriptionString' in the context of the specified 'serviceName',
            which is prepended if 'subscriptionString' does not begin with '//',
            and the specified 'topicPrefix', which is inserted between
            'serviceName' and 'subscriptionString' if 'subscriptionString'
            (also) does not begin with '/'. Note that, in order to construct a
            sensible topic string, 'serviceName' should be of the form
            '//foo/bar' and 'topicPrefix' should be of the form '/baz/'. For
            example when the 'subscriptionString' is set to 'IBM US Equity', the
            'serviceName' is set to '//blp/mktdata', and 'topicPrefix' is set to
            '/ticker/', then the qualified topic string returned by this
            function in this case will be '//blp/mktdata/ticker/IBM US
            Equity'.The behavior is undefined unless 'subscriptionString' is
            valid i.e 'isValidSubscriptionString(subscriptionString)' returns
            'true'.
            @param subscriptionString
            @param serviceName
            @param topicPrefix
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.nomalizeLegacyContributionTopic(Bloomberglp.Blpapi.Internal.TopicString.Resolved)">
            Return the specified 'topic' string without stripping any options
            as a normalized topic string.
            This is a hack for old contributions which use object-id resolution.
            object-id resolved topics can have ? marks as a valid character in
            the unique part of the topic string. Hence we skip normalization and
            use the resolved topic as the normalized topic. This works because
            there are no subscriptions to old contribution topics.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.extractTopic(Bloomberglp.Blpapi.Internal.TopicString.Resolved)">
            Return the part *after* service name from the specified 'topic'.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.extractTopic(Bloomberglp.Blpapi.Internal.TopicString.Normalized)">
            Return the part *after* service name from the specified 'topic'.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.extractTopic(Bloomberglp.Blpapi.Internal.TopicString.FromBackEnd)">
            Return the part *after* service name from the specified 'topic'.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.normalizeTopicString(Bloomberglp.Blpapi.Internal.TopicString.Resolved)">
            Return the specified 'topic' stripped of all the options.
            Note that no case normalization of service name part is done by this
            function.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.normalizeTopicString(Bloomberglp.Blpapi.Internal.TopicString.FromBackEnd)">
            Return the specified 'topic' stripped of all the options.
            Note that no case normalization of service name part is done by this
            function.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.isTopicStringReserved(Bloomberglp.Blpapi.Internal.TopicString.FromUser)">
            Return 'true' if the specified 'topicString' is reserved for
            internal use by Bloomberg.
            Note that Bloomberg currently reserves all strings of the form
            '(service name)/BLP:' for internal use.
            @param topicString
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.isTopicAnnouncementTopic(Bloomberglp.Blpapi.Internal.TopicString.Normalized)">
            Return 'true' if the specified 'topic' contains a BLP internal topic
            announcement topic.
            @param topicString
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.asTopicStringFromUser(Bloomberglp.Blpapi.Internal.TopicString.Normalized)">
            Convert a normalized topic string to a user topic string
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.resolveWithEcho(Bloomberglp.Blpapi.Internal.TopicString.FromUser)">
            Return the user topic string specified by 'topicString' as the
            resolved topic string. This is a resolver which does not alter the
            user topic string and returns the same topic as resolved topic.
            @param topic
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.cloneWithServiceName(Bloomberglp.Blpapi.Internal.TopicString.Normalized,System.String)">
            Return a copy of the specified normalized topic string 'topic' with
            the service name changed to the specified 'svcName'.
            @param topic
            @param svcName
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.isWellFormedTopic(System.String)">
            Return 'true' if the specified 'data' matches the pattern
            '^//[^/]+/[^/]+/.+'. Note that the various 'TopicString' classes
            should be constructed only from strings that match this pattern.
            @param topicString
            @return
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.TopicString.Util.AppendFilterIfAbsent(System.String,System.String)">
            <summary>
            Create a subscription string by appending the
            <paramref name="filter"/> to the
            <paramref name="subscriptionString"/>, unless it is already
            present.
            </summary>
            <param name="subscriptionString">
            String representing the data to be subscribed. Assumed to be a
            valid subscription string, as specified by
            <see cref="M:Bloomberglp.Blpapi.Subscription.isValidSubscriptionString(System.String)" />.
            </param>
            <param name="filter">
            Filter to append to the subscription string.
            </param>
            <returns>
            Subscription string with the <paramref name="filter"/>
            appended to it.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.UserHandleRegistry">
            <summary>
            Summary description for IdentityRegistry.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.VersionInfoImpl">
            <summary>
            Summary description for VersionInfoImpl.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcAdapter">
            <summary>
            Allows the SDK to communicate with the APINI (API Network Information)
            service. This service gives the SDK the endpoints the application will
            need to connect to when using ZFP over leased lines.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcAdapter.SdkSoftwareType">
            <summary>
            The software type for the SDK which will always be 8 for SDK-ZFP.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcAdapter.AreaAProfile">
            <summary>
            Indicates the connection is going over a private IP and not the
            internet.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcAdapter.SdkHostInfo">
            <summary>
            Provides host information needed by apinisvc.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcAdapter.GetAddressesFromPlaylist(System.Collections.Generic.IReadOnlyList{Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Apinisvc.HostGroup})">
            <summary>
            Creates a list of <see cref="T:Bloomberglp.Blpapi.SessionOptions.ServerAddress"/>
            from the given <paramref name="playlist"/>
            </summary>
            <param name="playlist">
            The playlist received from the wire.
            </param>
            <returns>
            A list with a maximum number of addresses specified by
            <paramref name="playlist"/> sorted by priority.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcAdapter.CreateApiniServiceRequest(System.String)">
            <summary>
            Creates a request that can be sent to apinisvc which will return
            a playlist containing the endpoints to use for ZFP over lease
            lines.
            </summary>
            <param name="taskName">
            Indicates the task for the outgoing request.
            </param>
            <returns>
            A request containing a <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.MessageProlog"/> and a payload
            ready to be sent to the apinisvc service.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcAdapter.HandleApinisvcResponse(Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcResponse)">
            <summary>
            Provides a callback for Apinisvc requests.
            </summary>
            <param name="apiniResponse">
            The response received from Apini.
            </param>
            <returns>
            A list of <see cref="T:Bloomberglp.Blpapi.SessionOptions.ServerAddress"/> received from
            Apini.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ZeroFootprint.ApinisvcAdapter.GetAddressesFromConfig(Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Apinisvc.PlatformConfigResponse,Bloomberglp.Blpapi.Internal.Requests.RequestGuid)">
            <summary>
            Retrieves a list of <see cref="T:Bloomberglp.Blpapi.SessionOptions.ServerAddress"/>
            from the given <see cref="T:Bloomberglp.Blpapi.Internal.Infrastructure.Messages.Apinisvc.PlatformConfigResponse"/>.
            </summary>
            <param name="config">
            The playlist configuration received from Apinisvc.
            </param>
            <param name="guid">
            The <see cref="T:Bloomberglp.Blpapi.Internal.Requests.RequestGuid"/> from the response containing
            <paramref name="config"/>.
            </param>
            <exception cref="T:System.Exception">
            Thrown when the config is malformed or missing elements.
            </exception>
            <returns>
            A list of endpoints to use as defined in the
            <paramref name="config.."/>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Internal.ZeroFootprint.ZfpOptionsGenerator.GetZfpOptionsForLeasedLines(Bloomberglp.Blpapi.ZfpUtil.Remote,Bloomberglp.Blpapi.TlsOptions)">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.SessionOptions"/> object for applications
            that leverages private leased lines to Bloomberg network. The
            <see cref="T:Bloomberglp.Blpapi.SessionOptions"/> object is only valid for private
            leased line connectivity.
            <para>
            This functions starts and stops the <see cref="T:Bloomberglp.Blpapi.Internal.ISessionImpl"/>
            provided in the constructor which will make this fail if called
            more than once.
            </para>
            </summary>
            <param name="remote">
            Indicates which port the session will be connecting to.
            </param>
            <param name="tlsOptions">
            Client credentials used to establish secure connections to
            endpoints.
            </param>
            <returns>
            A <see cref="T:Bloomberglp.Blpapi.SessionOptions"/> object that can be used to start a
            <see cref="T:Bloomberglp.Blpapi.Session"/> for leased lines.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.InvalidConversionException">
             <summary> The exception that is thrown when a value is converted into
             a non-compatible data type.
             </summary>
            
            
             <threadsafety static="true" instance="false"/>
            
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.InvalidConversionException.#ctor">
            <summary>Construct the exception without a description.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.InvalidConversionException.#ctor(System.String)">
            <summary>Construct the exception with the description.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.InvalidConversionException.#ctor(System.String,System.Exception)">
            <summary>Construct the exception with the description and the cause
            exception.
            </summary>
            <param name="description"></param>
            <param name="cause"></param>
        </member>
        <member name="P:Bloomberglp.Blpapi.InvalidConversionException.Description">
            <summary> Return the description.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.InvalidRequestException">
             <summary> This exception is thrown when an API client attempts to send a request
             which is not valid by the request schema.
             </summary>
            
            
             <threadsafety static="true" instance="false"/>
            
             <author>  Siva Somu (ssomu)
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.InvalidRequestException.#ctor">
            <summary>Construct the exception without a description.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.InvalidRequestException.#ctor(System.String)">
            <summary>Construct the exception with the description.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.InvalidRequestException.#ctor(System.String,System.Exception)">
            <summary>Construct the exception with the description and the cause
            exception.
            </summary>
            <param name="description"></param>
            <param name="cause"></param>
        </member>
        <member name="P:Bloomberglp.Blpapi.InvalidRequestException.Description">
            <summary> Return the description.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.IProviderSession">
            <summary>
            A session that can be used for providing services.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.RegisterService(System.String,Bloomberglp.Blpapi.Identity)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.RegisterService(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.ServiceRegistrationOptions)"/>
            with null <see cref="T:Bloomberglp.Blpapi.ServiceRegistrationOptions"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.RegisterService(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.ServiceRegistrationOptions)">
            <summary>
            Attempts to register the service and blocks until the service is
            either registered successfully or has failed to be registered.
            <para>
            This method does not return until a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> event has been
            generated. Note that if the session was created in asynchronous
            mode, the event may be processed before the function returns.
            </para>
            <para>
            When <paramref name="providerIdentity"/> is null the session
            identity will be used if it's been authorized.
            </para>
            </summary>
            <param name="serviceName">
            The URI of the service to register.
            <para>
            The URI must begin with a full qualified service name. That is, it
            must begin with "//{namespace}/{service-name}[/]". Any portion of
            the URI after the service name is ignored.
            </para>
            </param>
            <param name="providerIdentity">
            Used to verify permissions to provide the service being registered.
            </param>
            <param name="registrationOptions">
            Specify options like group ID, service priority and parts of the
            service being registered.
            </param>
            <returns>
            Returns <c>true</c> if the service is registered successfully and
            <c>false</c> if the service failed to register.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity)">
            <summary>
            This is the same calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.ServiceRegistrationOptions)"/>
            with null <see cref="T:Bloomberglp.Blpapi.ServiceRegistrationOptions"/> and null <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.ServiceRegistrationOptions)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.ServiceRegistrationOptions)"/>
            with null <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.ServiceRegistrationOptions)"/>
            with null <see cref="T:Bloomberglp.Blpapi.ServiceRegistrationOptions"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.ServiceRegistrationOptions)">
            <summary>
            Begins the process of registering a service and and returns
            immediately.
            <para>
            The application must monitor events for a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> event which will be
            generated once the service has been successfully registered or
            registration has failed.
            </para>
            <para>
            When <paramref name="providerIdentity"/> is null the session
            identity will be used if it's been authorized.
            </para>
            </summary>
            <param name="uri">
            The URI of the service to register.
            <para>
            The URI must begin with a full qualified service name. That is, it
            must begin with "//{namespace}/{service-name}[/]". Any portion of
            the URI after the service name is ignored.
            </para>
            </param>
            <param name="providerIdentity">
            Used to verify permissions to provide the service being registered.
            </param>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that will identify
            <see cref="T:Bloomberglp.Blpapi.Message"/> objects generated as a result of this call.
            <para>
            Must not already be in use.
            </para>
            </param>
            <param name="registrationOptions">
            Specify options like group ID, service priority and parts of the
            service being registered.
            </param>
            <returns>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that will identify
            <see cref="T:Bloomberglp.Blpapi.Message"/> objects generated as a result of this call.
            This will be <paramref name="correlationId"/> if it was provided.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.ActivateSubServiceCodeRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Activates sub-service code range of an already registered service.
            </summary>
            <param name="uri">The URI of the service.</param>
            <param name="begin">
            The begining of the sub-service code range that the service will
            be advertising, inclusive. Must be between 0 and 2^24.
            </param>
            <param name="end">
            The end of the sub-serivce code range that the service will be
            advertising, inclusive. Must be between 0 and 2^24.
            </param>
            <param name="priority">
            The priority of the service. Numerically greater values indicate
            higher priorities. Must be between 0 and 2^24.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.DeactivateSubServiceCodeRange(System.String,System.Int32,System.Int32)">
            <summary>
            De-activates the specified sub-service code range from an already
            registered service.
            </summary>
            <param name="uri">The URI of the service.</param>
            <param name="begin">
            The begining of the sub-service code range that the service will
            be advertising, inclusive. Must be between 0 and 2^24.
            </param>
            <param name="end">
            The end of the sub-serivce code range that the service will be
            advertising, inclusive. Must be between 0 and 2^24.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.DeregisterService(System.String)">
            <summary>
            Deregisters a service.
            <para>
            The identity in the service registration is reused to verify
            permissions for deregistration. If the service is in pending
            registration, cancels the pending registration. If the service is
            registered, sends a deregistration request; generates
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS"/> events containing a
            TopicUnsubscribed message for each subscribed topic, a
            TopicDeactivated message for each active topic and a TopicDeleted
            for each created topic; generates
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.REQUEST_STATUS"/> events containing
            a RequestFailure message for each pending incoming request; and
            generates a <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> event
            containing a ServiceDeregistered message. All published events on
            topics created on this service will be ignored after this method
            returns.
            </para>
            </summary>
            <param name="uri">
            The URI of the service to be deregistered.
            </param>
            <returns>
            If the service is not registered nor in pending registration,
            returns <c>false</c>; returns <c>true</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.Publish(Bloomberglp.Blpapi.Event)">
            <summary>
            Publish the specified <paramref name="event"/>.
            <para>
            <paramref name="event"/> must be a publish type.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)"/>
            with <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES"/> and null
            <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)">
            <summary>
            Resolves a list of topics and updates them with the results of the
            resolution process.
            <para>
            Before this method returns one or more
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS"/> events and, if
            <paramref name="resolveMode"/> is <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/>,
            zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> events are
            generated. If this is an asynchronous session then these events may
            be processed by the registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/>
            before this method has returned.
            </para>
            </summary>
            <param name="resolutionList">
            A list containing topics to be resolved.
            <para>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> objects in this list must be unique
            and not in use.
            </para>
            </param>
            <param name="resolveMode">
            Indicates if the services referenced in <paramref name="resolutionList"/>
            should be registered or not.
            <para>
            If <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES"/> then all the
            services referenced in the topics in <paramref name="resolutionList"/>
            must already have been registered.
            </para>
            <para>
            If <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/> then
            <paramref name="providerIdentity"/> will be used used to attempt
            to register any services referenced in the topics in
            <paramref name="resolutionList"/> that have not already been registered.
            </para>
            </param>
            <param name="providerIdentity">
            Used to verify permissions to provide the service being registered
            when <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/>.
            <para>
            If null the session identity will be used if it's been authorized.
            </para>
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)"/>
            with <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES"/> and null
            <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)">
            <summary>
            Creates the topics in <paramref name="topicList"/> and updates
            the entries with the results of the creation and resolution process.
            <para>
            Before this method returns one or more
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS"/> events and, if
            <paramref name="resolveMode"/> is <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/>,
            zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> events are
            generated. If this is an asynchronous session then these events may
            be processed by the registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/>
            before this method has returned.
            </para>
            </summary>
            <param name="topicList">
            A list containing topics to be created.
            <para>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> objects in this list must be unique
            and not in use.
            </para>
            </param>
            <param name="resolveMode">
            Indicates if the services referenced in <paramref name="topicList"/>
            should be registered or not.
            <para>
            If <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES"/> then all the
            services referenced in the topics in <paramref name="topicList"/>
            must already have been registered.
            </para>
            <para>
            If <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/> then
            <paramref name="providerIdentity"/> will be used used to attempt
            to register any services referenced in the topics in
            <paramref name="topicList"/> that have not already been registered.
            </para>
            </param>
            <param name="providerIdentity">
            Used to verify permissions to provide the service being registered
            when <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/>.
            <para>
            If null the session identity will be used if it's been authorized.
            </para>
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)"/>
            with <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES"/> and null
            <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)">
            <summary>
            Begins the resolution of topics.
            <para>
            Before this method returns one or more
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS"/> events and, if
            <paramref name="resolveMode"/> is <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/>,
            zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> events are
            generated. If this is an asynchronous session then these events may
            be processed by the registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/>
            before this method has returned.
            </para>
            </summary>
            <param name="resolutionList">
            A list containing topics to be resolved.
            <para>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> objects in this list must be unique
            and not in use.
            </para>
            </param>
            <param name="resolveMode">
            Indicates if the services referenced in <paramref name="resolutionList"/>
            should be registered or not.
            <para>
            If <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES"/> then all the
            services referenced in the topics in <paramref name="resolutionList"/>
            must already have been registered.
            </para>
            <para>
            If <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/> then
            <paramref name="providerIdentity"/> will be used used to attempt
            to register any services referenced in the topics in
            <paramref name="resolutionList"/> that have not already been registered.
            </para>
            </param>
            <param name="providerIdentity">
            Used to verify permissions to provide the service being registered
            when <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/>.
            <para>
            If null the session identity will be used if it's been authorized.
            </para>
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)"/>
            with <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES"/> and null
            <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)">
            <summary>
            Begins the creation of topics.
            <para>
            Before this method returns one or more
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS"/> events and, if
            <paramref name="resolveMode"/> is <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/>,
            zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS"/> events are
            generated. If this is an asynchronous session then these events may
            be processed by the registered <see cref="T:Bloomberglp.Blpapi.EventHandler"/>
            before this method has returned.
            </para>
            </summary>
            <param name="topicList">
            A list containing topics to be created.
            <para>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> objects in this list must be unique
            and not in use.
            </para>
            </param>
            <param name="resolveMode">
            Indicates if the services referenced in <paramref name="topicList"/>
            should be registered or not.
            <para>
            If <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES"/> then all the
            services referenced in the topics in <paramref name="topicList"/>
            must already have been registered.
            </para>
            <para>
            If <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/> then
            <paramref name="providerIdentity"/> will be used used to attempt
            to register any services referenced in the topics in
            <paramref name="topicList"/> that have not already been registered.
            </para>
            </param>
            <param name="providerIdentity">
            Used to verify permissions to provide the service being registered
            when <paramref name="resolveMode"/> is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES"/>.
            <para>
            If null the session identity will be used if it's been authorized.
            </para>
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.GetTopic(Bloomberglp.Blpapi.Message)">
            <summary>
            Finds a previously created <see cref="T:Bloomberglp.Blpapi.Topic"/> related to
            a <see cref="T:Bloomberglp.Blpapi.Message"/>.
            </summary>
            <param name="message">
            Must be one of the following types:
            TopicCreated, TopicActivated, TopicDeactivated, TopicSubscribed
            TopicUnsubscribed, TopicRecap.
            </param>
            <returns>
            The previously created <see cref="T:Bloomberglp.Blpapi.Topic"/> or <c>null</c>
            if the topic hasn't been created.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.DeleteTopic(Bloomberglp.Blpapi.Topic)">
            <summary>
            Removes one reference from <paramref name="topic"/>.
            <para>
            If this function has been called the same number of times that
            <paramref name="topic"/> was created by <see cref="M:Bloomberglp.Blpapi.IProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)"/>,
            then <paramref name="topic"/> is deleted. A 'TopicDeleted' message is
            delivered, preceded by 'TopicDeactivated' if <paramref name="topic"/>
            was subscribed.
            </para>
            <para>
            A provider must not publish a message on a deleted topic.
            </para>
            <param name="topic">
            The <see cref="T:Bloomberglp.Blpapi.Topic"/> to be deleted.
            <para>
            The topic must not be deleted more times than it has been created.
            </para>
            </param>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.DeleteTopics(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Topic})">
            <summary>
            Deletes each topic in <paramref name="topics"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.SendResponse(Bloomberglp.Blpapi.Event)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.IProviderSession.SendResponse(Bloomberglp.Blpapi.Event,System.Boolean)"/>
            with <c>false</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.SendResponse(Bloomberglp.Blpapi.Event,System.Boolean)">
            <summary>
            Sends a response event for a previously received request.
            </summary>
            <param name="event">
            The <see cref="T:Bloomberglp.Blpapi.Event"/> to be sent.
            <para>
            Must be a response event.
            </para>
            </param>
            <param name="isPartialResponse">
            If <c>true</c> indicates that a response is partial and additional
            response events should be expected.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IProviderSession.SetEventHandler(Bloomberglp.Blpapi.ProviderEventHandler,Bloomberglp.Blpapi.Event.EventType)">
            <summary>
            Sets an <see cref="T:Bloomberglp.Blpapi.EventHandler"/> to use for specific <see cref="T:Bloomberglp.Blpapi.Event.EventType"/>
            types.
            </summary>
            <param name="eventHandler">
            A new event handler to use instead of the event handler provided to
            the constructor.
            </param>
            <param name="eventType">
            A type of events to be delivered to <paramref name="eventHandler"/>.
            </param>
        </member>
        <member name="T:Bloomberglp.Blpapi.IResolutionList">
            <summary>
            A list of topics to be resolved.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.Size">
            <summary>
            The number of elements in this list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.Add(System.String)">
            <summary>
            Add a topic to the list.
            </summary>
            <param name="topic">
            The topic which needs to be resolved.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.Add(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Add a topic to this list.
            </summary>
            <param name="topic">
            The topic which needs to be resolved.
            </param>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.Add(Bloomberglp.Blpapi.Message)">
            <summary>
            Adds the topic from a <see cref="M:Bloomberglp.Blpapi.IResolutionList.Message(Bloomberglp.Blpapi.CorrelationID)"/> to this list.
            </summary>
            <param name="message">
            A "TopicSubscribed" <see cref="M:Bloomberglp.Blpapi.IResolutionList.Message(Bloomberglp.Blpapi.CorrelationID)"/>.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.Add(Bloomberglp.Blpapi.Message,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Adds the topic from a <see cref="M:Bloomberglp.Blpapi.IResolutionList.Message(Bloomberglp.Blpapi.CorrelationID)"/> to this list.
            </summary>
            <param name="message">
            A "TopicSubscribed" <see cref="M:Bloomberglp.Blpapi.IResolutionList.Message(Bloomberglp.Blpapi.CorrelationID)"/>.
            </param>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.CorrelationIdAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> of an entry at the specified
            <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.TopicString(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Gets the topic of an entry.
            </summary>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.TopicStringAt(System.Int32)">
            <summary>
            Gets the topic of an entry at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.Status(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Return the <see cref="T:Bloomberglp.Blpapi.ResolutionStatus"/> status of an entry.
            </summary>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.StatusAt(System.Int32)">
            <summary>
            Return the <see cref="T:Bloomberglp.Blpapi.ResolutionStatus"/> of an entry at the specified
            index.
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.Message(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Gets the result of a topic resolution.
            <para>
            The message returned can be used when creating an instance
            of <see cref="T:Bloomberglp.Blpapi.Topic"/>.
            </para>
            </summary>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
            <returns>
            The <see cref="M:Bloomberglp.Blpapi.IResolutionList.Message(Bloomberglp.Blpapi.CorrelationID)"/> received during resolution of the topic.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.IResolutionList.MessageAt(System.Int32)">
            <summary>
            Gets the result of resolving the topic in the entry specified by
            <paramref name="index"/>.
            <para>
            The message returned can be used when creating an instance
            of <see cref="T:Bloomberglp.Blpapi.Topic"/>.
            </para>
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
            <returns>
            The <see cref="M:Bloomberglp.Blpapi.IResolutionList.Message(Bloomberglp.Blpapi.CorrelationID)"/> received during resolution of the topic.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.ISession">
            <summary>
            A session for making requests and subscriptions to services.
            <para>
            Sessions manage access to services either by requests and responses or
            subscriptions. A Session can dispatch events and replies in either a
            synchronous or asynchronous mode. The mode of a <see cref="T:Bloomberglp.Blpapi.Session"/>
            is determined when it is constructed and cannot be changed subsequently.
            </para>
            <para>
            A session is asynchronous if an <see cref="T:Bloomberglp.Blpapi.EventHandler"/> is supplied
            when it is constructed. <see cref="M:Bloomberglp.Blpapi.ISession.SetEventHandler(Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.Event.EventType)"/>
            may be used to adjust the way events are handled subsequently and
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.NextEvent"/> may not be called. All incoming
            events are delivered to the event handler(s) supplied on construction
            or subsequently added with using <see cref="M:Bloomberglp.Blpapi.Session.SetEventHandler(Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.Event.EventType)"/>.
            </para>
            <para>
            A session is synchronous if an <see cref="T:Bloomberglp.Blpapi.EventHandler"/> is not supplied
            when it is constructed. <see cref="M:Bloomberglp.Blpapi.AbstractSession.NextEvent"/>
            must be called to read incoming events and
            <see cref="M:Bloomberglp.Blpapi.Session.SetEventHandler(Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.Event.EventType)"/>
            may not be called.
            </para>
            <para>
            When using an asynchronous <see cref="T:Bloomberglp.Blpapi.Session"/> the application must be aware that
            because the callbacks are generated from another thread they may be
            processed before the call which generates them has returned. For example,
            the <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS"/> <see cref="T:Bloomberglp.Blpapi.Event"/>
            generated by <see cref="M:Bloomberglp.Blpapi.AbstractSession.StartAsync"/> may be processed
            before <see cref="M:Bloomberglp.Blpapi.AbstractSession.StartAsync"/> returns (even though
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.StartAsync"/> itself will not block).
            </para>
            <para>
            This becomes more significant when session-generated <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>
            objects are in use. For example, if a call to
            <see cref="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)"/> which
            returns a session-generated <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> has not completed
            before the first events which contain that <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>
            arrive the application may not be able to interpret those events correctly.
            For this reason, it is preferable to use a user generated
            <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> when using an asynchronous <see cref="T:Bloomberglp.Blpapi.Session"/>.
            This issue does not arise when using a synchronous <see cref="T:Bloomberglp.Blpapi.Session"/>
            as long as the calls to <see cref="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)"/>
            etc are made on the same thread as the calls to
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.NextEvent"/>.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.RequestTemplate,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Send a request based on a <see cref="T:Bloomberglp.Blpapi.RequestTemplate"/>.
            <para>
            A successful request will generate zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.PARTIAL_RESPONSE"/>
            events followed by exactly one <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE"/>
            event. Once the final <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE"/> event
            has been received the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> associated
            with this request may be re-used. If the request fails at any
            stage a <see cref="F:Bloomberglp.Blpapi.Event.EventType.REQUEST_STATUS"/> will be
            generated after which the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> associated
            with the request may be re-used.
            </para>
            </summary>
            <param name="requestTemplate">
            The request template used for sending a request.
            </param>
            <param name="correlationId">
            The correlation ID used for delivering a response.
            <para>
            Must not already be in use.
            </para>
            </param>
            <returns>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that will identify
            <see cref="T:Bloomberglp.Blpapi.Message"/> objects generated as a result of this call.
            This will be <paramref name="correlationId"/> if it was provided.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.RequestTemplate)">
            <summary>
            This is the same as calling <see cref="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.RequestTemplate,Bloomberglp.Blpapi.CorrelationID)"/>
            with null <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Identity)">
            <summary>
            Create a snapshot service request template for getting subscription
            data.
            <para>
            When creating a snapshot requests a subscription is established, but
            messages are sent to the application only when requested. This reduces
            latency for receiving the latest data when compared to starting a new
            subscription each time.
            </para>
            </summary>
            <param name="subscriptionString">
            A subscription string used to create a request template.
            <para>
            Must be non-null and not empty.
            </para>
            </param>
            <param name="statusCid">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> used for delivering request template
            status updates.
            <para>
            Must not already be in use.
            </para>
            </param>
            <param name="identity">
            The <see cref="T:Bloomberglp.Blpapi.Identity"/> used to authorize access to the data for
            this request template. If null the session identity will be used if
            it's been authorized.
            </param>
            <returns>
            A created <see cref="T:Bloomberglp.Blpapi.RequestTemplate"/>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Identity)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription})">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/> and null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity)">
            <summary>
            This is the same calling
            <see cref="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)"/>
            with null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
            <summary>
            Initiates a request to receive asynchronous updates to the
            specified topics.
            <para>
            Upon completion of this request a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event will be published for
            each topic in the subscription list containing a message with the result
            for one topic. A "SubscriptionStarted" message will be generated if the
            subscription was successfully initiated. If the subscription fails
            for any topic a "SubscriptionFailure" message containing the failure
            reason will be generated.
            </para>
            <para>
            Any subscriptions in <paramref name="subscriptionList"/> which were
            not given a application generated <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> will
            have a session generated <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> set.
            </para>
            <para>
            Multiple subscriptions to the same subscription string are valid and each
            will have their own, unique <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>.
            </para>
            <para>
            In the case of an exception none of the subscriptions will be processed.
            </para>
            </summary>
            <param name="subscriptionList">
            A list of subscription strings to subscribe.
            <para>
            Must not be null or empty.
            </para>
            <para>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> objects in the subscriptions must
            be unique and not in use.
            </para>
            </param>
            <param name="identity">
            The authorized user for whom this subscription is being initiated.
            <para>
            If null the session identity will be used if its been authorized.
            </para>
            </param>
            <param name="requestLabel">
            A label which will be recorded along with any diagnostics for this operation.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription})">
            <summary>
            Modifies subscriptions to reflect the modified options specified
            for them.
            </summary>
            <para>
            Each entry has a <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> which must identify an
            active subscription. The modified options replace the current
            options for that subscription and a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event will be
            generated before the first update based on the new options.
            </para>
            <param name="subscriptionList">
            A list of active subscriptions whose options need to be changed.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
            <summary>
            Modifies subscriptions to reflect the modified options specified
            for them.
            </summary>
            <para>
            Each entry has a <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> which must identify an
            active subscription. The modified options replace the current
            options for that subscription and a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event will be
            generated before the first update based on the new options.
            </para>
            <param name="subscriptionList">
            A list of active subscriptions whose options need to be changed.
            </param>
            <param name="requestLabel">
            A label which will be recorded along with any diagnostics for this
            operation.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Int32)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Int32,System.String)"/>
            with null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Int32,System.String)">
            <summary>
            Modifies subscriptions to reflect the modified options specified
            for them.
            </summary>
            <para>
            Each entry has a <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> which must identify an
            active subscription. The modified options replace the current
            options for that subscription and a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event will be
            generated before the first update based on the new options. The
            message of the event contains <paramref name="resubId"/>.
            </para>
            <param name="subscriptionList">
            A list of active subscriptions whose options need to be changed.
            </param>
            <param name="resubId">
            Identifies this request and appears in the
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event.
            </param>
            <param name="requestLabel">
            A label which will be recorded along with any diagnostics for this
            operation.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Unsubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription})">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.Unsubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)"/>
            with null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.Unsubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
            <summary>
            Cancel a list of subscriptions.
            <para>
            If the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> of any entry in the list does
            not identify a current subscription then that entry is ignored.
            </para>
            <para>
            See <see cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID)"/> for more
            information on the handling of cancel requests.
            </para>
            </summary>
            <param name="subscriptionList">
            A list of active subscription which will be canceled.
            </param>
            <param name="requestLabel">
            A label which will be recorded along with any diagnostics for this
            operation.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.GetSubscriptionStatus(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Returns the subscription status for a given <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>.
            </summary>
            <param name="correlationId">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> for which the subscription status
            is requested.
            <para>
            Must have an associated subscription.
            </para>
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.GetSubscriptionString(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Returns the subscription string for a given <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>.
            </summary>
            <param name="correlationId">
            The  a given <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>. for which the
            subscription string is requested.
            <para>
            Must have an associated subscription.
            </para>
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/>, null <see cref="T:Bloomberglp.Blpapi.IEventQueue"/>
            and null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/> and null <see cref="T:Bloomberglp.Blpapi.IEventQueue"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with null <see cref="T:Bloomberglp.Blpapi.IEventQueue"/> and null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with null <see cref="T:Bloomberglp.Blpapi.IEventQueue"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/> and null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with null <see cref="T:Bloomberglp.Blpapi.Identity"/>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/>
            with null request label.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            Sends a request to a service.
            <para>
            A successful request will generate zero or more
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.PARTIAL_RESPONSE"/> events followed by
            exactly one <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE"/> event. Once the
            final <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE"/> event has been
            received the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> associated with this
            request may be re-used. If the request fails at any stage a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.REQUEST_STATUS"/> event will be generated
            after which the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> associated with the
            request may be re-used.
            </para>
            <para>
            The number of enqueued requests must not exceed the amount specified
            in <see cref="P:Bloomberglp.Blpapi.SessionOptions.MaxPendingRequests"/> when this session
            was created.
            </para>
            </summary>
            <param name="request">
            Filled-in request that needs to be sent to the service.
            </param>
            <param name="identity">
            The user whose privileges are to be used for this request.
            <para>
            If null then the session identity will be used if authorized.
            </para>
            </param>
            <param name="eventQueue">
            <see cref="T:Bloomberglp.Blpapi.IEventQueue"/> to be used to receive response events for
            this request. If null, events for this request are delivered to the
            session's event queue.
            </param>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to be used to match the response.
            <para>
            If null then an internal <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> is generated.
            </para>
            <para>
            Must not already be in use.
            </para>
            </param>
            <param name="requestLabel">
            A label which will be recorded along with any diagnostics for this
            operation.
            </param>
            <returns>
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that will identify
            <see cref="T:Bloomberglp.Blpapi.Message"/> objects generated as a result of this call.
            This will be <paramref name="correlationId"/> if it was provided.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.SetEventHandler(Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.Event.EventType)">
            <summary>
            Set event specific event handlers.
            </summary>
            <param name="eventHandler">
            New event handler to replace default event handler provided at
            construction.
            </param>
            <param name="eventType">
            Type of events to be delivered to the new handler.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ISession.GetSubscriptions">
            <summary>
            Returns an enumerable collection of all subscriptions in this
            session.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ITopicList">
            <summary>
            A list of topics to be created.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.ITopicList.Size">
            <summary>
            The number of elements in this list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.Add(System.String)">
            <summary>
            Add a topic to the list.
            </summary>
            <param name="topic">
            The topic which needs to be created.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.Add(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Add a topic to this list.
            </summary>
            <param name="topic">
            The topic which needs to be created.
            </param>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.Add(Bloomberglp.Blpapi.Message)">
            <summary>
            Adds the topic from a <see cref="M:Bloomberglp.Blpapi.ITopicList.Message(Bloomberglp.Blpapi.CorrelationID)"/> to this list.
            </summary>
            <param name="message">
            A "TopicSubscribed" or "ResolutionSuccess" <see cref="M:Bloomberglp.Blpapi.ITopicList.Message(Bloomberglp.Blpapi.CorrelationID)"/>.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.Add(Bloomberglp.Blpapi.Message,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Adds the topic from a <see cref="M:Bloomberglp.Blpapi.ITopicList.Message(Bloomberglp.Blpapi.CorrelationID)"/> to this list.
            </summary>
            <param name="message">
            A "TopicSubscribed" or "ResolutionSuccess" <see cref="M:Bloomberglp.Blpapi.ITopicList.Message(Bloomberglp.Blpapi.CorrelationID)"/>.
            </param>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.CorrelationIdAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> of an entry at the specified
            <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.TopicString(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Gets the topic of an entry.
            </summary>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.TopicStringAt(System.Int32)">
            <summary>
            Gets the topic of an entry at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.Status(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Return the <see cref="T:Bloomberglp.Blpapi.TopicList.TopicStatus"/> of an entry.
            </summary>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.StatusAt(System.Int32)">
            <summary>
            Return the <see cref="T:Bloomberglp.Blpapi.TopicList.TopicStatus"/> of an entry at the
            specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.Message(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Gets the result of a topic creation.
            <para>
            The message returned can be used when creating an instance
            of <see cref="T:Bloomberglp.Blpapi.Topic"/>.
            </para>
            </summary>
            <param name="correlationId">
            A <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> to identify the entry.
            </param>
            <returns>
            The <see cref="M:Bloomberglp.Blpapi.ITopicList.Message(Bloomberglp.Blpapi.CorrelationID)"/> received during creation of the topic.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ITopicList.MessageAt(System.Int32)">
            <summary>
            Gets the result of creating the topic in the entry specified by
            <paramref name="index"/>.
            <para>
            The message returned can be used when creating an instance
            of <see cref="T:Bloomberglp.Blpapi.Topic"/>.
            </para>
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
            <returns>
            The <see cref="M:Bloomberglp.Blpapi.ITopicList.Message(Bloomberglp.Blpapi.CorrelationID)"/> received during resolution of the topic.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Logging">
            <summary>
            Provides a way to register a call back for logging
            </summary>
            <remarks>
            The call back is provided as an interface that needs to be implemented. The
            method onMessage() is called when a message that needs logging is available.
            Callback is only called for messages that have 'level'
            higher than or equal to the 'defaultThresholdLevel'.
            There can be only one callback that can be registered and if another callback
            is registered it will replace the previous one.
            <code>
            Logging.Callback cb = new Logging.Callback() {
            public void onMessage(
                long threadId, Level level,
                Datetime dateTime, String loggerName, String message) {
                    // Do some processing
                }
            };
            Logging.registerCallback(cb, Level.WARNING);
            </code>
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.Logging.Callback">
            <summary>
            An interface for a callback that can been registered to get the log messages
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Logging.Callback.OnMessage(System.Int64,System.Diagnostics.TraceLevel,Bloomberglp.Blpapi.Datetime,System.String,System.String)">
            <summary> This function will be called whenever a new log is
            generated with a level above the threshold provided during
            registration.
            </summary>
            <param name="threadId">The id of thread that generated the log
            message.</param>
            <param name="level">The level of logging.</param>
            <param name="dateTime">The date and time the message was generated.</param>
            <param name="loggerName">The logger name.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Logging.RegisterCallback(Bloomberglp.Blpapi.Logging.Callback,System.Diagnostics.TraceLevel)">
            <summary>
            register a callback with the specified 'thresholdLevel' as default threshold level
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Logging.DeregisterCallback">
            <summary>
            deregister a callback, the loglevel will not be reset and will continue to be the
            the one that was last one.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Logging.LogTestMessage(System.Diagnostics.TraceLevel)">
            <summary>
            Log a test message at the specified 'level'.  Note that this function is intended
            for testing of the logging configuration only.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Message">
             <summary> Message objects are used to represent all outputs from the API.
             </summary>
             <remarks> Message objects are used to represent all outputs from the API including
             subscription data, response, administrative and status messages. Message
             objects are obtained from <see cref="M:Bloomberglp.Blpapi.Event.GetMessages">Event.GetMessages()</see>.
             A message always has a message type and may optionally contain the following
             <list type="table">
               <item>
                <term>TopicName</term>
                <description>Valid for Subscription data messages.</description>
               </item>
               <item>
                <term>Service</term>
                <description>The service from which this message was received from.</description>
               </item>
               <item>
                <term>CorrelationId</term>
                <description>One or more correlationIds if this message was
                  delivered for a pending request or a subscription.
                 </description>
               </item>
               </list>
              <para> A Message object is a handle to a single underlying protocol message.
             The Message contents are represented as an Element and some convenient
             shortcuts are supplied to the Element accessors.
              </para>
             </remarks>
             <threadsafety static="true" instance="true"/>
            
        </member>
        <member name="T:Bloomberglp.Blpapi.Message.Fragment">
            <summary>
            Fragment type of a Message.
            </summary>
            <remarks>
            A message could be split into more than one fragments to reduce
            each message size. This enum is used to indicate whether a message
            is a fragmented message and the position in the fragmented messages.
            </remarks>
        </member>
        <member name="F:Bloomberglp.Blpapi.Message.Fragment.NONE">
            <summary>
            Message is not fragmented
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Message.Fragment.START">
            <summary>
            The first fragmented message
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Message.Fragment.INTERMEDIATE">
            <summary>
            Intermediate fragmented messages
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Message.Fragment.END">
            <summary>
            The last fragmented message
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Message.Recap">
            <summary>
            Recap type of a Message.
            </summary>
            <remarks>
            Some subscription data messages (messages which originate from
            events of type <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_DATA"/>) are
            recaps, which summarize the overall state of the data associated
            with the subscription. A solicited recap message is a recap
            intended for a particular consumer who has recently subscribed or
            resubscribed to a topic on a service. Services may also emit
            unsolicited recaps, intended for all consumers, at any time.
            This enum is used to indicate the recap type for a particular data
            message.
            </remarks>
        </member>
        <member name="F:Bloomberglp.Blpapi.Message.Recap.NONE">
            <summary>
            Normal data tick; not a recap
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Message.Recap.SOLICITED">
            <summary>
            Generated on request by subscriber
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Message.Recap.UNSOLICITED">
            <summary>
            Generated at discretion of the service
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.TopicName">
            <summary>
            Gets the topic string associated with this message. Returns an empty
            string if there is no topic associated with this message.
            </summary>
            <para>
            This method has now been deprecated because message's payload can
            be associated with different correlation ids/subscriptions, and
            each of these correlation ids may map to different topic strings.
            In such scenarios, it will be incorrect to return one out of
            the topics (for the various correlation ids in the message) as
            the topic name for the message. Applications should use
            correlation ids to map to the subscriptions.
            </para>
            <returns>returns topic name</returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.RequestId">
            <summary>
            Gets the request id of the message if one exists, otherwise, null.
            <para>
            When present, the request id can be reported to Bloomberg to
            troubleshoot the cause of failure messages, or issues with the data
            contained in the message.
            </para>
            <para>
            Note that request id is not the same as correlation id and should
            not be used for correlation purposes.
            </para>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.Service">
            <summary>
            Gets the Service associated with this message. Returns null if this
            method is not associated with a service.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.MessageType">
            <summary>
            Gets the Name constant representing the type of the message.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.FragmentType">
            <summary>
            Gets the fragment type of this message.
            </summary>
            <remarks>
            The return value is a value
            of enum <see cref="T:Bloomberglp.Blpapi.Message.Fragment"/> to indicate whether it is a
            fragmented message of a big message and its positions in
            fragmentation if it is.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.CorrelationID">
            <summary>
            Gets the correlationId associated with this message.
            </summary>
            <remarks>
             This is same as calling <see cref="M:Bloomberglp.Blpapi.Message.GetCorrelationID(System.Int32)">GetCorrelationID(0)</see>
            If there is more than one correlationId associated with this message
            return the first correlationId. If there are no correlationIds available
            for this message return null.
            <value> CorrelationID associated with this message if available or null
                   otherwise.
            </value>
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.RecapType">
            <summary>
            Gets the recap type of this message.
            </summary>
            <remarks>
            The return value is a value of enum <see cref="T:Bloomberglp.Blpapi.Message.Recap"/> to
            indicate whether this message is a solicited recap, an unsolicited
            recap, or neither.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetCorrelationID(System.Int32)">
             <summary>
             Returns the correlationId associated with this message at the specified
             position.
             </summary>
             <remarks> Normally each message is associated with only one correlationId. See
            "allowMultipeCorrelatorsPerMsg" option in <see cref="T:Bloomberglp.Blpapi.SessionOptions">SessionOptions</see>
             for more information on when multiple correlators can be returned per
             message.
             </remarks>
             <param name="position">
             The specified position.
             </param>
             <returns>The CorrelationID at the position.</returns>
             <exception cref="T:System.IndexOutOfRangeException">
             index >= <see cref="P:Bloomberglp.Blpapi.Message.NumCorrelationIDs">NumCorrelationIDs</see>
             </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.NumCorrelationIDs">
            <summary>
            Gets the number of correlation ids associated with this message.
            </summary>
            <remarks>  Note: A Message will have exactly one CorrelationId unless
            "AllowMultipleCorrelatorsPerMsg" option was enabled for the Session this
            Message came from. When allowMultipleCorrelatorsPerMsg is disabled
            (the default) and more than one active subscription would result in the
            same Message the Message is delivered multiple times (without making a
            physical copy). Each Message is accompanied by a single CorrelationId.
            When "AllowMultipleCorrelatorsPerMsg" is enabled and more than one
            active subscription would result in the same Message the Message is
            delivered once with a list of corresponding CorrelationId values.
            </remarks>
            <value>
            The number of correlation ids associated with this message.
            </value>
            <seealso cref="T:Bloomberglp.Blpapi.SessionOptions"/>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.CorrelationIDs">
            <summary>
             Gets an enumerable collection of all collectionIds associated with this message.
            </summary>
            <value>
            An enumerabale collection of CorrelationIDs.
            </value>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.TimeReceived">
            <summary>
            Gets the timestamp in System.DateTime in UTC, when the
            message was received by the library. The value is <code>DateTime(0)
            </code> if the timestamp is not present.
            </summary>
            <remarks>
            Note that by default the
            subscription data messages are not timestamped (but all the other
            messages are). To enable recording received time for subscription
            data, set <see cref=
            "P:Bloomberglp.Blpapi.SessionOptions.RecordSubscriptionDataReceiveTimes">
            SessionOptions.RecordSubscriptionDataReceiveTimes</see>
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.AsElement">
            <summary>
            Gets the contents of this Message as a read-only <see cref="T:Bloomberglp.Blpapi.Element">Element</see>.
            </summary>
            <value>
            A read-only reference to the top-level element of this
            message object.
            </value>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.IsValid">
            <summary> Return true if the message is valid.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.HasElement(Bloomberglp.Blpapi.Name)">
            <summary>
            Returns <c>true</c> if this message has the element having the specified name
            <c>false</c> otherwise.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.HasElement(Bloomberglp.Blpapi.Name)">HasElement(name)</see>
            </remarks>
            <returns>
            <c>true</c> if this message has the element having the specified name
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.HasElement(Bloomberglp.Blpapi.Name,System.Boolean)">
            <summary>
            Returns <c>true</c> if this message has the element having the specified name
            <c>false</c> otherwise.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.HasElement(Bloomberglp.Blpapi.Name,System.Boolean)">HasElement(name, false)</see>
            </remarks>
            <returns>
            <c>true</c> if this message has the element having the specified name
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.HasElement(System.String)">
            <summary>
            Returns <c>true</c> if this message has the element having the specified name
            <c>false</c> otherwise.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.HasElement(System.String)">HasElement(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>
            <c>true</c> if this message has the element having the specified name
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.HasElement(System.String,System.Boolean)">
            <summary>
            Returns <c>true</c> if this message has the element having the specified name
            <c>false</c> otherwise.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.HasElement(System.String,System.Boolean)">HasElement(name, false)</see>
            </remarks>
            <returns>
            <c>true</c> if this message has the element having the specified name
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElement(Bloomberglp.Blpapi.Name)">
            <summary>Returns the element of this message having the specified name.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The element of this message having the specified name.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElement(System.String)">
            <summary>Returns the element of this message having the specified name.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The element of this message having the specified name.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsBool(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a boolean value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsBool(Bloomberglp.Blpapi.Name)">GetElementAsBool(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a boolean
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a boolean value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsBool(System.String)">
            <summary>Returns the value of the element having the specified name as
            a boolean value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsBool(System.String)">GetElementAsBool(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a boolean
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a boolean value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsChar(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a char value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsChar(Bloomberglp.Blpapi.Name)">GetElementAsChar(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a char
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a char value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsChar(System.String)">
            <summary>Returns the value of the element having the specified name as
            a char value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsBool(Bloomberglp.Blpapi.Name)">GetElementAsBool(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a char
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a char value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsInt32(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            an int value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsInt32(Bloomberglp.Blpapi.Name)">GetElementAsInt32(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as an int
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    an int value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsInt32(System.String)">
            <summary>Returns the value of the element having the specified name as
            an int value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsInt32(System.String)">GetElementAsInt32(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as an int
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    an int value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsInt64(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a long value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsInt64(Bloomberglp.Blpapi.Name)">GetElementAsInt64(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a long
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a long value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsInt64(System.String)">
            <summary>Returns the value of the element having the specified name as
            a long value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsInt64(System.String)">GetElementAsInt64(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a long
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a long value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsFloat64(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a double value.
            </summary>]
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsFloat64(Bloomberglp.Blpapi.Name)">GetElementAsFloat64(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a double
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a double value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsFloat64(System.String)">
            <summary>Returns the value of the element having the specified name as
            a double value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsFloat64(System.String)">GetElementAsFloat64(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a double
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a double value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsFloat32(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a float value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsFloat32(Bloomberglp.Blpapi.Name)">GetElementAsFloat32(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a float
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a float value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsFloat32(System.String)">
            <summary>Returns the value of the element having the specified name as
            a float value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsFloat32(System.String)">GetElementAsFloat32(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a float
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a float value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsString(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a string value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsString(Bloomberglp.Blpapi.Name)">GetElementAsString(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a string
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a string value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsString(System.String)">
            <summary>Returns the value of the element having the specified name as
            a string value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsString(System.String)">GetElementAsString(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a string
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a string value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsBytes(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a byte array.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsBytes(Bloomberglp.Blpapi.Name)">GetElementAsBytes(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a byte array.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to a byte array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsBytes(System.String)">
            <summary>Returns the value of the element having the specified name as
            a byte array.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsBytes(System.String)">GetElementAsBytes(name)</see>.
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a byte array.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to a byte array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsDatetime(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a Datetime value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsDatetime(Bloomberglp.Blpapi.Name)">GetElementAsDatetime(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a Datetime
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a Datetime value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsDatetime(System.String)">
            <summary>Returns the value of the element having the specified name as
            a Datetime value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsDatetime(System.String)">GetElementAsDatetime(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a Datetime
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a Datetime value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsDate(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a Date value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsDate(Bloomberglp.Blpapi.Name)">GetElementAsDate(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a Date
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a Date value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsDate(System.String)">
            <summary>Returns the value of the element having the specified name as
            a Date value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsDate(System.String)">GetElementAsDate(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a Date
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a Date value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsTime(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a Time value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsTime(Bloomberglp.Blpapi.Name)">GetElementAsTime(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a Time
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a Time value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsTime(System.String)">
            <summary>Returns the value of the element having the specified name as
            a Time value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsTime(System.String)">GetElementAsTime(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a Time
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a Time value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsName(Bloomberglp.Blpapi.Name)">
            <summary>Returns the value of the element having the specified name as
            a Constant value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsName(Bloomberglp.Blpapi.Name)">GetElementAsName(name)</see>
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a Constant
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a Constant value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.GetElementAsName(System.String)">
            <summary>Returns the value of the element having the specified name as
            a Constant value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetElementAsName(System.String)">GetElementAsName(name)</see>.
            </remarks>
            <param name="name">
            An element name.
            </param>
            <returns>The value of the element having specified name as a Constant
            value.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             This message does not contain an element having the specified name.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidConversionException">
            The value is not convertible to
                    a Constant value.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.ToString">
            <summary> Return the string representation of this object.
            </summary>
            <returns>The string representing this object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.Print(System.IO.Stream)">
            <summary> Print the message into the stream.
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Message.Print(System.IO.TextWriter)">
            <summary> Print the message with the help of text writer.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.NumElements">
            <summary>
            Gets the number of elements contained by this message.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.Elements">
            <summary>
            Gets the enumerable collection of elements.
            </summary>
            <remarks> This is the same as <see cref="P:Bloomberglp.Blpapi.Message.AsElement">AsElement</see>.
            <see cref="P:Bloomberglp.Blpapi.Element.Elements">Elements</see>.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.Item(System.String)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.Message.GetElement(System.String)">GetElement(name)</see>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Message.Item(System.String,System.Int32)">
            <summary>
            This is the same as calling
            <see cref="M:Bloomberglp.Blpapi.Message.GetElement(System.String)">GetElement(name)</see>.
            <see cref="M:Bloomberglp.Blpapi.Element.GetValue(System.Int32)">GetValue(index)</see>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Name">
             <summary> Name objects are used to identify and access the
             classes which define the schema.
             </summary>
             <remarks> Name objects are used to identify and access the
             classes which define the schema.
             <see cref="T:Bloomberglp.Blpapi.SchemaTypeDefinition">SchemaTypeDefinition</see>,
             <see cref="T:Bloomberglp.Blpapi.SchemaElementDefinition">SchemaElementDefinition</see>,
             <see cref="T:Bloomberglp.Blpapi.Constant">Constant</see>,
             and <see cref="T:Bloomberglp.Blpapi.ConstantsList">ConstantsList</see>.
             They are also used to access the
             values in <see cref="T:Bloomberglp.Blpapi.Element">Element</see> objects and
             <see cref="T:Bloomberglp.Blpapi.Message">Message</see> objects.
             <para> The Name class is an efficient substitute for a string when used as a key,
             providing constant time comparison and ordering operations. Two Name objects
             constructed from Strings for which equals() would return <c>true</c> will always
             compare equally.
             </para>
             <para>
             This is where possible Name objects should be initialized once and then reused.
             Creating a Name object from a String involves a search in a container
             requiring multiple string comparison operations.
             </para>
             <para>Note: Each Name instance refers to an entry in a global static table. Name
             instances for identical strings will refer to the same data. There is no
             provision for removing entries from the static table so Name objects should
             only be used when the set of input strings is bounded. </para>
            
             <para>
             For example, creating a Name for every possible field name and type in a
             data model is reasonable (in fact, the API will do this whenever it receives
             schema information). However, converting sequence numbers on incoming messages
             to strings and creating a Name from each one of those strings will cause the
             static table to grow in an unbounded manner.
             </para>
             </remarks>
            
             <threadsafety static="true" instance="true"/>
            
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.#ctor">
            <summary> Default constructed Name. All default constructed
            Name objects are equivalent to NullName.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.#ctor(System.String)">
            <summary>
            Constructs a Name from the specified nameString.
            </summary>
            <remarks>
            Constructs a Name from a String is a relatively expensive operation.
            If a Name will be used repeatedly it is preferable to create it once and
            re-use the object.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.GetName(System.String)">
            <summary> Returns a reference to a Name object for the specified nameString
            creating it if it doesn't exist already.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.FindName(System.String)">
            <summary> Returns a reference to a Name object for the specified nameString or
            null if a Name does not exist.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.HasName(System.String)">
            <summary> Returns <c>true</c> if a reference to a Name
            object exists for the specified nameString.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.Equals(System.Object)">
            <summary> Compares this Name object to the specified Object.
            </summary>
            <remarks> The result of the comparison is true if and only
            if the specified Object
            is not null and this Name object contains the same value as the
            specified Name.
            </remarks>
            <returns> Returns <c>true</c> if the objects are the
            same; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.GetHashCode">
            <summary> GetHashCode() override to correspond to
            <see cref="M:Bloomberglp.Blpapi.Name.Equals(System.Object)"/> Equals()
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.ToString">
            <summary> Returns the String this Name object represents.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Name.FreeGlobalNameTable">
            <summary>
            Purges all entries from the global name table.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Name.NullName">
            <summary> Name object representing no actual string.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.NameEnumeration">
            <summary>Don't use it. NameEnumeration is deprecated.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.NameEnumerationTable">
            <summary>Don't use it. NameEnumerationTable is deprecated.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.NameEnumerationTable.#ctor(Bloomberglp.Blpapi.NameEnumeration)">
             <summary>
            
             </summary>
             <param name="nameEnum"></param>
             <exception cref="T:System.ArgumentException">
             Name Enumerations extends other classes.
             Name Enumerations does not implement the NameEnumeration interface.
             An enumerator is not a static integer or value is reserved.
             Name binding is not right.
             </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.NameEnumerationTable.Item(Bloomberglp.Blpapi.Name)">
            <summary> Return enumeration corresponding to name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Names">
            <summary>
            Provides commonly used <see cref="T:Bloomberglp.Blpapi.Name"/> instances.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.NotFoundException">
             <summary> The exception that is thrown
             when the required entity doesn't exist.
             </summary>
            
             <threadsafety static="true" instance="false"/>
            
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="M:Bloomberglp.Blpapi.NotFoundException.#ctor">
            <summary>Construct the exception without a description.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.NotFoundException.#ctor(System.String)">
            <summary>Construct the exception  with the description.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>Construct the exception  with the description and the cause
            exception.
            </summary>
            <param name="description"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.NotFoundException.Description">
            <summary> The description.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Operation">
             <summary>
             Operation objects are obtained from a <see cref="T:Bloomberglp.Blpapi.Service">Service</see>
             object and it
             represents an Operation that can be executed on a Service.
             </summary>
             <remarks>
             Operation provides
             read-only access to the schema of the Operation's Request and the schema of
             the possible responses.
             </remarks>
            
             <threadsafety static="true" instance="true"/>
            
        </member>
        <member name="P:Bloomberglp.Blpapi.Operation.Name">
            <summary>
            Gets the name of this Operation.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Operation.Status">
            <summary>
            Gets the status of this Operation.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Operation.RequestType">
            <summary>
            Gets the TypeDefinition of request for this Operation.
            <see cref="P:Bloomberglp.Blpapi.Operation.RequestDefinition"/> 
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Operation.ResponseType">
            <summary>
            Gets the TypeDefinitions of the possible
            responses for this Operation.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Operation.RequestDefinition">
            <summary>
            Gets a read-only SchemaElementDefinition which defines the schema for
            this Operation.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Operation.NumResponseDefinition">
            <summary>
            Gets the number of the response types that can be returned by this
            Operation.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Operation.GetResponseDefinition(System.Int32)">
            <summary>
            Gets a read-only SchemaElementDefinition which defines the schema of
            the 'index'th possible response that this Operation delivers.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Operation.NumResponseDefinition">NumResponseDefinition</see>.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Operation.ResponseDefinitions">
            <summary>
             Gets an enumerable collection of all definitions of responses.
            </summary>
            <returns>
            An enumerabale collection of <c>SchemaElementDefinition</c>.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Operation.Description">
            <summary>
            Gets a string that contains a human readable description of this
            Operation.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Operation.ResponseDefinition(Bloomberglp.Blpapi.Name)">
            <summary>
            Returns a read-only <see cref="T:Bloomberglp.Blpapi.SchemaElementDefinition"/> which
            defines the schema of a possible response with
            <paramref name="name"/> that this <see cref="T:Bloomberglp.Blpapi.Operation"/> delivers.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            Thrown when <paramref name="name"/> does not identify one of the
            possible responses this <see cref="T:Bloomberglp.Blpapi.Operation"/> delivers.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.Properties.Resources">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Properties.Resources.blp_admin">
            <summary>
            Looks up a localized resource of type <see cref="T:byte[]"/>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Properties.Resources.blp_schemadownload">
            <summary>
            Looks up a localized resource of type <see cref="T:byte[]"/>.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ProviderEventHandler">
            <summary> The delegate to receive Provider Session Events.
             </summary>
             <author>
             Rekha Patel(rpatel44)
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.ProviderSession">
            <summary>
            This class provides a session that can be used for providing services.
            </summary>
            <remarks>
            <p>
            ProviderSession inherits from AbstractSession. In addition to the
            AbstractSession functionality, a ProviderSession provides the following
            functions to applications.
            </p>
            <p>
            Applications can register to provide Services using either
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.RegisterService(System.String,Bloomberglp.Blpapi.Identity)">
            ProviderSession.RegisterService()</see>
            or <see cref="M:Bloomberglp.Blpapi.ProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity)">
            ProviderSession.RegisterServiceAsync()</see>.
            Before registering to provide a Service an application must have
            established its identity.
            <p>
            After applications have registered a service they will start receiving
            subscription requests ('TopicSubscribed' message in <see cref=
            "F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">EventType.TOPIC_STATUS</see>) for topics
            which belong to the service. If the resolver has specified
            'subServiceCode' for topics in 'PermissionResponse', then only
            providers who have activated the 'subServiceCode' will get the
            subscription request. Where multiple providers have registered the same
            service and sub-service code (if any), the provider that registered the
            highest priority for the sub-service code will receive subscription
            requests; if multiple providers have registered the same sub-service
            code with the same priority (or the resolver did not set a sub-service
            code for the subscription), the subscription request will be routed to
            one of the providers with the highest service priority.
            </p>
            </p>
            <b>Topic Life Cycle</b>
            <p>
            A provider wishing to publish subscription data must explicitly open
            each topic on which they publish using
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)">
            ProviderSession.CreateTopics</see> (or
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList)">
            ProviderSession.CreateTopicsAsync</see>). Creating a topic prepares
            the distribution and caching infrastructure for new data associated
            with the topic's resolved identifier. (Note that several different
            topics could resolve to the same ID.) Independent of a topic's creation
            status is its subscription status, i.e. whether there are subscribers
            ready to receive the data published. A topic that is both created and
            subscribed is *activated*.
            </p>
            <p>
            There are two models for managing topic creation: broadcast and
            interactive. Broadcast publishers proactively call
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)">
            ProviderSession.CreateTopics</see> for each topic on which they intend
            to publish, while interactive publishers wait to receive a
            'TopicSubscribed' message (within an <see cref="T:Bloomberglp.Blpapi.Event">Event</see> of
            type <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">
            Event.EventType.TOPIC_STATUS</see> before calling
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)">
            ProviderSession.CreateTopics</see> in response. Topics are resolved
            before they are created---it is possible that multiple different topic
            strings will map to the same underlying topic. See below for the
            behavior of the SDK when the same topic is created multiple times.
            </p>
            <p>
            After <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)">
            ProviderSession.CreateTopics</see> is called, the publisher will
            receive a 'TopicCreated' message (within a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">
            Event.EventType.TOPIC_STATUS</see> event), and when there is at least
            one subscriber to the topic the publisher will then receive a
            'TopicActivated' message (also within an
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">
            Event.EventType.TOPIC_STATUS</see> event). As subscribers come and go,
            additional 'TopicSubscribed', 'TopicActivated', 'TopicUnsubscribed',
            and 'TopicDeactivated' messages may be received by the
            publisher. A <see cref="T:Bloomberglp.Blpapi.Topic">Topic</see> object can be retrieved from
            each of these messages using the
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.GetTopic(Bloomberglp.Blpapi.Message)">
            ProviderSession.GetTopic</see> method, and this object
            can be used for subsequent calls to
            <see cref="M:Bloomberglp.Blpapi.EventFormatter.AppendMessage(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Topic)">
            EventFormatter.AppendMessage</see> and
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.DeleteTopic(Bloomberglp.Blpapi.Topic)">
            ProviderSession.DeleteTopic</see>. In the case that the same resolved
            topic is created multiple times by a publisher using different names,
            it is unspecified which of those names will be returned by
            <see cref="P:Bloomberglp.Blpapi.Message.TopicName">Message.TopicName</see> for these (or
            other) messages.
            </p>
            <p>
            If a publisher no longer intends to publish data on a topic, it can
            call <see cref="M:Bloomberglp.Blpapi.ProviderSession.DeleteTopic(Bloomberglp.Blpapi.Topic)">
            ProviderSession.DeleteTopic</see> to free the internal caching and
            distribution resources associated with the topic. When a resolved topic
            has been deleted the same number of times that it has been created, a
            'TopicDeleted' message will be delivered, preceded by
            'TopicDeactivated' messages if the topic was still subscribed
            (and activated). No further messages can be published on a deleted
            topic.
            </p>
            <p>
            Deregistering a service deletes all topics associated with that
            service.
            </p>
            <p>
            Note that 'TopicActivated' and 'TopicDeactivated' messages are entirely
            redundant with 'TopicCreated', 'TopicSubscribed', 'TopicDeleted', and
            'TopicUnsubscribed' messages, and are provided only for the convenience
            of publishers that do not maintain per-topic state.
            </p>
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.#ctor">
            <summary> Construct provider session with no options,
            event handler or event dispatcher.
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.ProviderEventHandler,Bloomberglp.Blpapi.EventDispatcher)"/>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.#ctor(Bloomberglp.Blpapi.SessionOptions)">
            <summary> The constructor with SessionOptions
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.ProviderEventHandler)">
            <summary> The constructor with SessionOptions and ProviderEventHandler
            </summary>
            <param name="options"></param>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.ProviderEventHandler,Bloomberglp.Blpapi.EventDispatcher)">
             <summary>
             Constructs a Session using the optionally specified 'options', the
             optionally specified 'eventHandler' and the optionally specified
             'eventDispatcher'.
            <p>
            See the SessionOptions documentation for details on what can be specified
             in the 'options'.
             </p>
            <p>
             If 'eventHandler' is not null then this Session will operation in
             asynchronous mode, otherwise the Session will operate in synchronous
             mode.
             </p>
            <p>
             If 'eventDispatcher' is null then the Session will create a default
             EventDispatcher for this Session which will use a single thread for
             dispatching events. For more control over event dispatching a specific
             instance of EventDispatcher can be supplied. This can be used to share a
             single EventDispatcher amongst multiple Session objects.
             </p>
             <p>
             If an 'eventDispatcher' is supplied which uses more than one thread the
             Session will ensure that events which should be ordered are passed to
             callbacks in a correct order. For example, partial response to a request
            or updates to a single subscription.
            If 'eventHandler' is null and the 'eventDispatcher' is not null an
            exception is thrown.
            Each EventDispatcher uses its own thread or pool of threads so if you
            want to ensure that a session which receives very large messages and
            takes a long time to process them does not delay a session that receives
            small messages and processes each one very quickly then give each one a
            separate EventDispatcher.
             </p>
             </summary>
             <param name="options"></param>
             <param name="eventHandler"></param>
             <param name="dispatcher"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.RegisterService(System.String,Bloomberglp.Blpapi.Identity)">
             <summary>
             <p>
             Attempts to register the service identified by the specified 'uri'
             and blocks until the service is either registered successfully or
             has failed to be registered. The specified 'providerIdentity' is
             used to verify permissions to provide the service being registered.
             Returns <c>true</c> if the service is registered successfully and
             <c>false</c> if the service cannot be registered successfully.
             </p>
             <p>
             The 'uri' must begin with a full qualified service name. That is it
             must begin with "//{namespace}/{service-name}[/]". Any portion of
             the 'uri' after the service name is ignored.
             </p>
             <p>
             This method does not return until a SERVICE_STATUS event has been
             generated. Note that if the session was created in asynchronous
             mode, the event may be processed before the function returns.
            </p>
             <para>
             When <paramref name="providerIdentity"/> is null the session
             identity will be used if it's been authorized.
             </para>
             </summary>
             <param name="serviceName"></param>
             <param name="providerIdentity"></param>
             <returns> <c>true</c> on success and <c>false</c> otherwise
             </returns>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.RegisterService(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.ServiceRegistrationOptions)">
            <summary>
            <p>
            Attempts to register the service identified by the specified 'uri'
            and blocks until the service is either registered successfully or
            has failed to be registered. The specified 'providerIdentity' is
            used to verify permissions to provide the service being registered.
            Returns <c>true</c> if the service is registered successfully and
            <c>false</c> if the service cannot be registered successfully.
            </p>
            <p>
            The 'uri' must begin with a full qualified service name. That is it
            must begin with "//{namespace}/{service-name}[/]". Any portion of
            the 'uri' after the service name is ignored.
            </p>
            <p>
            This method does not return until a SERVICE_STATUS event has been
            generated. Note that if the session was created in asynchronous
            mode, the event may be processed before the function returns.
            </p>
            <para>
            When <paramref name="providerIdentity"/> is null the session
            identity will be used if it's been authorized.
            </para>
            </summary>
            <param name="serviceName"></param>
            <param name="providerIdentity"></param>
            <param name="registrationOptions"></param>
            <returns> <c>true</c> on success and <c>false</c> otherwise</returns>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity)">
            <summary>
            Begins the process of registering the service identified by the
            specified 'uri' with identity and returns immediately.
            </summary>
            <remarks> The specified 'providerIdentity' is used to
            verify permissions to provide the service being registered.
            <para>
            The 'uri' must begin with a full qualified service name. That is it
            must begin with "//{namespace}/{service-name}[/]". Any portion of
            the 'uri' after the service name is ignored.
            </para>
            <para>
            The application must monitor events for a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">EventType.SERVICE_STATUS
            </see> event which will be generated once the
            service has been successfully registered or registration has failed.
            </para>
            <para>
            When <paramref name="providerIdentity"/> is null the session
            identity will be used if it's been authorized.
            </para>
            </remarks>
            <returns> The actual CorrelationID object that will identify
            <see cref="T:Bloomberglp.Blpapi.Event">Event</see> objects generated as a result of this
            call.</returns>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.ServiceRegistrationOptions)">
            <summary>
            Begins the process of registering the service identified by the
            specified 'uri' with identity and registration options, and returns
            immediately.
            <para>
            When <paramref name="providerIdentity"/> is null the session
            identity will be used if it's been authorized.
            </para>
            </summary>
            <remarks>In addition to the common arguments, the specified
            'registrationOptions' can be used to specify registration
            options like group ID, service priority and parts of the service
            being registered.
            </remarks>
            <returns> The actual CorrelationID object that will identify
            <see cref="T:Bloomberglp.Blpapi.Event">Event</see> objects generated as a result of this
            call.</returns>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Begins the process of registering the service identified by the
            specified 'uri' and returns immediately.
            <para>
            When <paramref name="providerIdentity"/> is null the session
            identity will be used if it's been authorized.
            </para>
            </summary>
            <remarks>
            The specified 'providerIdentity' is used to verify permissions to
            provide the service being registered. The specified 'correlationId'
            is used to track Events generated as a result of this call.
            <para>
            The 'uri' must begin with a full qualified service name. That is it
            must begin with "//[namespace]/[service-name]". Any portion of the
            'uri' after the service name is ignored.
            </para>
            The application must monitor events for a
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">
            EventType.SERVICE_STATUS</see> event which will be generated once
            the service has been successfully registered or registration has
            failed.
            </remarks>
            <returns>The actual CorrelationID object that will identify
            <see cref="T:Bloomberglp.Blpapi.Event">Event</see> objects generated as a result of this
            call.</returns>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified 'correlationId' is currently active for this Session.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.RegisterServiceAsync(System.String,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.ServiceRegistrationOptions)">
            <summary>
            Begins the process of registering the service identified by the
            specified 'uri' with identity, CorrelationID and registration
            options. Returns immediately.
            <para>
            When <paramref name="providerIdentity"/> is null the session
            identity will be used if it's been authorized.
            </para>
            </summary>
            <remarks>In addition to the common arguments, 'registrationOptions'
            can be used to specify registration options like group ID,
            service priority and parts of the service being registered.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified 'correlationId' is currently active for this Session.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.ActivateSubServiceCodeRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Activates sub-service code range of the specified
            [<paramref name="begin"/>, <paramref name="end"/>]
            and the specified <paramref name="priority"/> to an already
            registered service.
            <para>
            Numerically greater values of <paramref name="priority"/> indicate
            higher priorities.The behavior is undefined unless
            <paramref name="begin"/>, <paramref name="end"/> and
            <paramref name="priority"/> are between 0 and 2^24 (2 to the power
            of 24) and the service has already been registered.
            </para>
            </summary>
            <param name="uri">The URI of the service.</param>
            <param name="begin">
            The begining of the sub-service code range that the service will
            be advertising, inclusive.
            </param>
            <param name="end">
            The end of the sub-serivce code range that the service will be
            advertising, inclusive.
            </param>
            <param name="priority">
            The priority of the service. Numerically greater values indicate
            higher priorities.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.DeactivateSubServiceCodeRange(System.String,System.Int32,System.Int32)">
            <summary>
            De-activates sub-service code range specified by [begin, end] from
            to an already registered service. The behavior is undefined unless
            'begin' and 'end' are between 0 and 2^24 (2 to the power of 24) and
            the service has already been registered.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.DeregisterService(System.String)">
            <summary>
            Deregisters the service identified by the specified 'uri'.
            </summary>
            <remarks>
             The identity in the service registration is reused to verify
             permissions for deregistration. If the service is not registered
             nor in pending registration, returns false; returns true
             otherwise. If the service is in pending registration, cancels the
             pending registration. If the service is registered, sends a
             deregistration request; generates
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">
             EventType.TOPIC_STATUS</see> events containing a
             TopicUnsubscribed message for each subscribed topic, a
             TopicDeactivated message for each active topic and a TopicDeleted
             for each created topic; generates
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.REQUEST_STATUS">
             EventType.REQUEST_STATUS</see> events containing
             a RequestFailure message for each pending incoming request; and
             generates a <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">
             EventType.SERVICE_STATUS</see> Event containing a
             ServiceDeregistered message. All published events on topics
             created on this service will be ignored after this method returns.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.Publish(Bloomberglp.Blpapi.Event)">
            <summary>
             Publish the specified 'event'.
            </summary>
            <param name="eventObj"> Event to be published</param>
            <exception cref="T:System.ArgumentException">
            The specified event is not a publish type.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.CreateTopic(Bloomberglp.Blpapi.Message)">
             <summary>
             Creates a new Topic object based on the specified 'message'. The
            'message' must be one of the following types: SUBSCRIPTION_STARTED,
             SUBSCRIPTION_STOPPED, RECAP or RESOLUTION_SUCCESS. If the 'message' is
             not valid then invoking isValid() on the returned Topic will return
             <c>false</c>.
             </summary>
             <param name="message"></param>
             <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList)">
            <summary>
            Resolves the topics in the specified 'resolutionList' and updates the
            'resolutionList' with the results of the resolution process. All services
            referenced in the topics in the 'resolutionList' must already have been
            registered using registerService(). Once resolve() returns each entry
            in the 'resolutionList' will have been updated with a new status.
            <para>
            The session identity will be used if it's been authorized.
            </para>
            </summary>
            <param name="resolutionList">The list of topics to be resolved</param>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            Any of the correlationIds specified in 'resolutionList' is not unique.
            </exception>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            The current thread is interrupted while it is waiting for resolution response.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode)">
             <summary>
             Resolves the topics in the specified 'resolutionList' and updates the
            'resolutionList' with the results of the resolution process.
             <para>
             The session identity will be used if it's been authorized.
             </para>
             </summary>
             <remarks>
             If the
             specified 'resolveMode' is
             <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES">ResolveMode.DONT_REGISTER_SERVICES</see>
             then all the services referenced in the topics in the 'resolutionList'
             must already have been registered using registerService(). If
             'resolveMode' is
             <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">ResolveMode.AUTO_REGISTER_SERVICES</see>
             then the specified 'providerIdentity' should be supplied and ProviderSession will
             automatically attempt to register any services reference in the topics in
             the 'resolutionList' that have not already been registered. Once
             resolve() returns each entry in the 'resolutionList' will have been
             updated with a new status.
             <para>
             Before resolve() returns one or more
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">EventType.RESOLUTION_STATUS</see>
             events and, if 'resolveMode' is
             <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">ResolveMode.AUTO_REGISTER_SERVICES</see>,
             zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">EventType.SERVICE_STATUS</see>
             events are generated. If this is an
             asynchronous ProviderSession then these Events may be processed by the
             registered EventHandler before resolve() has returned.
             </para>
             </remarks>
             <param name="resolutionList"></param>
             <param name="resolveMode"></param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             Any of the correlationIds specified in 'resolutionList' is not unique.
             </exception>
             <exception cref="T:System.Threading.ThreadInterruptedException">
             The current thread is interrupted while it is waiting for resolution response.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)">
             <summary>
             Resolves the topics in the specified 'resolutionList' and updates the
            'resolutionList' with the results of the resolution process.
             </summary>
             <remarks>If the specified 'resolveMode' is DONT_REGISTER_SERVICES (the default) then all
             the services referenced in the topics in the 'resolutionList' must
             already have been registered using registerService(). If 'resolveMode' is
             AUTO_REGISTER_SERVICES then the specified 'providerIdentity' should be
             supplied and ProviderSession will automatically attempt to register any
             services reference in the topics in the 'resolutionList' that have not
             already been registered. Once resolveSync() returns each entry in the
             'resolutionList' will have been updated with a new status.
             <para>
             Before resolve() returns one or more RESOLUTION_STATUS events and, if
             'resolveMode' is AUTO_REGISTER_SERVICES, zero or more SERVICE_STATUS
             events are generated. If this is an asynchronous ProviderSession then
             these Events may be processed by the registered EventHandler before
             resolve() has returned.
             </para>
             </remarks>
             <param name="resolutionList"></param>
             <param name="resolveMode"></param>
             <param name="providerIdentity"></param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             Any of the correlationIds specified in 'resolutionList' is not unique.
             </exception>
             <exception cref="T:System.Threading.ThreadInterruptedException">
             The current thread is interrupted while it is waiting for resolution response.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)">
            <summary>
            Creates the topics in the specified 'topicList' and updates the
            'topicList' with the results of the resolution and creation process.
            <para>
            The session identity will be used if it's been authorized.
            </para>
            </summary>
            <remarks>
            All services referenced in the topics in the 'resolutionList' must
            already have been registered using registerService().
            Once createTopics() returns each entry in
            the 'topicList' will have been updated with a new resolution status.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId in 'topicList' is not unique.
            </exception>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            The current thread is interrupted while it is waiting for response.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode)">
            <summary>
            Creates the topics in the specified 'topicList' and updates the
            'topicList' with the results of the resolution and creation process.
            <para>
            The session identity will be used if it's been authorized.
            </para>
            </summary>
            <remarks>If the specified 'resolveMode' is <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES">
            ResolveMode.DONT_REGISTER_SERVICES</see>,
            then all the services referenced in the topics in the 'topicList'
            must already have been registered using registerService(). If
            'resolveMode' is <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">
            ResolveMode.AUTO_REGISTER_SERVICES</see>, ProviderSession will
            automatically attempt to register any services reference in the topics in
            the 'topicList' that have not already been registered. Once
            createTopics() returns each entry in the 'topicList' will have been
            updated with a new status.
            <para>
            Before createTopics() returns one or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">
            EventType.RESOLUTION_STATUS</see>
            events and, if 'resolveMode' is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">ResolveMode.AUTO_REGISTER_SERVICES</see>,
            zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">EventType.SERVICE_STATUS</see>,
             and zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">EventType.TOPIC_STATUS</see>
            events are generated. If this is an
            asynchronous ProviderSession then these Events may be processed by the
            registered EventHandler before createTopics() has returned.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId in 'topicList' is not unique.
            </exception>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            The current thread is interrupted while it is waiting for response.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)">
            <summary> Creates the topics in the specified 'topicList' and updates the
            'topicList' with the results of the resolution and creation process.
            </summary>
            <remarks>If the specified 'resolveMode' is <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES">
            ResolveMode.DONT_REGISTER_SERVICES</see>,
            then all the services referenced in the topics in the 'topicList'
            must already have been registered using registerService(). If
            'resolveMode' is <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">
            ResolveMode.AUTO_REGISTER_SERVICES</see>, then the
            specified 'providerIdentity' should be supplied and ProviderSession will
            automatically attempt to register any services reference in the topics in
            the 'topicList' that have not already been registered. Once
            createTopics() returns each entry in the 'topicList' will have been
            updated with a new status.
            <para>
            Before createTopics() returns one or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">
            EventType.RESOLUTION_STATUS</see>
            events and, if 'resolveMode' is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">ResolveMode.AUTO_REGISTER_SERVICES</see>,
            zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">EventType.SERVICE_STATUS</see>,
             and zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">EventType.TOPIC_STATUS</see>
            events are generated. If this is an
            asynchronous ProviderSession then these Events may be processed by the
            registered EventHandler before createTopics() has returned.
            </para>
            </remarks>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId in 'topicList' is not unique.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId in 'topicList' is not unique.
            </exception>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            The current thread is interrupted while it is waiting for response.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList)">
            <summary>
            Begins the resolution of the topics in the specified 'resolutionList'.
            <para>
            The session identity will be used if it's been authorized.
            </para>
            </summary>
            <remarks> All the services referenced in the topics in the 'resolutionList' must
            already have been registered using registerService().
            <para>
            One or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">EventType.RESOLUTION_STATUS</see>
            events will be delivered
            with the results of the resolution. These events may be generated before
            or after resolve() returns.
            </para>
            </remarks>
            <param name="resolutionList"></param>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId in 'resolutionList' is not unique.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode)">
             <summary>
             Begins the resolution of the topics in the specified 'resolutionList'.
             <para>
             The session identity will be used if it's been authorized.
             </para>
             </summary>
             <remarks> If the specified 'resolveMode' is
             <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES">ResolveMode.DONT_REGISTER_SERVICES</see>
             then all the services referenced in the topics in the 'resolutionList'
             must already have been registered using registerService(). If
             'resolveMode' is AUTO_REGISTER_SERVICES then the specified
             'providerIdentity' should be supplied and ProviderSession will
             automatically attempt to register any services reference in the topics in
             the 'resolutionList' that have not already been registered.
             <para>
             One or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">EventType.RESOLUTION_STATUS</see>
             events will be delivered
             with the results of the resolution. These events may be generated before
             or after resolveAsync() returns. If
             <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">ResolveMode.AUTO_REGISTER_SERVICES</see>
             is specified <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">EventType.SERVICE_STATUS</see>
             events may also be generated before or after this method returns.
            </para>
             </remarks>
             <param name="resolutionList"></param>
             <param name="resolveMode"></param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId in 'resolutionList' is not unique.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)">
             <summary> Begins the resolution of the topics in the specified 'resolutionList'.
             </summary>
             <remarks> If the specified 'resolveMode' is DONT_REGISTER_SERVICES (the default) then
            all the services referenced in the topics in the 'resolutionList' must
            already have been registered using registerService(). If 'resolveMode' is
            AUTO_REGISTER_SERVICES then the specified 'providerIdentity' should be
            supplied and ProviderSession will automatically attempt to register any
            services reference in the topics in the 'resolutionList' that have not
            already been registered.
            <para>
            One or more RESOLUTION_STATUS events will be delivered with the results
            of the resolution. These events may be generated before or after
            resolve() returns. If AUTO_REGISTER_SERVICES is specified SERVICE_STATUS
            events may also be generated before or after resolve() returns.
             </para>
             </remarks>
             <param name="resolutionList"></param>
             <param name="providerIdentity"></param>
             <param name="resolveMode"></param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId in 'resolutionList' is not unique.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList)">
            <summary>
            Begins the creation of the topics in the specified 'topicList'.
            <para>
            The session identity will be used if it's been authorized.
            </para>
            </summary>
            <remarks> All the services referenced in the topics in the 'topicList' must
            already have been registered using registerService().
            <para> One or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">EventType.RESOLUTION_STATUS</see>
            events will be delivered with the result of the resolution and zero or more
            <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">EventType.TOPIC_STATUS</see>
            events may be generated before or after createTopicsAsync() returns.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId in 'topicList' is not unique.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode)">
            <summary>
            Begins the creation of the topics in the specified 'topicList'.
            <para>
            The session identity will be used if it's been authorized.
            </para>
            </summary>
            /// <remarks>If the specified 'resolveMode' is <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES">
            ResolveMode.DONT_REGISTER_SERVICES</see>,
            then all the services referenced in the topics in the 'topicList'
            must already have been registered using registerService(). If
            'resolveMode' is <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">
            ResolveMode.AUTO_REGISTER_SERVICES</see>, ProviderSession will
            automatically attempt to register any services reference in the topics in
            the 'topicList' that have not already been registered.
            <para>
            Before or after createTopicsAsync() returns, each entry in the 'topicList' will be
            updated with a new status. And one or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">
            EventType.RESOLUTION_STATUS</see>
            events and, if 'resolveMode' is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">ResolveMode.AUTO_REGISTER_SERVICES</see>,
            zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">EventType.SERVICE_STATUS</see>,
            and zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">EventType.TOPIC_STATUS</see>
            events will be generated. If this is an
            asynchronous ProviderSession then these Events may be processed by the
            registered EventHandler.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId in 'topicList' is not unique.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList,Bloomberglp.Blpapi.ResolveMode,Bloomberglp.Blpapi.Identity)">
            <summary>Begins the creation of the topics in the specified 'topicList'.
            </summary>
            /// <remarks>If the specified 'resolveMode' is <see cref="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES">
            ResolveMode.DONT_REGISTER_SERVICES</see>,
            then all the services referenced in the topics in the 'topicList'
            must already have been registered using registerService(). If
            'resolveMode' is <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">
            ResolveMode.AUTO_REGISTER_SERVICES</see>, then the
            specified 'providerIdentity' should be supplied and ProviderSession will
            automatically attempt to register any services reference in the topics in
            the 'topicList' that have not already been registered.
            <para>
            Before or after createTopicsAsync() returns, each entry in the 'topicList' will be
            updated with a new status. And one or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESOLUTION_STATUS">
            EventType.RESOLUTION_STATUS</see>
            events and, if 'resolveMode' is
            <see cref="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">ResolveMode.AUTO_REGISTER_SERVICES</see>,
            zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.SERVICE_STATUS">EventType.SERVICE_STATUS</see>,
            and zero or more <see cref="F:Bloomberglp.Blpapi.Event.EventType.TOPIC_STATUS">EventType.TOPIC_STATUS</see>
            events will be generated. If this is an
            asynchronous ProviderSession then these Events may be processed by the
            registered EventHandler.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId in 'topicList' is not unique.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.GetTopic(Bloomberglp.Blpapi.Message)">
            <summary>Finds a previously created <see cref="T:Bloomberglp.Blpapi.Topic">Topic</see> object based on
            the specified <code>message</code>
            </summary>
            <param name="message">one of the following types:
                   TopicCreated, TopicActivated, TopicDeactivated,
                   TopicSubscribed, TopicUnsubscribed, TopicRecap.</param>
            <returns> The previously created <see cref="T:Bloomberglp.Blpapi.Topic">Topic</see>, or <code>null</code>,
            if requested topic couldn't be found</returns>
            <exception cref="T:System.ArgumentException">message of wrong type used</exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.DeleteTopic(Bloomberglp.Blpapi.Topic)">
            <summary>
            Removes one reference from the specified 'topic'.
            </summary>
            <remarks>
            If this function
            has been called the same number of times that 'topic' was created
            by <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)">
            ProviderSession.CreateTopics</see>, then 'topic' is deleted: a
            'TopicDeleted' message is delivered, preceded by 'TopicDeactivated'
            if 'topic' was subscribed. (See "Topic Life Cycle", above, for
            additional details.) The behavior of this function is undefined if
            'topic' has already been deleted the same number of times that it
            has been created. Further, the behavior is undefined if a provider
            attempts to publish a message on a deleted topic.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.DeleteTopics(System.Collections.Generic.IEnumerable{Bloomberglp.Blpapi.Topic})">
            <summary>
            Deletes each topic in the specified 'topics'.
            </summary>
            <seealso cref="M:Bloomberglp.Blpapi.ProviderSession.DeleteTopic(Bloomberglp.Blpapi.Topic)"/>
            <param name="topics"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.SendResponse(Bloomberglp.Blpapi.Event)">
            <summary>
            Sends the response event for previously received request
            </summary>
            <param name="eventObj"><see cref="T:Bloomberglp.Blpapi.Event">response</see> to be sent</param>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified event is not a response.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.SendResponse(Bloomberglp.Blpapi.Event,System.Boolean)">
            <summary>
            Sends the response event for previously received request
            </summary>
            <param name="eventObj"><see cref="T:Bloomberglp.Blpapi.Event">response</see> to be sent</param>
            <param name="isPartialResponse">flag indicating whether response
            is partial and additional response events should be expected</param>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified event is not a response.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ProviderSession.SetEventHandler(Bloomberglp.Blpapi.ProviderEventHandler,Bloomberglp.Blpapi.Event.EventType)">
            <summary> Sets event specific event handlers
            </summary>
            <param name="eventHandler">new event handler to replace default event handler provided at
            construction</param>
            <param name="eventType">type of events to be delivered to the new handler</param>
            <exception cref="T:System.ArgumentException">
            The specified 'eventHandler' is null.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.ResolveMode">
            <summary> Resolve mode
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ResolveMode.DONT_REGISTER_SERVICES">
            <summary>
            Fail to resolve a topic if the service has not already been registered.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ResolveMode.AUTO_REGISTER_SERVICES">
            <summary>
            Try to register services found in ResolutionList if necessary.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Request">
            <summary> This class represents a single request to a particular service.
            </summary>
             <remarks> <para>
              Request objects are created using
             <see cref="M:Bloomberglp.Blpapi.Service.CreateRequest(System.String)">Service.CreateRequest(string)</see> or
             <see cref="M:Bloomberglp.Blpapi.Service.CreateAuthorizationRequest">Service.CreateAuthorizationRequest()</see>.
             They are used with
             <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
             Session.SendRequest(Request, UserHandle, EventQueue, CorrelationID, String)</see>
             or <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
             Session.SendAuthorizationRequest(Request, UserHandle, EventQueue, CorrelationID, String)</see>.
             The Request object contains the
             parameters for a single request to a single service. Once a Request has been
             created its fields can be populated directly using the convenience functions
             set() and append() or using the Element interface on the Element returned by
             <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             </para>
             <para>
              The schema for the Request can be queried using the
             <see cref="T:Bloomberglp.Blpapi.Element">Element</see> interface on the Element returned by
             <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             </para>
             </remarks>
             <threadsafety static="true" instance="false"/>
            
             <author>  Siva Somu (ssomu)
            
             </author>
        </member>
        <member name="P:Bloomberglp.Blpapi.Request.Operation">
            <summary>
            Gets the Operation this Request is intended to invoke on the
            associated Service.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Request.RequestId">
            <summary>
            Returns request id if one exists, otherwise, null.
            <para>
            If there are issues with this request, the request id can be
            reported to Bloomberg for troubleshooting purposes.
            </para>
            <para>
            Note that request id is not the same as correlation id and should
            not be used for correlation purposes.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.HasElement(Bloomberglp.Blpapi.Name)">
            <summary>
            Returns true if this request contains the element having the specified
            name false otherwise.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.HasElement(Bloomberglp.Blpapi.Name)">HasElement(name)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.HasElement(System.String)">
            <summary>
            Returns true if this request contains the element having the specified
            name false otherwise.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.HasElement(System.String)">HasElement(name)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.GetElement(Bloomberglp.Blpapi.Name)">
            <summary> Returns the modifiable element of this request having
            the specified name creating it if doesn't exist already.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">HasElement(name)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.GetElement(System.String)">
            <summary> Returns the modifiable element of this request having
            the specified name creating it if doesn't exist already.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">HasElement(name)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,System.Boolean)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Boolean)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,System.Boolean)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Boolean)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,System.Char)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Char)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,System.Char)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Char)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,System.Int32)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Int32)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,System.Int32)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Int32)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,System.Int64)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Int64)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,System.Int64)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Int64)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,System.Double)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Double)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,System.Double)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Double)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,System.Single)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Single)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,System.Single)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Single)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Datetime)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Datetime)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,Bloomberglp.Blpapi.Datetime)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Datetime)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Constant)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Constant)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,Bloomberglp.Blpapi.Constant)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Constant)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Name)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Name)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,Bloomberglp.Blpapi.Name)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(Bloomberglp.Blpapi.Name)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,System.String)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.String)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,System.String)">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.String)">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(Bloomberglp.Blpapi.Name,System.Byte[])">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(Bloomberglp.Blpapi.Name)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Byte[])">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Append(System.String,System.Byte[])">
            <summary>Appends the specified value to the named array element of this request.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.GetElement(System.String)">GetElement(name)</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.AppendValue(System.Byte[])">AppendValue(elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,System.Boolean)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Boolean)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,System.Boolean)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Boolean)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,System.Char)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Char)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,System.Char)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Char)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,System.Int32)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Int32)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,System.Int32)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Int32)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,System.Int64)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Int64)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,System.Int64)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Int64)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,System.Double)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Double)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,System.Double)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Double)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,System.Single)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Single)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,System.Single)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Single)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Datetime)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Datetime)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,Bloomberglp.Blpapi.Datetime)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,Bloomberglp.Blpapi.Datetime)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Constant)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Constant)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,Bloomberglp.Blpapi.Constant)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,Bloomberglp.Blpapi.Constant)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Name)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Name)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,Bloomberglp.Blpapi.Name)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,Bloomberglp.Blpapi.Name)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,System.String)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.String)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,System.String)">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.String)">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(Bloomberglp.Blpapi.Name,System.Byte[])">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(Bloomberglp.Blpapi.Name,System.Byte[])">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Set(System.String,System.Byte[])">
            <summary>Sets the element of this request having the specified name to the
            specified value.
            </summary>
            <remarks> Same as calling <see cref="P:Bloomberglp.Blpapi.Request.AsElement">AsElement</see>.
             <see cref="M:Bloomberglp.Blpapi.Element.SetElement(System.String,System.Byte[])">SetElement(name, elementValue)</see>.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Request.Item(Bloomberglp.Blpapi.Name)">
            <summary>
            This is the same as <c>GetElement(name)</c>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Request.Item(System.String)">
            <summary>
            This is the same as <c>GetElement(name)</c>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Request.AsElement">
            <summary>
            Gets the contents of this Request as an element.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Request.Elements">
            <summary>
            Gets the enumerable collection of all elements in this request.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Print(System.IO.Stream)">
            <summary> Prints the contents of this message to the specified Stream.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Request.Print(System.IO.TextWriter)">
            <summary> Prints the contents of this message to the specified TextWriter.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
             <summary>The exception that is thrown when the number of queued sending requests
             is over the limit.
             </summary>
            
             <threadsafety static="true" instance="false"/>
            
        </member>
        <member name="M:Bloomberglp.Blpapi.RequestQueueOverflowException.#ctor">
            <summary>Construct the exception without a description.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.RequestQueueOverflowException.#ctor(System.String)">
            <summary>Construct the exception with the description.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.RequestQueueOverflowException.#ctor(System.String,System.Exception)">
            <summary>Construct the exception with the description and the cause
            exception.
            </summary>
            <param name="description"></param>
            <param name="cause"></param>
        </member>
        <member name="P:Bloomberglp.Blpapi.RequestQueueOverflowException.Description">
            <summary> The description.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.RequestTemplate">
             <summary>
             This class provides a handle for a request template.
             </summary>
            
             <remarks>
             <para>
             Request templates are obtained from a Session and should be always used
             with the session that creates the template. When a session is
             terminated, any request templates associated with that session become
             invalid. Results of sending or canceling of invalid requests templates
             is undefined.
             </para>
             
             <para>
             In order to send a request represented by a template, the
             <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.RequestTemplate,Bloomberglp.Blpapi.CorrelationID)"/>
             method should be called with the 'RequestTemplate' object passed as the
             first argument.
             </para>
             
             <para>
             All handles should be closed by calling <see cref="M:Bloomberglp.Blpapi.RequestTemplate.close"/> method for
             releasing resources when a request template is no longer needed.
             </para>
             
             <para>
             Check <see cref="M:Bloomberglp.Blpapi.Session.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Identity)"/> for details about creation and management
             of snapshot request templates.
             </para>
             
             Usage example:
             <code>
             RequestTemplate requestTemplate
                  = session.createSnapshotRequestTemplate(
                       "//blp/mktdata/ticker/IBM US Equity,
                       statusCorrelationId,
                       identity);
             session.sendRequestTemplate(requestTemplate);
             requestTemplate.close();
             </code>
             </remarks>
             <author>Jing Guo (jguo108)</author>
        </member>
        <member name="M:Bloomberglp.Blpapi.RequestTemplate.close">
            <summary>
            Close the request template handle and release resources when
            possible.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ResolutionList">
            <summary> Resolution list is used to resolve a list of topics.
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.Resolve(Bloomberglp.Blpapi.IResolutionList)"/>
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.ResolveAsync(Bloomberglp.Blpapi.IResolutionList)"/>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.#ctor">
            <summary> Construct an empty resolution list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.Add(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified 'correlationId' is in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.Add(System.String)">
            <summary> Add the topic to the list.
            </summary>
            <param name="topic"></param>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified 'correlationId' is in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.AddAttribute(Bloomberglp.Blpapi.Name)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.Attribute(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.AttributeAt(Bloomberglp.Blpapi.Name,System.Int32)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.Message(Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException">
            The specified 'correlationId' is not in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.MessageAt(System.Int32)">
            <summary> Return the message at the index.
            </summary>
            <param name="index"></param>
            <returns>The message.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.CorrelationIdAt(System.Int32)">
            <summary> Return the correlation id at index.
            </summary>
            <param name="index"></param>
            <returns>The correlation id.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.TopicString(Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException">
            The specified 'correlationId' is not in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.TopicStringAt(System.Int32)">
            <summary> Return the topic string at index.
            </summary>
            <param name="index"></param>
            <returns>The topic string.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.Status(Bloomberglp.Blpapi.CorrelationID)">
            <summary> Return the resolution status corresponding to the
            correlation id.
            </summary>
            <param name="correlationId"></param>
            <returns>The resolution status corresponding to the
            correlation id.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.StatusAt(System.Int32)">
            <summary> Return the resolution status corresponding to the index.
            </summary>
            <param name="index"></param>
            <returns>The resolution status corresponding to the index.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.Size">
            <summary> Return the list size
            </summary>
            <returns>The size of the list.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.Add(Bloomberglp.Blpapi.Message)">
            <exception cref="T:System.ArgumentException">
            The specified 'msg' is not valid for resolution.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.ResolutionList.Add(Bloomberglp.Blpapi.Message,Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException">
            The specified 'msg' is not valid for resolution.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified 'correlationId' is in the list.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.ResolutionStatus">
            <summary> Resolution status
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ResolutionStatus.UNRESOLVED">
            <summary> Unresolved.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ResolutionStatus.RESOLVED">
            <summary> Resolved.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ResolutionStatus.RESOLUTION_FAILURE_BAD_SERVICE">
            <summary> Resolution failed due to bad service.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ResolutionStatus.RESOLUTION_FAILURE_SERVICE_AUTHORIZATION_FAILED">
            <summary> Resolution failed due to the service authorization
            failure.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ResolutionStatus.RESOLUTION_FAILURE_BAD_TOPIC">
            <summary> Failed to register service associated with the topic to
            resolve.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ResolutionStatus.RESOLUTION_FAILURE_TOPIC_AUTHORIZATION_FAILED">
            <summary> Resolution failed due to the topic authorization failure.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Schema">
             <summary> Contains constants used in the classes which represent the data model.
             </summary>
            
             <threadsafety static="true" instance="true"/>
            
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Schema.Status">
            <summary> Enumeration describing the status of various elements in the schema.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Status.ACTIVE">
            <summary>
            This item may appear in Messages.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Status.DEPRECATED">
            <summary>
            This item is current and may appear in Messages but will be removed
            in due course.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Status.INACTIVE">
            <summary>
            This item is not current and will not appear in messages.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Status.PENDING_DEPRECATION">
             <summary>
            
             </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Schema.Datatype">
            <summary> Enumerations for various data types supported in
             the schema.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.BOOL">
            <summary>
            bool</summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.BYTEARRAY">
            <summary>
            An array of bytes containing Opaque data.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.CHAR">
            <summary>
            Signed, 8 bit character (char).
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.DATE">
            <summary>
            See <see cref="T:Bloomberglp.Blpapi.Datetime">Datetime</see>.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.DATETIME">
            <summary>
            See <see cref="T:Bloomberglp.Blpapi.Datetime">Datetime</see>.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.ENUMERATION">
            <summary>
            An opaque Enumeration type.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.FLOAT32">
            <summary>
            32 bit floating point value (float).
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.FLOAT64">
            <summary>
            64 bit floating point value (double).
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.INT32">
            <summary>
            32 bit signed integer (int).
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.INT64">
            <summary>
            64 bit signed integer (long)
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.STRING">
            <summary>
            System.String.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.TIME">
            <summary>
            See <see cref="T:Bloomberglp.Blpapi.Datetime">Datetime</see>.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.SEQUENCE">
            <summary>
            A complex type containing an ordered collection of one or more
            elements.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Schema.Datatype.CHOICE">
            <summary>
            A complex type containing a selection from a set of elements.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Schema.GetTypeDefinition(Bloomberglp.Blpapi.Name)">
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.SchemaElementDefinition">
             <summary>  The definition of an item in a data schema.
             </summary>
             <remarks> <para>
               SchemaElementDefinition are returned by {@link Service} objects and
             {@link Operation} objects to define the content of requests, replies and
             events. The {@link SchemaTypeDefinition} returned by
             {@link SchemaElementDefinition#typeDefinition()} may itself return
             SchemaElementDefinition objects when the schema contains complex items.
             SchemaElementDefinition objects are read-only and always created by the API,
             never by the application. The SchemaElementDefinition defines the symbolic
             name any constraints on this item and the SchemaTypeDefinition which
             represents instances of this item.
               </para>
             <para>
              <list type="bullet">
             <item><description>
             An item which is optional in the schema has
             <see cref="P:Bloomberglp.Blpapi.SchemaElementDefinition.MinValues">
             SchemaElementDefinition.MinValues</see> == 0.
             </description></item>
             <item><description>
              An item which is mandatory in the schema has
             <see cref="P:Bloomberglp.Blpapi.SchemaElementDefinition.MinValues">
             SchemaElementDefinition.MinValues</see> >= 1.
             </description></item>
             <item><description>
             An item which is a single value has
             <see cref="P:Bloomberglp.Blpapi.SchemaElementDefinition.MaxValues">
             SchemaElementDefinition.MaxValues</see> == 1.
             </description></item>
             <item><description>
             An item which is an array has
             <see cref="P:Bloomberglp.Blpapi.SchemaElementDefinition.MaxValues">
             SchemaElementDefinition.MaxValues</see> > 1.
             </description></item>
             <item><description>
              An item which is an unbounded array has
             <see cref="P:Bloomberglp.Blpapi.SchemaElementDefinition.MaxValues">
             SchemaElementDefinition.MaxValues</see> ==
             <see cref="F:Bloomberglp.Blpapi.SchemaElementDefinition.UNBOUNDED">
             SchemaElementDefinition.UNBOUNDED</see>.
             </description></item>
             </list>
             </para>
            
             <para> As well as the symbolic name, array constraints and other constraints this
             class also provides access to the description and status of the item.
             </para>
             </remarks>
            
             <threadsafety static="true" instance="true"/>
            
             <author>  Chao Yao(cyao3)
             </author>
        </member>
        <member name="F:Bloomberglp.Blpapi.SchemaElementDefinition.UNBOUNDED">
            <summary>
            Indicates that an array element has an unbounded number of values.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.UserData">
            <summary>
            Sets and gets the user data associated with this object.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.Name">
            <summary>
            Gets the name of this item.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.Description">
            <summary>
            Gets a string containing a human readable description of this item.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.Status">
            <summary>
            Gets the status of this <c>SchemaElementDefinition</c>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.TypeDefinition">
            <summary>
            Gets the <c>SchemaTypeDefinition</c> of this item.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.MinValues">
            <summary>
            Gets the minimum number of occurrences of this item. This value is
            always &gt;= 0.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.MaxValues">
            <summary>
            Return the maximum number of occurrences of the this item. This value may
            be UNBOUNDED (-1) or any value &gt;= 1.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.Constraints">
            <summary> Return the list of constraints.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.NumAlternateNames">
            <summary>
            Gets the number of alternate names for this item.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.SchemaElementDefinition.GetAlternateName(System.Int32)">
            <summary>
            Gets the alternate name for this item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.SchemaElementDefinition.NumAlternateNames"/>
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaElementDefinition.AlternateNames">
            <summary>
            Creates an enumerable collection of all alternate names.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.SchemaTypeDefinition">
             <summary> The definition of a type in the schema.
             </summary>
             <remakrs> <para>
             Each <see cref="T:Bloomberglp.Blpapi.SchemaElementDefinition">SchemaElementDefinition</see>
             object has a SchemaTypeDefinition
             (which it may share with other
             <see cref="T:Bloomberglp.Blpapi.SchemaElementDefinition">SchemaElementDefinition</see> objects).
             SchemaTypeDefinition objects are read-only and always created by the API,
             never by the application.
             </para>
             <para> A SchemaTypeDefinition can define items which are either simple (that is,
             they are a single value) or a sequence or a choice Element (that is, they
             may contain an item or items which are accessed by name).
             </para>
             <para> For sequence or choice items the SchemaTypeDefinition provides
             access to the individual
             <see cref="T:Bloomberglp.Blpapi.SchemaElementDefinition">SchemaElementDefinition</see> objects)
             objects that define each member of the sequence.
             </para>
             <para>  In addition, the SchemaTypeDefinition provides access to the symbolic name
             of the TypeDefinition, its description and its status.
             </para>
             </remakrs>
             <threadsafety static="true" instance="true"/>
            
             <author>  Chao Yao(cyao3)
            
             </author>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.UserData">
            <summary>
            Sets and gets the user data associated with this SchemaTypeDefinition.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Name">
            <summary>
            Gets the name of this <c>SchemaTypeDefinition</c>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Description">
            <summary>
            Gets a string which contains a human readable description of this
            <c>SchemaTypeDefinition</c>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Status">
            <summary>
            Gets the status of this <c>SchemaTypeDefinition</c>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Datatype">
            <summary>
            Gets the <see cref="T:Bloomberglp.Blpapi.Schema.Datatype">Schema.Datatype</see>
            of this <c>SchemaTypeDefinition</c>.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.IsComplexType">
            <summary>
            Gets <c>true</c> if this <c>SchemaTypeDefinition</c>
            defines a Sequence or a Choice
            type.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.IsSimpleType">
            <summary>
            Gets <c>true</c> if this <c>SchemaTypeDefinition</c>
            defines a primitive type.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.IsEnumerationType">
            <summary>
            Gets <c>true</c> if this <c>SchemaTypeDefinition</c>
            defines an enumeration type.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Enumeration">
            <summary>
            Gets a <see cref="T:Bloomberglp.Blpapi.ConstantsList">ConstantsList</see>
            of all the enumerators for this
            <c>SchemaTypeDefinition</c> if this type is an Enumeration type.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Constraints">
            <summary> Return the constraint list.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.SchemaTypeDefinition.HasElementDefinition(Bloomberglp.Blpapi.Name)">
            <summary>
            Returns true if this <c>SchemaTypeDefinition</c> contains
            an <c>ElementDefinition</c>
            having the specified name.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.ElementDefinitions">
            <summary>
             Returns an enumerable collection of all <c>SchemaElementDefinition</c>s in this type.
            </summary>
            <returns>
            An enumerabale collection of <c>SchemaElementDefinition</c>.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Item(System.Int32)">
            <summary>
             Returns the <c>SchemaElementDefinition</c> at the specified index in this
            <c>SchemaTypeDefinition</c>.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.SchemaTypeDefinition.NumElementDefinitions">NumElementDefinitions</see>
            </exception>
            <returns>
            The SchemaElementDefinition located at <c>index</c>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The specified index is out of the definition list.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Item(System.String)">
            <summary>
             Gets the SchemaElementDefinition with <c>name</c>.
            </summary>
            <returns>
            The SchemaElementDefinition with <c>name</c>.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            This SchemaTypeDefinition does not contain
            ElementDefinition with the specified name.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.Item(Bloomberglp.Blpapi.Name)">
            <summary>
             Gets the SchemaElementDefinition with <c>name</c>.
            </summary>
            <returns>
            The SchemaElementDefinition with <c>name</c>.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            This SchemaTypeDefinition does not contain
            ElementDefinition with the specified name.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.SchemaTypeDefinition.GetElementDefinition(Bloomberglp.Blpapi.Name)">
            <summary>Returns the <c>SchemaElementDefinition</c> having
            the specified name in this
            <c>SchemaTypeDefinition</c>.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            This SchemaTypeDefinition does not contain
            ElementDefinition with the specified name.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.SchemaTypeDefinition.GetElementDefinition(System.String)">
            <summary>Returns the <c>SchemaElementDefinition</c> having
            the specified name in this
            <c>SchemaTypeDefinition</c>.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            This SchemaTypeDefinition does not contain
            ElementDefinition with the specified name.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.SchemaTypeDefinition.NumElementDefinitions">
            <summary>
            Gets the number of <c>ElementDefinition</c> in
            this <c>SchemaTypeDefinition</c>.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.SchemaTypeDefinition.GetElementDefinition(System.Int32)">
            <summary>
             Returns the SchemaElementDefinition at the specified index in this
            <c>SchemaTypeDefinition</c>.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.SchemaTypeDefinition.NumElementDefinitions">NumElementDefinitions</see>
            </exception>
            <returns>
            The SchemaElementDefinition located at <c>index</c>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The specified index is out of the definition list.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.Service">
             <summary>
             Defines a service which provides access to API data.
            </summary>
            <remarks>
             <para> A Service object is obtained from a <see cref="T:Bloomberglp.Blpapi.Session" /> and contains the
             Operations (each of which contains its own schema) and the schema for Events
             which this Service may produce. A Service object is also used to create
             Request objects used with a <see cref="T:Bloomberglp.Blpapi.Session" /> to issue requests.
             </para>
            
             <para>
             All data delivered via the API is associated with a service. Before
             accessing data using the API using either request-reply or subscription, the
             appropriate Service must be opened and, if necessary, authorized.
            </para>
             </remarks>
             <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:Bloomberglp.Blpapi.Service.Name">
            <summary>
            Gets a string which contains the name of this Service.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Service.NumOperations">
            <summary>
            Gets  the number of Operations defined by this Service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.GetOperation(System.Int32)">
            <summary> Gets the <see cref="T:Bloomberglp.Blpapi.Operation"/> of this Service
            at the specified index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Service.NumOperations"/>.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.GetOperation(System.String)">
            <summary>Gets the <see cref="T:Bloomberglp.Blpapi.Operation">Operation</see>
                of this Service having the specified name.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The operation with the specified name cannot be found.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.GetOperation(Bloomberglp.Blpapi.Name)">
            <summary>Gets the <see cref="T:Bloomberglp.Blpapi.Operation">Operation</see>
                of this Service having the specified name.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The operation with the specified name cannot be found.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Service.Operations">
            <summary>Gets the enumerable collection of all Operations.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Service.NumEventDefinitions">
            <summary>Gets the number of unsolicited events defined by this Service.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.GetEventDefinition(System.Int32)">
            <summary> Gets the <see cref="T:Bloomberglp.Blpapi.SchemaElementDefinition"/> of the event of this Service
            at the specified index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            index >= <see cref="P:Bloomberglp.Blpapi.Service.NumEventDefinitions"/>.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.GetEventDefinition(System.String)">
            <summary>Gets the <see cref="T:Bloomberglp.Blpapi.SchemaElementDefinition">
            SchemaElementDefinition</see>
            of the event of this Service with the specified name.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The Event having the specified name cannot be found in this Service.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.GetEventDefinition(Bloomberglp.Blpapi.Name)">
            <summary>Gets the <see cref="T:Bloomberglp.Blpapi.SchemaElementDefinition">
            SchemaElementDefinition</see>
            of the event of this Service with the specified name.
            </summary>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            The Event having the specified name cannot be found in this Service.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Service.AuthorizationServiceName">
            <summary> Gets the name of the Service which must be used in order to authorize
            access to restricted operations on this Service.
            </summary>
            <remarks> If no authorization is required to access operations
            on this service, an empty string is returned. Authorization
            services never require authorization to use.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.Service.EventDefinitions">
            <summary>
             Gets an enumerable collection of all event definitions in this service.
            </summary>
            <returns>
            An enumerabale collection of <c>SchemaElementDefinition</c>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.CreateRequest(System.String)">
            <summary> Returns an empty Request object for the specified operation.
            </summary>
            <remarks>  An application must populate the Request before issuing it using
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
            Session.SendRequest()</see>.
            </remarks>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            An Operation with the specified name could not be found in this service.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.CreateAuthorizationRequest">
            <summary>
            Returns an empty <see cref="T:Bloomberglp.Blpapi.Request"/> object to be used for authorization.
            The request id of the new request, i.e. <see cref="P:Bloomberglp.Blpapi.Request.RequestId"/>,
            is <c>null</c>.
            </summary>
            <para>
            An application must populate the <see cref="T:Bloomberglp.Blpapi.Request"/> before using it with
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)"/>.
            </para>
            <para>
            Note that this method can be called only on authorization services.
            This method will throw a <see cref="T:Bloomberglp.Blpapi.NotFoundException"/> if this
            <see cref="T:Bloomberglp.Blpapi.Service"/> does not provide an AuthorizationRequest
            operation. The request created by this method can be used for authorizing
            users to receive data from another <see cref="T:Bloomberglp.Blpapi.Service"/> that requires
            this authorization.
            </para>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
            This service does not have an <c>AuthorizationRequest</c> operation.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.Print(System.IO.Stream)">
            <summary> Prints the schema of this service to Stream.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.Print(System.IO.TextWriter)">
            <summary> Prints the schema of this service to TextWriter.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.CreatePublishEvent">
            <summary>
            Create an {@link Event} suitable for publishing to this Service.
            Use an {@link EventFormatter} to add Messages to the Event
            and set fields.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.CreateAdminEvent">
            <summary>
            Create an Admin Event suitable for publishing to this Service.
            Use an <see cref="T:Bloomberglp.Blpapi.EventFormatter" /> to add Messages to the
            Event and set fields.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Service.CreateResponseEvent(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Create a response Event to answer the request.
            Use an EventFormatter to add a Message to the Event and set fields.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ServiceRegistrationOptions">
            <summary>
            Contains the options which the user can specify when registering a
            service.
            </summary>
            <remarks>
            To use non-default options to registerService, create an instance and
            set the required options and then supply it when using the
            RegisterService interface.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.ServiceRegistrationOptions.ServiceRegistrationPriority">
            <summary>
            Constants for specifying the priority of registered service.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.ServiceRegistrationPriority.PRIORITY_LOW">
            <summary> Low
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.ServiceRegistrationPriority.PRIORITY_MEDIUM">
            <summary> Medium
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.ServiceRegistrationPriority.PRIORITY_HIGH">
            <summary> High
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ServiceRegistrationOptions.RegistrationParts">
            <summary>
            Constants for specifying which part(s) of a service should be
            registered
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.RegistrationParts.PART_DEFAULT">
            <summary>
            Registering the parts of the service implied by options
            specified in the service metadata.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.RegistrationParts.PART_PUBLISHING">
            <summary>
            Registering to receive subscribe and unsubscribe messages.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.RegistrationParts.PART_OPERATIONS">
            <summary>
            registering to receive the request types corresponding to each
            "operation" defined in the service metadata.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.RegistrationParts.PART_SUBSCRIBER_RESOLUTION">
            <summary>
            Registering to receive resolution requests (with message type
            'PermissionRequest') from subscribers.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.RegistrationParts.PART_PUBLISHER_RESOLUTION">
            <summary>
            registering to receive resolution requests (with message type
            'PermissionRequest') from subscribers
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ServiceRegistrationOptions.#ctor">
            <summary>Constructs a ServiceRegistrationOptions with well defined
            defaults for various options. Currently the following defaults are
            applied.
            </summary>
            <remarks>Currently the following defaults are applied<br/>
            groupId                        = null<br/>
            priority                       = PRIORITY_HIGH<br/>
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.ServiceRegistrationOptions.GroupId">
            <summary>
            Gets or sets Group ID for the service to be registered.
            </summary>
            <remarks>
            If the input groupId length > MAX_GROUP_ID_SIZE (=64) only the
            first MAX_GROUP_ID_SIZE chars are considered as Group Id.
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.ServiceRegistrationOptions.ServicePriority">
            <summary>
            Gets or sets the non-negative priority for a subscription service.
            <para>
            The service will be registered to the specified value,
            where numerically greater values indicate higher priorities. The
            behavior is undefined unless the value is non-negative.
            </para>
            <para>
            Note that while the values of
            <see cref="T:Bloomberglp.Blpapi.ServiceRegistrationOptions.ServiceRegistrationPriority"/> are suitable for use
            here, any non-negative value is acceptable.
            </para>
            <para>
            By default, a service will be registered with
            <see cref="F:Bloomberglp.Blpapi.ServiceRegistrationOptions.ServiceRegistrationPriority.PRIORITY_HIGH"/>.
            </para>
            <para>
            Note that this will not have any effect for request-response or
            resolution services.
            </para>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.ServiceRegistrationOptions.PartsToRegister">
            <summary>
            Gets or sets he parts of the service to be registered. See
            <see cref="T:Bloomberglp.Blpapi.ServiceRegistrationOptions.RegistrationParts">
            RegistrationParts</see>, above for additional details.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ServiceRegistrationOptions.AddActiveSubServiceCodeRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Advertises the service to be registered to receive, with the
            specified <paramref name="priority"/>, subscriptions that the
            resolver has mapped to a service code between the specified
            <paramref name="begin"/> and the specified <paramref name="end"/>
            values, inclusive.
            <para>
            Numerically greater values of <paramref name="priority"/>
            indicate higher priorities.The behavior of this function is
            undefined unless '0 &lt;= <paramref name="begin"/> &lt;=
            <paramref name="end"/> &lt; (1 &lt;&lt; 24)',
            and <paramref name="priority"/> is non-negative.
            </para>
            </summary>
            <param name="begin">
            The begining of the sub-service code range that the service will
            be advertising, inclusive.
            </param>
            <param name="end">
            The end of the sub-serivce code range that the service will be
            advertising, inclusive.
            </param>
            <param name="priority">
            The priority that the service will be registered with. Numerically
            greater values indicate higher priorities.
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.ServiceRegistrationOptions.RemoveAllActiveSubServiceCodeRanges">
            <summary>
            Removes all previously added sub-service code ranges.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.Session">
             <summary> This class provides a session for making requests and subscriptions to
             services.
             </summary>
             <threadsafety static="true" instance="true"/>
             <remarks>
             <para>
             Sessions manage access to services either by requests and responses or
             subscriptions. A Session can dispatch events and replies in either a
             synchronous or asynchronous mode. The mode of a Session is determined when
             it is constructed and cannot be changed subsequently. </para>
             <para>
             A Session is asynchronous if an <see cref="T:Bloomberglp.Blpapi.EventHandler">EventHandler</see>
             object is supplied whenit is constructed. The
             <see cref="M:Bloomberglp.Blpapi.Session.SetEventHandler(Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.Event.EventType)">
             SetEventHandler()</see> method may be called
             to adjust the way events are handled subsequently and the
             <see cref="M:Bloomberglp.Blpapi.AbstractSession.NextEvent">NextEvent()</see> method
             may not be called. All incoming events are
             delivered to the EventHandler(s) supplied on construction or subsequently using
             <see cref="M:Bloomberglp.Blpapi.Session.SetEventHandler(Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.Event.EventType)">
             SetEventHandler()</see>. </para>
            
             <para>
             A Session is synchronous if an <see cref="T:Bloomberglp.Blpapi.EventHandler">EventHandler</see>
             object is not supplied
             when it is constructed. The <see cref="M:Bloomberglp.Blpapi.AbstractSession.NextEvent">NextEvent()</see>
             method must be called to read incoming events and the
             <see cref="M:Bloomberglp.Blpapi.Session.SetEventHandler(Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.Event.EventType)">
             SetEventHandler()</see>
             method may not be called. Several methods in Session take a
             <see cref="T:Bloomberglp.Blpapi.CorrelationID">CorrelationID</see> parameter.
             The application may choose to supply its
             own CorrelationID values or allow the Session to create values. If the
             application supplies its own CorrelationID values it must manage their
             lifetime such that the same value is not reused for more than one operation
             at a time. The lifetime of a CorrelationID begins when it is supplied in a
             method invoked on a Session and ends either when it is explicitly cancelled
             using <see cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID)">Cancel(CorrelationID)</see>,
             when a <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE">Event.EventType.RESPONSE</see>
             Event (not a PARTIAL_RESPONSE) containing
             it is received or when a
              <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS">Event.EventType.SUBSCRIPTION_STATUS</see>
             Event which indicates that the subscription it refers to has been terminated is
             received. </para>
             <para>
             When using an asynchronous Session the application must be aware that
             because the callbacks are generated from another thread they may be
             processed before the call which generates them has returned. For example,
             the <see cref="F:Bloomberglp.Blpapi.Event.EventType.SESSION_STATUS">Event.EventType.SESSION_STATUS</see>
             Event generated by the <see cref="M:Bloomberglp.Blpapi.AbstractSession.StartAsync"></see>
             may be processed before StartAsync() has
             returned (even though StartAsync() itself will not block). </para>
            
             <para>
             This becomes more significant when Session generated CorrelationIds are in
             use. For example, if a call to
             <see cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
             Subscribe()</see> which returns a Session generated
             <see cref="T:Bloomberglp.Blpapi.CorrelationID">CorrelationID</see>
             has not completed before the first Events which
             contain that CorrelationID arrive the application may not be able to
             interpret those events correctly. For this reason, it is preferable to use
             user generated CorrelationIDs when using asynchronous Sessions. This issue
             does not arise when using a synchronous Session as long as the calls to
             Subscribe() etc are made on the same thread as the calls to NextEvent().
             </para>
             </remarks>
             <threadsafety static="true" instance="true"/>
             <author>
             Siva Somu (ssomu)
             </author>
        </member>
        <member name="T:Bloomberglp.Blpapi.Session.SubscriptionStatus">
            <summary> SubscriptionStatus lists the
            possible statuses a Subscription may be in.
            </summary>
            <author> Siva Somu (ssomu)
            </author>
        </member>
        <member name="F:Bloomberglp.Blpapi.Session.SubscriptionStatus.SUBSCRIBING">
            <summary> Indicates a subscription request has been
            sent and the response is pending.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Session.SubscriptionStatus.WAITING_FOR_MESSAGES">
            <summary>
            Indicates that the subscription has successfully completed. But no
            messages have been received for the subscribed instrument.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Session.SubscriptionStatus.RECEIVING_MESSAGES">
            <summary>
            Indicates that the subscription has successfully completed and
            messages are being received for the subscribed instrument.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Session.SubscriptionStatus.UNSUBSCRIBED">
            <summary> Indicates that this instrument is unsubscribed
            and no messages will be received for it.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.Session.SubscriptionStatus.RESUBSCRIBING">
            <summary> Indicates a Resubscribe request has been sent and the response is
            pending.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.#ctor">
            <summary> Same as calling
            <see cref="M:Bloomberglp.Blpapi.Session.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.EventDispatcher)">
            Session(new SessionOptions(), null, null)
            </see>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.#ctor(Bloomberglp.Blpapi.SessionOptions)">
            <summary>
            Creates a session with the specified <c>sessionOptions</c>.
            <remarks> Same as calling <see cref="M:Bloomberglp.Blpapi.Session.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.EventDispatcher)">
            Session(sessionOptions, null, null)</see>.
            </remarks>
            <param name="sessionOptions">Values in sessionOptions are used for configuring this
            session.
            </param>
            <seealso cref="M:Bloomberglp.Blpapi.Session.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.EventDispatcher)">
            </seealso>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.EventHandler)">
            <summary>
            Creates a session with the specified <c>sessionOptions</c> and dispatch
            events on this session to the specified <c>handler</c>
            <remarks>
            Same as calling
            <see cref="M:Bloomberglp.Blpapi.Session.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.EventDispatcher)">
            Session(sessionOptions, handler, null)
            </see>
            </remarks>
            <param name="sessionOptions">Values in sessionOptions are used for configuring this
            session.
            </param>
            <param name="handler">The event handler to which all events are delivered.
            </param>
            <seealso cref="M:Bloomberglp.Blpapi.Session.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.EventDispatcher)">
            </seealso>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.#ctor(Bloomberglp.Blpapi.SessionOptions,Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.EventDispatcher)">
             <summary>
             Creates a session with the specified <c>sessionOptions</c> and dispatch
             events on this <c>session</c> using the provided <c>dispatcher
             </c> to the specified <c>handler</c>
            
             <remarks> See <see cref="T:Bloomberglp.Blpapi.SessionOptions">SessionOptions</see>
             for information on what options can be specified.
            
             <para>
             If the specified eventHandler is not null then this Session will operate
             in asynchronous mode, otherwise the Session will operate in Synchronous
             mode. </para>
            
             <para>
             If eventDispatcher is null then the Session will create a default
             <see cref="T:Bloomberglp.Blpapi.EventDispatcher">EventDispatcher</see>
             for this Session which will use a single thread
             for dispatching events. For more control over event dispatching a
             specific instance of <see cref="T:Bloomberglp.Blpapi.EventDispatcher">EventDispatcher</see>
             can be supplied. This can
             be used to share a single <see cref="T:Bloomberglp.Blpapi.EventDispatcher">EventDispatcher</see>
             among multiple Session
             objects. </para>
             <para>
             If an eventDispatcher is supplied which uses more than one thread the
             Session will ensure that events which should be ordered are passed to
             callbacks in a correct order. For example, updates to a single
             subscription. </para>
             <para>
             Each  <see cref="T:Bloomberglp.Blpapi.EventDispatcher">EventDispatcher</see>
             uses its own thread or pool of threads so
             if you want to ensure that a session which receives very large messages
             and takes a long time to process them does not delay a session that
             receives small messages and processes each one very quickly then give
             each one a separate  <see cref="T:Bloomberglp.Blpapi.EventDispatcher">EventDispatcher</see>.
             </para>
             </remarks>
             <param name="sessionOptions">Values in sessionOptions are used for configuring this
             session.
             </param>
             <param name="handler">The event handler to which all events are delivered.
             </param>
             <param name="dispatcher">The dispatcher to be used for dispatching events.
             </param>
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.RequestTemplate,Bloomberglp.Blpapi.CorrelationID)">
             <summary>
             Send a request defined by the specified 'requestTemplate'. If the
             optionally specified 'correlationId' is supplied, use it otherwise
             create a new 'CorrelationId'. The actual 'CorrelationId' used is
             returned.
            
             A successful request will generate zero or more 'PARTIAL_RESPONSE'
             events followed by exactly one 'RESPONSE' event. Once the final
             'RESPONSE' event has been received the 'CorrelationId' associated
             with  this request may be re-used. If the request fails at any
             stage a 'REQUEST_STATUS' will be generated after which the
             'CorrelationId' associated with the request may be re-used.
             </summary>
             <param name="requestTemplate">
             The request template used for sending a request
             </param>
             <param name="correlationId">
             The correlation id used for delivering a response
             </param>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             Thrown if correlationId is already in use
             </exception>
             <returns>
             An internally generated CorrelationID if the specified
             correlationId is null or return the specified correlationId
             </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.RequestTemplate)">
            <summary>
            Same as calling 'SendRequest(requestTemplate, null)'
            </summary>
            <param name="requestTemplate">
            The request template used for sending a request
            </param>
            <returns>
            An internally generated CorrelationID
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Identity)">
             <summary>
             Create a snapshot service request template for getting subscription
             data specified by the 'subscriptionString' using the optionally
             specified 'identity' if all the following conditions are met: the
             session is established, 'subscriptionString' is a valid
             subscription string and 'statusCid' is not used in this session. If
             one or more conditions are not met, an exception is thrown. The
             provided 'statusCid' will be used for an implied subscription
             associated with the create request template. The created request
             template status updates will be delivered using ADMIN events.
            
             <para>
             The benefit of the snapshot service request templates is that these
             requests may be serviced from a cache and the user may expect to
             see significantly lower response time.
             </para>
            
             <para>
             There are 3 possible states for a created request template:
             'Pending', 'Available', and 'Terminated'. A 'RequestTemplate' is
             initially in the 'Pending' state.
             </para>
            
             <para>
             The user may send a request using a template that is in 'Pending'
             state. If this succeeds, the state of that template changes to
             'Available'. Note that response times to receive data may be longer
             than a response time for a request in the 'Available' state since
             request caches may not yet have been established. A template may
             transition back into 'Pending' state from the 'Available' state, in
             which case a 'RequestTemplatePending' message will be generated.
             </para>
            
             <para>
             If state is 'Available', all requests will be serviced from a cache
             and the user may expect to see significantly reduced latency. Note,
             that a snapshot request template can transition out of the
             'Available' state concurrently with requests being sent, so no
             guarantee of service from the cache can be provided. Request
             template may transition into 'Available' state only from the
             'Pending' state. In this case the 'RequestTemplateAvailable'
             message is generated. This message will also contain information
             about currently used connection in the 'boundTo' field. Note that
             it is possible to get the 'RequestTemplateAvailable' message with a
             new connection information, even if a request template is already
             in the 'Available' state.
             </para>
            
             <para>
             If state is 'Terminated', sending request will always result in a
             failure response. Request template may transition into this state
             from any other state. This is a final state and it is guaranteed
             that the last message associated with the provided 'statusCid' will
             be the 'RequestTemplateTerminated' message which is generated when
             a request template transitions into this state. If a request
             template transitions into this state, all outstanding requests will
             be failed and appropriate messages will be generated for each
             request. After receiving the 'RequestTemplateTerminated' message,
             'statusCid' may be reused.
             </para>
            
             <para>
             Note that resources used by a snapshot service request template are
             released only when request template transitions into the
             'Terminated' state or when session is destroyed. In order to
             release resources when request template is not needed anymore, user
             should call <see cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID)"/> or
             <see cref="M:Bloomberglp.Blpapi.RequestTemplate.close"/> unless the 'RequestTemplateTerminated'
             message was already received due to some problems. If the
             'Session.cancel' method is used, all outstanding requests are
             canceled and the underlying subscription is closed immediately. If
             the handle is closed with the 'RequestTemplate.close' method, the
             underlying subscription is closed only when all outstanding
             requests are served.
             Note that it is possible to have a situation when response contain
             data that were sent by a backend before user actually sends a
             request template. For example it is possible if user requested data
             were already in an incoming TCP queue.
             </para>
             </summary>
            
             <param name="subscriptionString">
             The subscription string used for creating a request template
             </param>
             <param name="statusCid">
             the correlation id used for delivering of request template status
             updates
             </param>
             <param name="identity">
             The <see cref="T:Bloomberglp.Blpapi.Identity"/> used to authorize access to the data for
             this request tempalte. A value of null indicates authorization is
             not needed.
             </param>
             <returns>
             A created request template
             </returns>
             <exception cref="T:System.ArgumentException">
             Thrown if no subscription string specified
             </exception>
             <exception
             cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             Thrown if the provided status correlation id is already used
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown if the session is not in 'Established' state or no
             subscription management endpoints are available
             </exception>
             <exception cref="T:System.IO.IOException">
             Thrown if a network communication problem happens
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Same as calling <see cref="M:Bloomberglp.Blpapi.Session.createSnapshotRequestTemplate(System.String,Bloomberglp.Blpapi.CorrelationID,Bloomberglp.Blpapi.Identity)"> <c>createSnapshotRequestTemplate(
            subscriptionString, statusCid, null)</c></see>
            <para>
            The session identity will be used if it's been authorized.
            </para>
            </summary>
            <param name="subscriptionString">
            The subscription string used for creating a request template
            </param>
            <param name="statusCid">
            the correlation id used for delivering of request template status
            updates
            </param>
            <returns>
            A created request template
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if no subscription string specified
            </exception>
            <exception
            cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            Thrown if the provided status correlation id is already used
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the session is not in 'Established' state or no
            subscription management endpoints are available
            </exception>
            <exception cref="T:System.IO.IOException">
            Thrown if a network communication problem happens
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription})">
             <summary>
             Initiates a request to receive asynchronous updates to the
             specified topics.
             <para>
             The session identity will be used if it's been authorized.
             </para>
             </summary>
            
             <remarks>
              Same as calling <see cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
             Subscribe(subscriptionList, null, null)</see>.
             </remarks>
            
             <param name="subscriptionList"> A list of subscription strings to subscribe
             </param>
            
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             Any of the correlationIds specified in the subscriptionList is not unique.
             </exception>
             <exception cref="T:System.ArgumentException">
             The specified 'subscriptionList' is null or empty.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
             <summary>
             Initiates a request to receive asynchronous updates to the
             specified topics.
             <para>
             The session identity will be used if it's been authorized.
             </para>
             </summary>
            
             <remarks>
              Same as calling <see cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
             Subscribe(subscriptionList, null, requestLabel)</see>.
             </remarks>
            
             <param name="subscriptionList"> A list of subscription strings to subscribe
             </param>
             <param name="requestLabel">
             A label that defines a string which will be recorded along with
                                any diagnostics for this operation.
             </param>
            
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             Any of the correlationIds specified in the subscriptionList is not unique.
             </exception>
             <exception cref="T:System.ArgumentException">
             The specified 'subscriptionList' is null or empty.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity)">
             <summary> Initiates a request to receive asynchronous updates
             to the specified topics.
             </summary>
             <remarks>
             This is the same as calling
             <see cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
             Subscribe(subscriptionList, identity, null)</see>.
             </remarks>
            
             <param name="subscriptionList"> A list of subscription strings to subscribe.
              </param>
             <param name="identity"> The handle to the user for whom this subscription is
                              being initiated.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             Any of the correlationIds specified in the subscriptionList is not unique.
             </exception>
             <exception cref="T:System.ArgumentException">
             The specified Identity was not created through this Session.
             The specified 'subscriptionList' is null or empty.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.UserHandle)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity)"/> instead.
            </summary>
            <param name="subscriptionList"></param>
            <param name="userHandle"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
             <summary> Initiates a request to receive asynchronous updates to the specified
             topics in the <c>subscriptionList</c>.
             </summary>
             <remarks>
             <para>
             Once this has method has returned any subscriptions in the specified
             subscriptionList which were not given a application generated
             <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> will have a session generated CorrelationID set.
             Multiple subscriptions to the same subscriptionString are valid and each
             will have their own, unique CorrelationID. This method should only be
             called after the Session has successfully started up. If an exception is
             thrown none of the subscriptions in the list would have been processed.
             </para>
            
             <para>
             If a <c>identity</c> is specified then the subscribe request
              is issued on behalf of the user represented by the handle. Use
             the <see cref = "M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)">
             SendAuthorizationRequest</see>
             to authorize an user for accessing the specified service.
             </para>
            
             <para>
             Upon completion of this request a
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event will be published for
             each topic in the subscription list containing a message with the result
             for one topic. A "SubscriptionStarted" message will be generated if the
             subscription was successfully initiated. If the subscription fails
             for any topic a "SubscriptionFailure" message containing the failure
             reason will be generated.
             </para>
             </remarks>
            
             <param name="subscriptionList"> A list of subscription strings to subscribe.
              </param>
             <param name="identity"> The handle to the user for whom this subscription is
                 being initiated.
             </param>
             <param name="requestLabel">
             A label that defines a string which will be recorded along with
                                any diagnostics for this operation.
             </param>
            
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is not unique.
             </exception>
             <exception cref="T:System.ArgumentException">
             The specified Identity was not created through this Session.
             The specified 'subscriptionList' is null or empty.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.UserHandle,System.String)">
            <summary> Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)"/> instead.
            </summary>
            <param name="subscriptionList"></param>
            <param name="userHandle"></param>
            <param name="requestLabel"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription})">
             <summary> Modifies each subscription in the specified subscriptionList to reflect
             the modified options specified for it.
             </summary>
            
             <remarks> This is the same as calling
             <see cref="M:Bloomberglp.Blpapi.Session.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
              Resubscribe(subscriptionList, null)</see>.
             </remarks>
            
             <param name="subscriptionList"> A subscription list with new subscriptions and existing
             correlation IDs.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             Any of the CorrelationIDs specified in the
                     subscriptionList is not a valid subscription.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
             <summary>  Modifies each subscription in the specified subscriptionList to reflect
             the modified options specified for it.
             </summary>
            
             <remarks>  For each entry in the subscriptionList the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>
             identifies a current "active" subscription the modified options replace
             the current options for the subscription and a
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event will be generated in
             the event stream before the first update based on the new options.
             </remarks>
             <param name="subscriptionList"> A list of active subscriptions
             whose options need to be changed.
             </param>
             <param name="requestLabel">
             A label that defines a string which will be recorded along with
                                 any diagnostics for this operation.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             Any of the CorrelationIDs specified in the
                     subscriptionList is not a valid subscription.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Int32)">
             <summary> Modifies each subscription in the specified subscriptionList to reflect
             the modified options specified for it.
             </summary>
            
             <remarks> This is the same as calling
             <see cref="M:Bloomberglp.Blpapi.Session.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Int32,System.String)">
              Resubscribe(subscriptionList, resubId, null)</see>.
             </remarks>
            
             <param name="subscriptionList"> A subscription list with new subscriptions and existing
             correlation IDs.
             </param>
             <param name="resubId">
             An integer that identifies this request and appears in the <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             Any of the CorrelationIDs specified in the
                     subscriptionList is not a valid subscription.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.Int32,System.String)">
             <summary>  Modifies each subscription in the specified subscriptionList to reflect
             the modified options specified for it.
             </summary>
            
             <remarks>  For each entry in the subscriptionList the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>
             identifies a current "active" subscription the modified options replace
             the current options for the subscription and a
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event will be generated in
             the event stream before the first update based on the new options. The message of the event
             contains the specified <c>resubId</c>.
            
             </remarks>
             <param name="subscriptionList"> A list of active subscriptions
             whose options need to be changed.
             </param>
             <param name="resubId">
             An integer that identifies this request and appears in the <see cref="F:Bloomberglp.Blpapi.Event.EventType.SUBSCRIPTION_STATUS"/> event.
             </param>
             <param name="requestLabel">
             A label that defines a string which will be recorded along with
                                 any diagnostics for this operation.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.NotFoundException">
             Any of the CorrelationIDs specified in the
                     subscriptionList is not a valid subscription.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Unsubscribe(Bloomberglp.Blpapi.CorrelationID)">
            <summary> Cancels a previous request for asynchronous topic updates associated with
            the specified correlationId.
            </summary>
            <param name="correlationId">The correlationId of the subscription that is to
            be unsubscribed.
            </param>
            <seealso cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(Bloomberglp.Blpapi.CorrelationID)">
            </seealso>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Unsubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription})">
            <summary> Cancels previous requests for asynchronous topic updates associated
            with the correlation ids listed in the specified subscriptionList.
            </summary>
            <remarks>
            This operation provides a convenience for cancelling Subscriptions using
            a list of subscriptions.
            <para>
            See <see cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.String)">
            Cancel(IList, string)</see> operation for more information on the
            handling of cancel requests and other important notes. </para>
            </remarks>
            <param name="subscriptionList"> A list of correlationIds of subscriptions
            that are to be unsubscribed.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.Unsubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
            <summary> Cancels previous requests for asynchronous topic updates associated
            with the correlation ids listed in the specified subscriptionList.
            </summary>
            <remarks>
            This operation provides a convenience for cancelling Subscriptions using
            a list of subscriptions.
            <para>
            See <see cref="M:Bloomberglp.Blpapi.AbstractSession.Cancel(System.Collections.Generic.IList{Bloomberglp.Blpapi.CorrelationID},System.String)">
            Cancel(IList, string)</see> operation for more information on the
            handling of cancel requests and other important notes. </para>
            </remarks>
            <param name="subscriptionList"> A list of correlationIds of subscriptions
            that are to be unsubscribed.
            </param>
            <param name="requestLabel">
            A label that defines a string which will be recorded along with
                                any diagnostics for this operation.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Session is not started.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.GetSubscriptionStatus(Bloomberglp.Blpapi.CorrelationID)">
            <summary> Returns the subscription status for the specified correlationId.
            </summary>
            <param name="correlationId">The correlation id for which the subscription
            status is requested.
            </param>
            <returns>The subscription status for the specified correlationId.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException"> The specified correlationId has no
                     associated subscription.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.GetSubscriptionString(Bloomberglp.Blpapi.CorrelationID)">
            <summary> Returns the subscription string for the specified correlationId.
            </summary>
            <param name="correlationId">The correlation id for which the subscription
            string is requested.
            </param>
            <returns>The subscription string for the specified correlationId.
            </returns>
            <exception cref="T:Bloomberglp.Blpapi.NotFoundException"> The specified correlationId has no
                     associated subscription.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.CorrelationID)">
             <summary>
             Sends the specified request to a service using this session.
             <para>
             The session identity will be used if it's been authorized.
             </para>
             </summary>
             <remarks>This method is the same as calling
             <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">SendRequest</see>
              with a null <c>Identity</c>, <c>EventQueue</c> and a null request label.
             </remarks>
            
             <param name="request">
              A filled in request that needs to be sent to the service.
             </param>
             <param name="correlationId">
             A correlationId to be used to match the response.
             </param>
            
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
             The request is not compliant with the
             schema for the request.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
             This session has too many enqueued requests.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>
            Sends the specified request to a service using this session.
            <para>
            The session identity will be used if it's been authorized.
            </para>
            </summary>
            <remarks>This method is the same as calling
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">SendRequest</see>
             with a null <c>Identity</c> and <c>EventQueue</c>.
            </remarks>
            <param name="request">
             A filled in request that needs to be sent to the service.
            </param>
            <param name="correlationId">
            A correlationId to be used to match the response.
            </param>
            <param name="requestLabel">
            A label that defines a string which will be recorded along with
                                any diagnostics for this operation.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
            The request is not compliant with the
            schema for the request.
            </exception>
            <exception cref="T:System.IO.IOException">
            Any error occurs while sending the request.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
            This session has too many enqueued requests.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId is already active for this Session.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)">
            <summary>Sends the specified request to a service using this session.
            </summary>
            <remarks>This method is the same as calling
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">SendRequest</see>
             with a null <c>EventQueue</c> and a null request label string parameter.
            </remarks>
            <param name="request">
             A filled in request that needs to be sent to the service.
            </param>
            <param name="identity">
            A handle to the user whose privileges are to be used for
            this request.
            </param>
            <param name="correlationId">
            A correlationId to be used to match the response.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
            The request is not compliant with the
            schema for the request.
            </exception>
            <exception cref="T:System.IO.IOException">
            Any error occurs while sending the request.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
            This session has too many enqueued requests.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId is already active for this Session.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified Identity was not created through this Session
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.CorrelationID)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID)"/> instead.
            </summary>
            <param name="request"></param>
            <param name="userHandle"></param>
            <param name="correlationId"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,System.String)">
             <summary>Sends the specified request to a service using this session.
             </summary>
             <remarks>This method is the same as calling
             <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">SendRequest</see>
              with a null <c>EventQueue</c>.
             </remarks>
             <param name="request">
              A filled in request that needs to be sent to the service.
             </param>
             <param name="identity">
             A handle to the user whose privileges are to be used for
             this request.
             </param>
             <param name="correlationId">
             A correlationId to be used to match the response.
             </param>
             <param name="requestLabel">
             A label that defines a string which will be recorded along with
            any diagnostics for this operation.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
             The request is not compliant with the
             schema for the request.
             </exception>
             <exception cref="T:System.IO.IOException">
             Any error occurs while sending the request.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
             This session has too many enqueued requests.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
             <exception cref="T:System.ArgumentException">
             The specified Identity was not created through this Session
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.CorrelationID,System.String)"/> instead.
            </summary>
            <param name="request"></param>
            <param name="userHandle"></param>
            <param name="correlationId"></param>
            <param name="requestLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
             <summary>
             Sends the specified request to a service using this session.
             <para>
             The session identity will be used if it's been authorized.
             </para>
             </summary>
             <remarks>This method is the same as calling
             <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">SendRequest</see>
              with a null <c>Identity</c> and a null request label string parameter.
             </remarks>
             <param name="request">
              A filled in request that needs to be sent to the service.
             </param>
             <param name="eventQueue">
             An event queue to be used to receive response events for this request.
             </param>
             <param name="correlationId">
             A correlationId to be used to match the response.
             </param>
            
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
             The request is not compliant with the
             schema for the request.
             </exception>
             <exception cref="T:System.IO.IOException">
             Any error occurs while sending the request.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
             This session has too many enqueued requests.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>Sends the specified request to a service using this session.
            </summary>
            <remarks>This method is the same as calling
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">SendRequest</see>
             with a null <c>Identity</c>.
            </remarks>
            <param name="request">
             Filled in request that needs to be sent to the service.
            </param>
            <param name="eventQueue">
            An event queue to be used to receive response events for this request.
            </param>
            <param name="correlationId">
            A correlationId to be used to match the response.
            </param>
            <param name="requestLabel">
            A label that defines a string which will be recorded along with
                                any diagnostics for this operation.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session is not started.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
            The request is not compliant with the
            schema for the request.
            </exception>
            <exception cref="T:System.IO.IOException">
            Any error occurs while sending the request.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
            This session has too many enqueued requests.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified correlationId is already active for this Session.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
             <summary> Sends the specified request to a service using this session.
             </summary>
             <remarks>This method is the same as calling
             <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">SendRequest</see>
              with a null request label string parameter.
             </remarks>
             <returns>An internally generated CorrelationID if the specified
                     correlationId is null or return the specified correlationId.
             </returns>
             <param name="request">
              Filled in request that needs to be sent to the service.
             </param>
             <param name="identity">
             A handle to the user whose privileges are to be used for
             this request.
             </param>
             <param name="eventQueue">
             An event queue to be used to receive response events for this request.
             </param>
             <param name="correlationId">
             A correlationId to be used to match the response.
             </param>
            
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
             The request is not compliant with the
             schema for the request.
             </exception>
             <exception cref="T:System.IO.IOException">
             TAny error occurs while sending the request.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
             This session has too many enqueued requests.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
             <exception cref="T:System.ArgumentException">
             The specified Identity was not created through this Session
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID)"/> instead.
            </summary>
            <param name="request"></param>
            <param name="userHandle"></param>
            <param name="eventQueue"></param>
            <param name="correlationId"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
             <summary> Sends the specified request to a service using this session.
             </summary>
            
             <remarks>
             <para>
             This method sends the specified request to a service that is available
             on this session. The specified correlationId is returned on the response
             and can be used to correlate the response to this request. If a null
             correlationId is specified then an internal CorrelationID is generated
             and returned. </para>
             <para>
             If a valid <c>identity</c> is specified then it used as
             authorization for the specified request. If a valid identity is not
             specified then the request runs with the session authorization.
             <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
             SendAuthorizationRequest</see> for more information.
             </para>
             <para>
             If an eventQueue is specified then all response events for this Request
             are published to this eventQueue. The user can block on this event queue
             for response and can use this as a mechanism to convert this asynchronous
             request into a synchronous request. </para>
             <para>
             A successful request will generate zero or more
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.PARTIAL_RESPONSE"/> events followed by exactly one
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.RESPONSE"/> event. Once the final RESPONSE event
             has been received the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> associated with this request
             may be re-used. If the request fails at any stage a
             <see cref="F:Bloomberglp.Blpapi.Event.EventType.REQUEST_STATUS"/> event will be generated after which
             the CorrelationId associated with the request may be re-used.
             </para>
             </remarks>
             <returns>An internally generated CorrelationID if the specified
                     correlationId is null or return the specified correlationId.
             </returns>
             <param name="request">
              Filled in request that needs to be sent to the service.
             </param>
             <param name="identity">
             A handle to the user whose privileges are to be used for
             this request.
             </param>
             <param name="eventQueue">
             An event queue to be used to receive response events for this request.
             </param>
             <param name="correlationId">
             A correlationId to be used to match the response.
             </param>
             <param name="requestLabel">
             A label that defines a string which will be recorded along with
                                 any diagnostics for this operation.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The session is not started.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.InvalidRequestException">
             The request is not compliant with the
             schema for the request.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.RequestQueueOverflowException">
             This session has too many enqueued requests.
             </exception>
             <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
             The specified correlationId is already active for this Session.
             </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.UserHandle,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            <summary>Deprecated since 3.3.0.0. Use
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)"/> instead.
            </summary>
            <param name="request"></param>
            <param name="userHandle"></param>
            <param name="eventQueue"></param>
            <param name="correlationId"></param>
            <param name="requestLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.SetEventHandler(Bloomberglp.Blpapi.EventHandler,Bloomberglp.Blpapi.Event.EventType)">
            <summary>Set event specific event handlers</summary>
            <param name="eventHandler">
            New event handler to replace default event handler provided at
            construction
            </param>
            <param name="eventType">
            Type of events to be delivered to the new handler
            </param>
            <exception cref="T:System.ArgumentException">
            The specified 'eventHandler' is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Session.GetSubscriptions">
            <summary>
             Returns an enumerable collection for iterating over the subscriptions.
            </summary>
            <returns>
            An enumerabale collection of Subscriptions.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.SessionOptions">
             <summary>
             To use non-default options on a Session, create a SessionOptions
             instance and set the required options and then supply it when creating
             a Session.
             </summary>
             <remarks>
             Currently the following options are supported:
             <list type="table">
               <listheader>
                 <term>Option</term>
                 <description>Description</description>
               </listheader>
               <item>
                <term>ServerHost</term>
                <description>The hostname or the ip address of where the
                ServerAPI is running</description>
               </item>
               <item>
                <term>ServerPort</term>
                <description>The port number of the ServerAPI process</description>
               </item>
               <item>
                <term>MaxSendCacheSize</term>
                <description>Maximum number of bytes that will be cached
                     by the Session before requests will fail.
                </description>
               </item>
               <item>
                <term>MaxEventQueueSize</term>
                <description>The maximum number of events that can be buffered by
                     the Session. The value of MaxEventQueueSize must be greater
                     than zero.
                </description>
               </item>
               <item>
                <term>MaxPendingRequests</term>
                <description>The maximum number of requests that can be pending
                </description>
               </item>
               <item>
                 <term>AllowMultipleCorrelatorsPerMsg</term>
                 <description>If a message is to be delivered for multiple
                      correlators then deliver one message with all
                      correlators folded into that one message
                 </description>
               </item>
               <item>
                 <term>SlowConsumerWarningHiWaterMark</term>
                 <description>Set the fraction of 'MaxEventQueueSize' at which
                 "slow consumer" events will be generated. A warning event will be
                 generated when the number of outstanding undelivered events passes
                 above 'SlowConsumerWarningHiWaterMark * MaxEventQueueSize'. The
                 following is applicable
                 0.0 &lt; slowConsumerWarningHiWaterMark &lt;= 1.0. Further, at the
                 time that Session.Start() is called, it must be the case that
                 'SlowConsumerWarningLoWaterMark * MaxEventQueueSize' &lt;
                 'SlowConsumerWarningHiWaterMark * MaxEventQueueSize'.
                 </description>
               </item>
               <item>
                 <term>SlowConsumerWarningLoWaterMark</term>
                 <description>Set the fraction of 'MaxEventQueueSize' at which
                 "slow consumer cleared" events will be generated. A warning cleared
                 event will be generated when the number of outstanding undelivered
                 events drops below
                 'SlowConsumerWarningLoWaterMark * MaxEventQueueSize'.
                 The following is applicable
                 0.0 &lt;= SlowConsumerWarningLoWaterMark &lt; 1.0. Further, at the
                 time that Session.Start() is called, it must be the case that
                 'SlowConsumerWarningLoWaterMark * MaxEventQueueSize' &lt;
                 'SlowConsumerWarningHiWaterMark * MaxEventQueueSize'.
                 </description>
               </item>
               <item>
                 <term>DefaultSubscriptionService</term>
                 <description>The name of the service to be used by default for
                              subscriptions.
                 </description>
               </item>
               <item>
                 <term>DefaultTopicPrefix</term>
                 <description>The name of the topic prefix to be used for
                              subscriptions if one is not provided.
                 </description>
               </item>
               <item>
                 <term>ConnectTimeout</term>
                 <description>Timeout in milliseconds for session to establish a
                              connection
                 </description>
               </item>
               <item>
                 <term>ClientMode</term>
                 <description> See <see cref="T:Bloomberglp.Blpapi.SessionOptions.ClientModeType"/>.
                 </description>
               </item>
               <item>
                 <term>DefaultKeepAliveInactivityTime</term>
                 <description>
                    Amount of time in milliseconds without any read
                    activity on the connection before the library will
                    ping the peer (requires compatible server).  Also see
                    <see cref="P:Bloomberglp.Blpapi.SessionOptions.DefaultKeepAliveResponseTimeout"/>.
                 </description>
               </item>
               <item>
                 <term>DefaultKeepAliveResponseTimeout</term>
                 <description>
                     Timeout for the ping response in milliseconds. The peer will be
                     declared "dead" if no ping response (or other data) is received
                     within response timeout interval after the ping (requires
                     compatible server).
                     Also see <see cref="P:Bloomberglp.Blpapi.SessionOptions.DefaultKeepAliveInactivityTime"/>.
                 </description>
               </item>
               <item>
                 <term>KeepAliveEnabled</term>
                 <description> Whether all keep-alive mechanisms, both from the
                               client to the server and from the server to the
                               client, should be enabled.
                 </description>
               </item>
               <item>
                 <term>RecordSubscriptionDataReceiveTimes</term>
                 <description> Should the receipt time (accessed via
                               <see cref="P:Bloomberglp.Blpapi.Message.TimeReceived"/>
                               be recorded for subscription data messages.
                 </description>
               </item>
               <item>
                 <term>TlsOptions</term>
                 <description>
                   Client credentials and trusted certificates to establish secure
                   connection. By default plaintext connection is used.
                   See <see cref="P:Bloomberglp.Blpapi.SessionOptions.TlsOptions"/>.
                  </description>
               </item>
               <item>
                 <term>ServiceCheckTimeout</term>
                 <description>Timeout, in milliseconds, for checking what version of
                              the schema should be downloaded when opening a new
                              service. The timeout value must be a positive integer.
                              The default timeout is 60,000 milliseconds.
                 </description>
               </item>
               <item>
                 <term>ServiceDownloadTimeout</term>
                 <description>Timeout, in milliseconds, for downloading the service
                              schema when opening a new service. The timeout
                              value must be a positive integer. The default timeout
                              is 120,000 milliseconds.
                 </description>
               </item>
               <item>
                 <term>BandwidthSaveModeDisabled</term>
                 <description>Flag indicating whether the client has
                              requested to override bandwidth saving
                              measures, such as conflation for snapshot
                              subscriptions. By default it is false.
                 </description>
               </item>
               <item>
                 <term>SessionIdentityOptions</term>
                 <description>Authorization options that enable
                              automatic authorization of the session
                              identity during startup.
                 </description>
               </item>
              </list>
             </remarks>
            
             <threadsafety instance="false"/>
            
        </member>
        <member name="T:Bloomberglp.Blpapi.SessionOptions.ClientModeType">
            <summary> Client mode enumeration.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.SessionOptions.ClientModeType.AUTO">
            <summary> Detect client mode automatically.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.SessionOptions.ClientModeType.DAPI">
            <summary> A Desktop API client.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.SessionOptions.ClientModeType.SAPI">
            <summary> A Server API client.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.SessionOptions.ServerAddress">
            <summary> Class represents server address as a host and a port.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.SessionOptions.ServerAddress.#ctor(System.String,System.Int32)">
            <summary> Construct server address with the host and the port.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ServerAddress.Host">
            <summary> The host part of a server address.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ServerAddress.Port">
            <summary> The port part of a server address.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.SessionOptions.ServerAddress.ToString">
            <summary> Return the string representation of this object.
            </summary>
            <returns>The string representing this object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.SessionOptions.#ctor">
            <summary>
            Construct a SessionOption with well defined defaults for various
            options
            </summary>
            <remarks>
            Currently the following defaults are applied <br/>
                ServerHost                     = "127.0.0.1"<br/>
                ServerPort                     = 8194<br/>
                WriteHighWaterMark             = 128MB<br/>
                MaxEventQueueSize              = 10000<br/>
                MaxPendingRequests             = 1024<br/>
                AllowMultipleCorrelatorsPerMsg  = false<br/>
                SlowConsumerWarningHiWaterMark = 0.75<br/>
                SlowConsumerWarningLoWaterMark = 0.50<br/>
                DefaultSubscriptionService     = "//blp/mktdata"<br/>
                DefaultTopicPrefix             = "ticker/"<br/>
                ClientMode                     = SessionOptions.ClientMode.AUTO <br/>
                TlsOptions                     = null <br/>
            </remarks>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.MaxEventQueueSize">
            <summary> Max queue size for events.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.MaxOutstandingRequests">
            <summary> Return max outstanding requests.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.MaxPendingRequests">
            <summary> Max pending requests.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.SessionOptions.SetSessionIdentityOptions(Bloomberglp.Blpapi.AuthOptions,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Sets the specified <paramref name="authOptions"/> as the
            <see cref="T:Bloomberglp.Blpapi.AuthOptions"/> for the session identity, enabling
            automatic authorization of the session identity during startup.
            <para>
            The session identity lifetime is tied to the session's lifetime,
            so it is guaranteed that the session identity will remain authorized
            during the entire duration of the session. The identity will be
            authorized before the session starts. The session will terminate
            if the identity fails to authorize or is revoked.
            </para>
            <para>
            The session identity is used to send requests and make subscriptions
            if no other identity is provided.
            </para>
            <para>
            By default the session identity is not authorized.
            </para>
            </summary>
            <param name="authOptions">
            The type of authorization to use.
            </param>
            <param name="correlationId">
            This optional parameter is used to identify messages
            associated with the session identity.
            </param>
            <returns>
            The actual <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> object that will identify
            those events.
            </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ServerHost">
            <summary>
            Gets or sets the API server host of the first element in the server
            list.
            The default is "127.0.0.1".
            For setter, behavior is undefined if the specified
            'value' is an empty string.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ServerPort">
            <summary>
            Gets or sets the API server port of the first element in the
            server list.
            The default is 8194.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ServerAddresses">
            <summary>
            Gets or Sets the list of server address.
            Behavior is undefined if the specified 'value' contains
            any serverAddress whose hostname is an empty string.
            </summary>
            <exception cref="T:System.ArgumentException">
            The input value is null.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.AutoRestartOnDisconnection">
            <summary>
            Gets or sets the auto restart flag.
            The default is false.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.AuthenticationOptions">
            <summary>
            Gets or sets the authentication options.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.MaxSendCacheSize">
            <summary>
            Gets or sets the max send cache size.
            The default value is 128MB.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.AllowMultipleCorrelatorsPerMsg">
            <summary>
            Gets or sets the allow multiple correlators per message flag.
            The default is false.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.SlowConsumerWarningHiWaterMark">
            <summary>
            Gets or sets the slow consumer warning high water mark limit
            regarding to <cref name="MaxSendCacheSize"/>MaxSendCacheSize.
            The default is 0.75.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.SlowConsumerWarningLoWaterMark">
            <summary>
            Gets or sets the slow consumer warning low water mark limit
            regarding to <see cref="P:Bloomberglp.Blpapi.SessionOptions.MaxSendCacheSize"/>MaxSendCacheSize.
            The default is 0.50.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.DefaultSubscriptionService">
            <summary>
            Gets or sets the default subscription service.
            The default is "//blp/mktdata"
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.DefaultTopicPrefix">
            <summary>
            Gets or sets the default topic prefix.
            The default is "ticker/"
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ClientMode">
            <summary>
            Gets or sets the client mode.
            <see cref="T:Bloomberglp.Blpapi.SessionOptions.ClientModeType"/>
            The default is <see cref="F:Bloomberglp.Blpapi.SessionOptions.ClientModeType.AUTO"/> AUTO
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.NumStartAttempts">
            <summary>
            Gets or sets the max start attempts.
            The default value is 3.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ConnectTimeout">
            <summary>
            Gets or sets the connection timeout in milliseconds when connecting
            to an endpoint.
            <para>
            The default value is 5000. The value must be greater than zero and
            less than or equal to 120000.
            </para>
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.DefaultKeepAliveInactivityTime">
            <summary>
            Gets or sets the default keep alive inactivity time in ms.
            The default value is 20000 ms.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.DefaultKeepAliveResponseTimeout">
            <summary>
            Gets or sets the keep alive response time in ms.
            The default value is 5000 ms.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.KeepaliveEnabled">
            <summary>
            Gets or sets the keep alive enable flag.
            The default value is true.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.RecordSubscriptionDataReceiveTimes">
            <summary>
            Gets or sets if the receipt time (accessed via
            <see cref="P:Bloomberglp.Blpapi.Message.TimeReceived"/>) should be recorded for
            subscription data messages.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ServiceCheckTimeout">
            <summary>
            Gets or sets the service check timeout in ms.
            The default value is 60000 ms.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.ServiceDownloadTimeout">
            <summary>
            Gets or sets the service download timeout in ms.
            The default value is 120000 ms.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.TlsOptions">
            <summary>
            Gets or sets <see cref="P:Bloomberglp.Blpapi.SessionOptions.TlsOptions" /> to use for establishing
            secure connection. By default its null.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.SessionOptions.BandwidthSaveModeDisabled">
            <summary>
            Gets or sets the flag indicating whether the client has
            disabled bandwidth saving measures. By default it is false.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.SessionOptions.ToString">
            <summary>
            Return the string representation of this object.
            </summary>
            <returns>The string representing this object.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Subscription">
            <summary>
            A Subscription object holds information about a subscription for topic
            updates and comprises of two primary fields: a 'CorrelationId'
            associated with the subscription, and a string, called a subscription
            string, describing the data to be delivered as a part of the
            subscription.
            </summary>
            <remarks>
            The simplest form of a subscription string is a fully qualified
            subscription string, which has the following structure:
            <code>
            "//blp/mktdata/ticker/IBM US Equity?fields=BID,ASK&amp;interval=2"
             \-----------/\------/\-----------/\------------------------/
                   |          |         |                  |
                Service     Prefix   Instrument          Suffix
            </code>
            Such a fully-qualified string is composed of:
            <list type="bullet">
            <item>
            <description>
            Service Identifier: a string matching the expression
            <c>^//[-_.a-zA-Z0-9]+/[-_.a-zA-Z0-9]+$</c>, e.g. //blp/mktdata.
            </description>
            </item>
            <item>
            <description>
            Prefix: a string matching the expression <c>/([-_.a-zA-Z0-9]+/)?</c>,
            often used as a symbology identifier.
            </description>
            </item>
            <item>
            <description>
            Instrument: a non-empty string that does not contain the character?
            (i.e. a string matching <c>[^?]+</c>) e.g. "IBM US Equity", or "SPX Index".
            The service, prefix, and instrument together uniquely identify a
            source for subscription data.
            </description>
            </item>
            <item>
            <description>
            Suffix: a suffix contains a question mark followed by a list of
            options which can affect the content delivery. The format of these
            options is service specific, but they generally follow URI query
            string conventions: a sequence of "key=value" pairs separated by "&amp;"
            characters.Further, many common services follow the convention that
            the value given for the 'fields' key is formatted as a comma-separated
            list of field names.BLPAPI provides several convenience functions to
            assist in formatting subscription strings for services that make use
            of these conventions.
            </description>
            </item>
            </list>
            Note that subscription strings need not be fully qualified: BLPAPI
            allows the service and prefix to be omitted from subscription strings,
            and automatically qualifies these strings using information stored in
            a 'Session' object. It is used to create a list of Subscription
            objects that can be used for
            <see
              cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
                Subscribe()</see>,
            <see
              cref="M:Bloomberglp.Blpapi.Session.Resubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
                Resubscribe()</see>,
            and <see
              cref="M:Bloomberglp.Blpapi.Session.Unsubscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},System.String)">
                Unsubscribe()</see>
            requests.
            </remarks>
        </member>
        <member name="F:Bloomberglp.Blpapi.Subscription.OPTIONS_SEPARATOR">
            Flag to indicate whether the the topic string has been deemed
            resolved by the user.
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String)">
            <summary> Create a Subscription object with the specified
            subscription string. <see cref="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,Bloomberglp.Blpapi.CorrelationID)"/>
            </summary>
            <param name="subscriptionString"></param>
            <exception cref="T:System.ArgumentException"> The input
            <c>subscriptionString</c> is null or empty.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException"> The input
            <c>subscriptionString</c> or <c>correlationID</c> is null or empty.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a Subscription object with the specified
            <c>subscriptionString</c>, and the specified <c>isResolved</c> flag
            and an internally generated CorrelationID . If the
            <c>isResolved</c> is set to <c>true</c>, the
            <c>subscriptionString</c> is assumed to be a fully-resolved topic
            string. Note that even if <c>isResolved</c> flag is true, it is
            still at the discretion of each function operating on
            <c>Subscription</c> to perform resolution (again) on this topic or
            not.
            </summary>
            <param name="subscriptionString">
            string representing the data to be subscribed
            </param>
            <param name="isResolved">
            whether the resolution phase can be skipped because the
            <c>subscriptionString</c> contains a pre-resolved topic
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,Bloomberglp.Blpapi.CorrelationID,System.Boolean)">
            <summary>
            Creates a Subscription object with the specified
            <c>subscriptionString</c>, the specified <c>correlationID</c> for
            correlation, and the specified <c>isResolved</c> flag. If the
            <c>isResolved</c> is set to <c>true</c>, the
            <c>subscriptionString</c> is assumed to be a fully-resolved topic
            string. Note that even if <c>isResolved</c> flag is true, it is
            still at the discretion of each function operating on
            <c>Subscription</c> to perform resolution (again) on this topic or
            not.
            </summary>
            <param name="subscriptionString">
            string representing the data to be subscribed
            </param>
            <param name="correlationID">the correlation id</param>
            <param name="isResolved">
            whether the resolution phase can be skipped because the
            <c>subscriptionString</c> contains a pre-resolved topic
            </param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.String)">
            <summary>
            Creates a Subscription object with the specified security and
            fields with no options and an internally generated <see
            cref="P:Bloomberglp.Blpapi.Subscription.CorrelationID"/>.
            </summary>
            <param name="security"></param>
            <param name="fields"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Creates a Subscription object with the specified security and
            fields with no options and the specified correlationId.
            </summary>
            <param name="security"></param>
            <param name="fields"></param>
            <param name="correlationId"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a Subscription object with the specified security, fields
            and options and an internally generated <see
            cref="P:Bloomberglp.Blpapi.Subscription.CorrelationID"/>.
            </summary>
            <param name="security"></param>
            <param name="fields"></param>
            <param name="options"></param>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.String,System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Creates a Subscription object with the specified security, fields,
            options and correlationId.
            </summary>
            <param name="security"></param>
            <param name="fields"></param>
            <param name="options"></param>
            <param name="correlationID"></param>
            <exception cref="T:System.ArgumentException">
            The input <c>security</c> or <c>fields</c> is null or empty.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a Subscription object with the specified security and fields.
            <see cref="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},Bloomberglp.Blpapi.CorrelationID)"/>
            </summary>
            <param name="security"></param>
            <param name="fields"></param>
            <exception cref="T:System.ArgumentException">
            The input <c>security</c> or <c>fields</c> is null or empty.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String},Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Creates a Subscription object with the specified security, fields
            and correlationId.
            </summary>
            <param name="security"></param>
            <param name="fields"></param>
            <param name="correlationID"></param>
            <exception cref="T:System.ArgumentException">
            The input <c>security</c> or <c>fields</c> is null or empty.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a Subscription object with the specified security, fields
            and options.
            </summary>
            <param name="security"></param>
            <param name="fields"></param>
            <param name="options"></param>
            <exception cref="T:System.ArgumentException">
            The input <c>security</c> or <c>fields</c> is null or empty.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException">
            The input <c>security</c> or <c>fields</c> is null or empty.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.#ctor(System.String,Bloomberglp.Blpapi.CorrelationID,System.Boolean,System.Boolean)">
            <summary>
            Create a Subscription object with
            <paramref name="subscriptionString"/>,
            <paramref name="correlationID"/>,
            <paramref name="isResolved"/>
            and, <paramref name="terminateOnFailover"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            The input <paramref name="subscriptionString"/> or
            <paramref name="correlationID"/> is null or empty.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Subscription.SubscriptionString">
            <summary>Subscription string</summary>
            <remarks><c>Subscription</c> objects obtained from the library are
            fully qualified. </remarks>
            <exception cref="T:System.ArgumentException">
            The input value is null or empty.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Subscription.CorrelationID">
            <exception cref="T:System.ArgumentException">
            The input value is null.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.Subscription.SubscriptionStatus">
            <summary> Return the subscription status.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Subscription.IsResolved">
            <summary>
            Returns <c>true</c> if the object was created with the
            <c>isResolved</c> flag set for the topic string, otherwise returns
            false.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.Subscription.TerminateOnFailover">
            <summary>
            Specifies whether this <see cref="T:Bloomberglp.Blpapi.Subscription"/> should be
            terminated or not during failover.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Subscription.ToString">
            <summary> Return the string representation of this object.
            </summary>
            <returns>the string representing this object.</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Test.IMessageFormatter">
            <summary>
            Used to populate/format a message. It supports writing once only to
            each field. Attempting to set an already set element will fail.
            <para>
            Behavior is undefined if:
            <list type="bullet">
            <item>
            <description>
            A message formatted with <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.FormatMessageXml(System.String)"/> is further
            formatted.
            </description>
            </item>
            <item>
            <description>
            A message formatted with a Set method or an Append method is
            further formatted using <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.FormatMessageXml(System.String)"/>.
            </description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Boolean)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Char)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Int32)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Int64)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Single)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Double)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Datetime)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> or <paramref name="value"/>
            is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,System.String)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> or <paramref name="value"/>
            is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,Bloomberglp.Blpapi.Name)">
            <summary>
            Sets the element with the specified <paramref name="name"/> to the
            specified <paramref name="value"/> in the current messages
            referenced by this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> or <paramref name="value"/>
            is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElementNull(Bloomberglp.Blpapi.Name)">
            <summary>
            Creates a null element with the specified <paramref name="name"/>.
            <para>
            Note that whether or not fields containing null values are
            published to subscribers is dependent upon details of the service
            and the schema configuration.
            </para>
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.PushElement(Bloomberglp.Blpapi.Name)">
            <summary>
            Changes the level at which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is
            operating to the specified element <paramref name="name"/>. The
            element <paramref name="name"/> must identify either a choice, a
            sequence or an array at the current level of the schema or the
            behavior is undefined.
            <para>
            After this returns the context of the
            <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is set to the element
            <paramref name="name"/> in the schema and any calls to
            <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.SetElement(Bloomberglp.Blpapi.Name,System.Boolean)"/>, its overrides, or
            <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.PushElement(Bloomberglp.Blpapi.Name)"/> are applied at that level.
            </para>
            <para>
            If <paramref name="name"/> represents an array of scalars then
            <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(System.Boolean)"/> or its overrides must be used to
            add values.
            </para>
            <para>
            If <paramref name="name"/> represents an array of complex types
            then <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendElement"/> creates the first entry and sets
            the context of the <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> to that element.
            Calling <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendElement"/> again will create another
            entry.
            </para>
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="name"/> is invalid for the current
            message or if the element identified by <paramref name="name"/>
            has already been set.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.PopElement">
            <summary>
            Undoes the most recent call to <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.PushElement(Bloomberglp.Blpapi.Name)"/> on this
            <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> and returns the context of the
            <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> to where it was before the call
            to <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.PushElement(Bloomberglp.Blpapi.Name)"/>. Once <see cref="M:Bloomberglp.Blpapi.Test.IMessageFormatter.PopElement"/> has
            been called it is invalid to attempt to re-visit the same context.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(System.Boolean)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(System.Char)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(System.Int32)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(System.Int64)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(System.Single)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(System.Double)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(Bloomberglp.Blpapi.Datetime)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(System.String)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendValue(Bloomberglp.Blpapi.Name)">
            <summary>
            Appends the specified <paramref name="value"/> to the element
            on which this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the message is flat or the current element to which
            <paramref name="value"/> is appended is not an array.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.AppendElement">
            <summary>
            Creates an array element and appends it to the element on which
            this <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> is operating on.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the schema of the message is flat.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.IMessageFormatter.FormatMessageXml(System.String)">
            <summary>
            Formats the message from its XML representation.
            The behavior is undefined if further formatting is done using this
            <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/>.
            </summary>
            <exception cref="T:System.Exception">
            Thrown when the method fails to format the message.
            </exception>
        </member>
        <member name="T:Bloomberglp.Blpapi.Test.MessageProperties">
            <summary>
            This class represents properties of a message that are not part of the
            message contents, for example the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>, or
            timestamp.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.MessageProperties.#ctor">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Test.MessageProperties"/> with default values.
            <para>
            Default value for <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> property is an empty
            list.
            </para>
            <para>
            Default value for <see cref="T:Bloomberglp.Blpapi.Message.Recap"/> property is
            <see cref="F:Bloomberglp.Blpapi.Message.Recap.NONE"/>.
            </para>
            <para>
            Default value for <see cref="T:Bloomberglp.Blpapi.Message.Fragment"/> is
            <see cref="F:Bloomberglp.Blpapi.Message.Fragment.NONE"/>.
            </para>
            <para>
            Value for <see cref="P:Bloomberglp.Blpapi.Test.MessageProperties.Service"/> and timestamp is "unset".
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.MessageProperties.SetCorrelationIds(System.Collections.Generic.List{Bloomberglp.Blpapi.CorrelationID})">
            <summary>
            Sets the <see cref="T:Bloomberglp.Blpapi.CorrelationID"/> property.
            </summary>
            <param name="correlationIds">
            The <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>s to be added.
            </param>
            <returns>this</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.MessageProperties.SetCorrelationId(Bloomberglp.Blpapi.CorrelationID)">
            <summary>
            Equivalent to calling <see cref="M:Bloomberglp.Blpapi.Test.MessageProperties.SetCorrelationIds(System.Collections.Generic.List{Bloomberglp.Blpapi.CorrelationID})"/> with a list
            of one <see cref="T:Bloomberglp.Blpapi.CorrelationID"/>.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.MessageProperties.SetRecapType(Bloomberglp.Blpapi.Message.Recap,Bloomberglp.Blpapi.Message.Fragment)">
            <summary>
            Sets the <see cref="T:Bloomberglp.Blpapi.Message.Recap"/> and
            <see cref="T:Bloomberglp.Blpapi.Message.Fragment"/> properties.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.MessageProperties.SetTimeReceived(System.DateTime)">
            <summary>
            Sets the time received property. The default timestamp is "unset",
            so attempting to retrieve the timestamp of a message with default
            properties will throw an exception.
            </summary>
            <param name="timeReceived">
            Represents the timestamp of the received message.
            </param>
            <returns>this</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.MessageProperties.SetService(Bloomberglp.Blpapi.Service)">
            <summary>
            Sets the <see cref="P:Bloomberglp.Blpapi.Test.MessageProperties.Service"/> property.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.MessageProperties.SetRequestId(System.String)">
            <summary>
            Sets the request ID to be used for <see cref="T:Bloomberglp.Blpapi.Message"/> objects
            generated with this <see cref="T:Bloomberglp.Blpapi.Test.MessageProperties"/> object.
            </summary>
            <param name="requestId">The ID to use.</param>
            <returns>this</returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Test.TestUtil">
            <summary>
            Provides utilities for unit testing BLPAPI applications.
            <para>
            This includes deserializing services from XML, creating test events,
            and appending/formatting messages in these events.
            </para>
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.TestUtil.CreateEvent(Bloomberglp.Blpapi.Event.EventType)">
            <summary>
            Creates and returns an <see cref="T:Bloomberglp.Blpapi.Event"/> to be used for testing
            with the specified <see cref="T:Bloomberglp.Blpapi.Event.EventType"/>. The returned
            <see cref="T:Bloomberglp.Blpapi.Event"/> cannot be used for publishing. The behavior is
            undefined if <see cref="T:Bloomberglp.Blpapi.EventFormatter"/> is used with the returned
            <see cref="T:Bloomberglp.Blpapi.Event"/>.
            </summary>
            <param name="eventType">
            The type of the <see cref="T:Bloomberglp.Blpapi.Event"/> to create.
            </param>
            <returns>
            Returns an <see cref="T:Bloomberglp.Blpapi.Event"/> of the requested type.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.TestUtil.AppendMessage(Bloomberglp.Blpapi.Event,Bloomberglp.Blpapi.SchemaElementDefinition)">
            <summary>
            Creates a new message and appends it to the specified
            <see cref="T:Bloomberglp.Blpapi.Event"/> with default <see cref="T:Bloomberglp.Blpapi.Test.MessageProperties"/>.
            </summary>
            <param name="event">
            Must be a test <see cref="T:Bloomberglp.Blpapi.Event"/> created from
            <see cref="M:Bloomberglp.Blpapi.Test.TestUtil.CreateEvent(Bloomberglp.Blpapi.Event.EventType)"/>.
            </param>
            <param name="elementDefinition">
            Provides a schema to be used for verifying and encoding the
            contents of the message.
            </param>
            <returns>
            Returns a <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> that can be used
            to format the message that was appended.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.TestUtil.AppendMessage(Bloomberglp.Blpapi.Event,Bloomberglp.Blpapi.SchemaElementDefinition,Bloomberglp.Blpapi.Test.MessageProperties)">
            <summary>
            Creates a new message and appends it to the specified
            <see cref="T:Bloomberglp.Blpapi.Event"/>.
            </summary>
            <param name="event">
            Must be a test <see cref="T:Bloomberglp.Blpapi.Event"/> created from
            <see cref="M:Bloomberglp.Blpapi.Test.TestUtil.CreateEvent(Bloomberglp.Blpapi.Event.EventType)"/>.
            </param>
            <param name="elementDefinition">
            Provides a schema to be used for verifying and encoding the
            contents of the message.
            </param>
            <param name="properties">
            Provides the metadata properties to be added to the appended message.
            </param>
            <returns>
            Returns an <see cref="T:Bloomberglp.Blpapi.Test.IMessageFormatter"/> that can be used
            to format the message that was appended.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.TestUtil.DeserializeService(System.String)">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Service"/> from the specified
            <paramref name="xml"/>.
            </summary>
            <param name="xml">
            A <see cref="T:System.String"/> containing a service schema in XML format.
            </param>
            <returns>
            Returns a test <see cref="T:Bloomberglp.Blpapi.Service"/> that is configured for the
            specified XML encoded schema.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.TestUtil.DeserializeService(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.Service"/> from the specified
            <paramref name="stream"/>.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> containing a service schema in XML format.
            </param>
            <returns>
            Returns a test <see cref="T:Bloomberglp.Blpapi.Service"/> that is configured for the
            specified XML encoded schema.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.TestUtil.CreateTopic(Bloomberglp.Blpapi.Service,System.Boolean)">
            <summary>
            Creates a valid <see cref="T:Bloomberglp.Blpapi.Topic"/> with the specified
            <see cref="T:Bloomberglp.Blpapi.Service"/> to support testing publishers.
            <para>
            The expected use case is to support returning a custom
            <see cref="T:Bloomberglp.Blpapi.Topic"/> while mocking
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.GetTopic(Bloomberglp.Blpapi.Message)"/> methods.
            </para>
            </summary>
            <param name="service">
            The service that the <see cref="T:Bloomberglp.Blpapi.Topic"/> should be created for.
            <para>
            Must be a test <see cref="T:Bloomberglp.Blpapi.Service"/> created through
            <see cref="T:Bloomberglp.Blpapi.Test.TestUtil"/>.
            </para>
            </param>
            <param name="isActive">
            Specifies whether or not the <see cref="T:Bloomberglp.Blpapi.Topic"/> is still active
            (not deleted).
            </param>
            <returns>
            Returns the newly created <see cref="T:Bloomberglp.Blpapi.Topic"/>.
            </returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.Test.TestUtil.GetAdminMessageDefinition(Bloomberglp.Blpapi.Name)">
            <summary>
            Gets the definition for an admin message of the specified
            <paramref name="messageName"/>.
            </summary>
            <param name="messageName">
            The name of the requested message.
            </param>
            <returns>
            The definition for the specified admin message.
            </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.TlsOptions">
             <summary>
             TlsOptions instances are sources of client credentials and trust
             material used by a session to establish secure mutually authenticated
             connections to endpoints.
            
             The client credentials comprise an encrypted private key and a client
             certificate. Client credentials are in DER encoded PKCS12 format.
             They are provided by Bloomberg L.P. These credentials can be provided
             to a BLPAPI application in 3 ways:
             - file,
             - byte array(for situations where the BLPAPI application is not able to
             access a filesystem),
             - X509Certificate2.
            
             The trust material comprises certificates in DER encoded PKCS7 format,
             provided by Bloomberg L.P. These may be provided in 3 ways:
             - file,
             - byte array(for situations where the BLPAPI application is not able to
             access a filesystem),
             - X509Certificate2Collection
             </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.TlsOptions.CreateFromFiles(System.String,System.Security.SecureString,System.String)">
            <summary>
            Read the specified files to obtain client credentials and trust
            material that a <see cref="T:Bloomberglp.Blpapi.Session"/> created with session
            options with property <see cref="P:Bloomberglp.Blpapi.SessionOptions.TlsOptions"/>
            set to the return value of this function will use to establish
            secure connections.</summary>
            <param name="clientCredentialsFileName">
            The name of a password-protected, DER encoded PKCS12 file
            containing the BLPAPI client certificate and private key.</param>
            <param name="clientCredentialsPassword">
            The password required to access the X.509 certificate data
            contained in
            <paramref name="clientCredentialsFileName"/>
            </param>.
            It is safe to <c>Dispose</c> this <c>SecureString</c> as soon
            as this function returns.
            <param name="trustedCertificatesFileName">
            The name of a DER encoded PKCS7 file with empty password containing
            Bloomberg-provided trusted certificates.</param>
            <returns>
            A new <c>TlsOptions</c> object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.TlsOptions.CreateFromBlobs(System.Byte[],System.Security.SecureString,System.Byte[])">
            <summary>
            Read the specified byte arrays to obtain client credentials and
            trust material that a <see cref="T:Bloomberglp.Blpapi.Session"/> created with session
            options with property <see cref="P:Bloomberglp.Blpapi.SessionOptions.TlsOptions"/>
            set to the return value of this function will use to establish
            secure connections.</summary>
            <param name="clientCredentialsRawData">
            A byte array that contains the BLPAPI client certificate and
            private key, in password-protected, DER encoded PKCS12 format.
            </param>
            <param name="clientCredentialsPassword">
            The password required to access the X.509 certificate data
            contained in
            <paramref name="clientCredentialsRawData"/>
            </param>.
            It is safe to <c>Dispose</c> this <c>SecureString</c> as soon
            as this function returns.
            <param name="trustedCertificatesRawData">
            A byte array that contains Bloomberg-provided trusted
            certificates in DER encoded PKCS7 format, with an empty password.
            </param>
            <returns>
            A new <c>TlsOptions</c> object.</returns>
        </member>
        <member name="M:Bloomberglp.Blpapi.TlsOptions.Create(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
             <summary>
             Creates <c>TlsOptions</c> with client-provided client credentials
             and trusted certificates
             </summary>
            
             <param name="clientCredentials">
             client certificate and private key
             </param>
             <param name="trustedCertificates">
             trusted certificates
             </param>
            
             <returns>
             A new <c>TlsOptions</c> object
             </returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.TlsOptions.ClientCredentials">
            <summary>
            Gets client credentials
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.TlsOptions.TrustedCertificates">
            <summary>
            Gets trusted certificates collection
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.TlsOptions.TlsHandshakeTimeout">
            <summary>
            Gets or sets TLS handshake timeout. Default value is 10 seconds.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.TlsOptions.CrlFetchTimeout">
            <summary>
            Gets or sets timeout of fetching CRL from the CRL distribution
            point. Default value is 20 seconds.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.TlsOptions.CheckRevocation">
            <summary>
            Enables or disables CRL checking. By default it is disabled.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.TlsOptions.ToString">
             <summary>
             Outputs client certificate and trusted certificates. Client's
             private key isn't printed.
             </summary>
            
             <returns>
             string containing client certificate and trusted
             certificate
             </returns>
        </member>
        <member name="T:Bloomberglp.Blpapi.Topic">
            <summary> Represents a topic.
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopic(Bloomberglp.Blpapi.Message)"/> 
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.Topic.IsActive">
            <summary> Return true if the topic is active. Ticks on active topic
            are delivered to the network.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.Blpapi.Topic.Service">
            <summary> The topic service.
            
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.TopicList">
            <summary> TopicList is used to create a list of topics.
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopics(Bloomberglp.Blpapi.ITopicList)"/>
            <see cref="M:Bloomberglp.Blpapi.ProviderSession.CreateTopicsAsync(Bloomberglp.Blpapi.ITopicList)"/>
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.TopicList.TopicStatus">
            <summary> The topic status.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.TopicList.TopicStatus.NOT_CREATED">
            <summary> The topic is not created.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.TopicList.TopicStatus.CREATED">
            <summary> The topic is created.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.TopicList.TopicStatus.FAILURE">
            <summary> The topic failure.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.#ctor">
            <summary> The default constructor.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.Add(System.String)">
            <summary> Add a new topic to the list.
            </summary>
            <param name="topic">topic to add</param>
            <exception cref="T:System.ArgumentException">
            The specified 'topic' is null or invalid.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.Add(System.String,Bloomberglp.Blpapi.CorrelationID)">
            <summary> Add the topic with the correlation id to the list.
            </summary>
            <param name="topic"></param>
            <param name="correlationId"></param>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified 'correlationId' is in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.Add(Bloomberglp.Blpapi.Message)">
            <exception cref="T:System.ArgumentException">
            The specified message is not about topic.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.Add(Bloomberglp.Blpapi.Message,Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException">
            The specified message is not about topic.
            </exception>
            <exception cref="T:Bloomberglp.Blpapi.DuplicateCorrelationIDException">
            The specified 'correlationId' is in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.CorrelationIdAt(System.Int32)">
            <exception cref="T:System.IndexOutOfRangeException">
            The specified index is out of the range of this list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.TopicString(Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException">
            The specified CorrelationID is not in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.TopicStringAt(System.Int32)">
            <exception cref="T:System.IndexOutOfRangeException">
            The specified index is out of the range of this list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.Status(Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException">
            The specified CorrelationID is not in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.StatusAt(System.Int32)">
            <exception cref="T:System.IndexOutOfRangeException">
            The specified index is out of the range of this list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.Message(Bloomberglp.Blpapi.CorrelationID)">
            <exception cref="T:System.ArgumentException">
            The specified CorrelationID is not in the list.
            </exception>
        </member>
        <member name="M:Bloomberglp.Blpapi.TopicList.MessageAt(System.Int32)">
            <exception cref="T:System.IndexOutOfRangeException">
            The specified index is out of the range of this list.
            </exception>
        </member>
        <member name="P:Bloomberglp.Blpapi.TopicList.Size">
            <summary> Return the topic list size.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.UserHandle">
            <summary>
            Provides access to the entitlements for a specific user.
            </summary>
            <remarks>  An unauthorized UserHandle is created using
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.CreateUserHandle"/>. Once a UserHandle has been created it
            can be authorized using
            <see cref="M:Bloomberglp.Blpapi.AbstractSession.SendAuthorizationRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            SendAuthorizationRequest()</see>.
            The authorized UserHandle can then be used in
            <see cref="M:Bloomberglp.Blpapi.Session.Subscribe(System.Collections.Generic.IList{Bloomberglp.Blpapi.Subscription},Bloomberglp.Blpapi.Identity,System.String)">
            Subscribe()</see> or
            <see cref="M:Bloomberglp.Blpapi.Session.SendRequest(Bloomberglp.Blpapi.Request,Bloomberglp.Blpapi.Identity,Bloomberglp.Blpapi.IEventQueue,Bloomberglp.Blpapi.CorrelationID,System.String)">
            SendRequest()</see>
            calls. Once authorized a UserHandle has access to the
            entitlements of the user which it was validated for and can then be queried
            to see if a user is entitled to receive data.
            </remarks>
        </member>
        <member name="T:Bloomberglp.Blpapi.VersionInfo">
             <summary>
             This class provides a basic primitive version information for the BLPAPI
             SDK library.  It provides a simple way to access the following version
             information as 4 integers: Major, Minor, Patch, and Build.
             </summary>
            
             <threadsafety static="true"/>
            
        </member>
        <member name="P:Bloomberglp.Blpapi.VersionInfo.MajorVersion">
            <summary>
            First identifier of BLPAPI SDK library version, Major, as integer.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.VersionInfo.MinorVersion">
            <summary>
            Second identifier of BLPAPI SDK library version, Minor, as integer.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.VersionInfo.PatchVersion">
            <summary>
            Third identifier of BLPAPI SDK library version, Patch, as integer.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.VersionInfo.BuildVersion">
            <summary>
            Fourth identifier of BLPAPI SDK library version, Build, as integer.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.VersionInfo.VersionString">
            <summary>
            A string representation of BLPAPI SDK library version.
            </summary>
        </member>
        <member name="P:Bloomberglp.Blpapi.VersionInfo.VersionIdentifier">
            <summary>
            A string representation of BLPAPI SDK library version and git commit id.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ZfpUtil">
            <summary>
            Helper class that provides utilities designed for the Zero Footprint
            Solution clients that leverage private leased lines to the Bloomberg
            network.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ZfpUtil.ApinisvcEndpoints">
            <summary>
            A list of endpoints where the API Network Information service
            can be reached.
            </summary>
        </member>
        <member name="T:Bloomberglp.Blpapi.ZfpUtil.Remote">
            <summary>
            The port the session will be connecting to.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ZfpUtil.Remote.Remote_8194">
            <summary>
            Indicates that the session will be connecting to port 8194.
            </summary>
        </member>
        <member name="F:Bloomberglp.Blpapi.ZfpUtil.Remote.Remote_8196">
            <summary>
            Indicates that the session will be connecting to port 8196.
            </summary>
        </member>
        <member name="M:Bloomberglp.Blpapi.ZfpUtil.GetZfpOptionsForLeasedLines(Bloomberglp.Blpapi.ZfpUtil.Remote,Bloomberglp.Blpapi.TlsOptions)">
            <summary>
            Creates a <see cref="T:Bloomberglp.Blpapi.SessionOptions"/> object for applications
            that leverages private leased lines to Bloomberg network. The
            <see cref="T:Bloomberglp.Blpapi.SessionOptions"/> object is only valid for private
            leased line connectivity.
            </summary>
            <exception cref="T:System.TimeoutException">
            Thrown when the request to retrieve the ZFP server addresses
            times out.
            </exception>
            <exception cref="T:System.Exception">
            Thrown when an internal error occurs during the retrieval of
            the ZFP server addresses.
            </exception>
            <param name="remote">
            Indicates what port the session will be connecting to.
            </param>
            <param name="tlsOptions">
            Client credentials used to establish secure connections to
            endpoints.
            </param>
            <returns>
            A <see cref="T:Bloomberglp.Blpapi.SessionOptions"/> object that can be used to start a
            <see cref="T:Bloomberglp.Blpapi.Session"/> for leased lines.
            </returns>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
             <summary>
             Indicates that the value of the marked element could be <c>null</c> sometimes,
             so the check for <c>null</c> is necessary before its usage.
             </summary>
             <example><code>
             [CanBeNull] object Test() => null;
            
             void UseTest() {
               var p = Test();
               var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
             }
             </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
             <summary>
             Indicates that the marked method builds string by format pattern and (optional) arguments.
             Parameter, which contains format string, should be given in constructor. The format string
             should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
             </summary>
             <example><code>
             [StringFormatMethod("message")]
             void ShowError(string message, params object[] args) { /* do something */ }
            
             void Foo() {
               ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
             }
             </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
            
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
             <summary>
             Indicates that the value of the marked type (or its derivatives)
             cannot be compared using '==' or '!=' operators and <c>Equals()</c>
             should be used instead. However, using '==' or '!=' for comparison
             with <c>null</c> is always permitted.
             </summary>
             <example><code>
             [CannotApplyEqualityOperator]
             class NoEquality { }
            
             class UsesNoEquality {
               void Test() {
                 var ca1 = new NoEquality();
                 var ca2 = new NoEquality();
                 if (ca1 != null) { // OK
                   bool condition = ca1 == ca2; // Warning
                 }
               }
             }
             </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
             <summary>
             When applied to a target attribute, specifies a requirement for any type marked
             with the target attribute to implement or inherit specific type or types.
             </summary>
             <example><code>
             [BaseTypeRequired(typeof(IComponent)] // Specify requirement
             class ComponentAttribute : Attribute { }
            
             [Component] // ComponentAttribute requires implementing IComponent interface
             class MyComponent : IComponent { }
             </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
             </summary>
             <example><code>
             [Pure] int Multiply(int x, int y) => x * y;
            
             void M() {
               Multiply(123, 42); // Waring: Return value of pure method is not used
             }
             </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
             <summary>
             Indicates the type member or parameter of some type, that should be used instead of all other ways
             to get the value that type. This annotation is useful when you have some "context" value evaluated
             and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
             </summary>
             <example><code>
             class Foo {
               [ProvidesContext] IBarService _barService = ...;
            
               void ProcessNode(INode node) {
                 DoSomething(node, node.GetGlobalServices().Bar);
                 //              ^ Warning: use value of '_barService' field
               }
             }
             </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
    </members>
</doc>
